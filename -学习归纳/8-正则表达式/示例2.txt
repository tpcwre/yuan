
								
php手册-》函数参考-》文本处理-》PCRE-》PCRE函数-》preg_match		// 手册位置



									// 正则匹配规则

					量词
					
	/ph+p/		+		1到多个前导字符
	/ph*p/		*		0到多个前导字符
	/ph?p/		?		0到1个前导字符
	/ph.p/		.		任意一个字符
	/ph{3}p/	{3}		要有3个前导字符
	/ph{3,5}p/	{3,5}		要有3到5个前导字符
	/ph{3,}p/	{3,}		至少3个以上前导字符
	/php$/		$		匹配字串行尾
	/^php/		^		匹配字串行首
	/php|jsp/	|		匹配字串左边或右边的内容
	/(php)(jsp)/ 	()		字符分组或定义反引用，可以使用\1\2提取

	()   作用：
	1、提高优先级
	2、将小原子变成大原子
	3、括号里面的东西  我们给它叫做 子模式。整个正则表达式为一个大的模式。里面的小括号包括的东西就是大模式中的子模式。


					元字符
					
	/[a-z]/			匹配a-z的小写字母
	/[A-Z]/			匹配A-Z的大写字母
	/0-9]/			匹配0-9的数字
	/[abc]/			匹配包含a或b或c 的字串 
	/[^abc]/		匹配包含非a,b,c的字串 
	/[a-zA-Z0-9_]/		匹配包含字母，数字及下划线的字串 
	/\w/			同上
	/\W/			匹配非字母，数字及下划线
	/\d/			匹配数字，与[0-9]相同
	/\D/			匹配非数字，与[^0-9]相同
	/\s/			匹配空格
	/\S/			匹配非空格
	/\b/			匹配到达边界的单词
	/\B/			匹配到未达边界的单词
	/\$/	\		使用在特殊字符前面
	
					修饰符
		
	/php/i  	i		不区分大小写

	/php/m  	m		多行识别

					将匹配的字符串中的每个断行都当作新的一行

 s：	/php/s		s	  	修正正则表达式中的. ，让其能够匹配换行回车

	/php/x  	x		忽略正则中的空白

	/php/A  	A		强制从头开始匹配

	/php/U  	U		禁止贪婪匹配，只跟踪到最近的一个匹配符并结束、
					修正正则中的贪婪 ，可以用(.*?)来替换该功能
	





	











	



							//=====基本使用语法

	preg_match('/php/','php');
	//前为规则，后为字串	正解返回1，错误返回0.
	//正则里的匹配不同于相等，它是匹配包含相同的字符，


	//如
	$a='/php/';
	$b='php';			//结果匹配
	//$b='phpasdfsadf';		//结果匹配
	//$b="sdfsdfphp";		//结果匹配
	//$b="sdflkphpjsadf";		//结果匹配
	//$b="phapsldkf";		//结果不匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}



			//=====表达式-量词=====

						// + 匹配 1 到多 个前导字符

	$a='/ph+p/';
	//$b='pp';		//结果不匹配
	//$b='php';		//结果匹配
	//$b='phhhhhp';		//结果匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}

	

						// * 匹配 0 到多 个前导字符

	$a='/ph*p/';
	//$b='pp';		//结果匹配
	$b="phhhhhhhhp";	//结果匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}



						// ? 匹配 0 到1 个前导字符

	$a='/ph?p/';
	//$b='pp';		//结果匹配
	//$b="php";		//结果匹配
	//$b="phhp";		//结果不匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}


						// . 匹配 任意前导字符

	$a='/p.p/';
	//$b='pp';		//结果不匹配
	//$b="php";		//结果匹配
	//$b="pop";		//结果匹配
	//$b="sdfpopsdf";		//结果匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}




						// {x} 匹配x个前导字符

	$a='/p{3}p/';
	//$b='pppsp';		//结果不匹配
	//$b='apppp';		//结果匹配
	//$b='appppa';	//结果匹配
	//$b='appappa';	//结果不匹配
	//$b='apppap';	//结果不匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}





						// .{x} 匹配x个任意前导字符

	$a='/p.{3}p/';
	$b='pabcp';		//结果匹配
	$b='ppppp';		//结果匹配
	$b='abcdp';		//结果不匹配
	$b='fasdfpdjdp';		//结果匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}


						// {x,y} 匹配指定区间个数的前导字符

	$a='/pa{2,5}p/';
	$b='php';		//结果不匹配
	$b='pap';		//结果不匹配
	$b='pasap';		//结果不匹配
	$b='paap';		//结果匹配
	$b='paaaaap';	//结果匹配
	$b='paaaaaap';	//结果不匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}


						// .{x,y} 匹配指定区间个数的任意前导字符

	$a='/p.{2,5}p/';
	$b='php';		//结果不匹配
	$b='phasp';		//结果匹配
	$b='phaasdp';	//结果匹配
	$b='phaddfasdp';	//结果不匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}


						// {x，} 匹配至少x个任意前导字符

	$a='/ph{3,}p/';
	$b='php';		//结果不匹配
	$b='phahp';		//结果不匹配
	$b='phhhp';		//结果匹配
	$b='phhhhp';		//结果匹配
	$b='phhhsdfdshp';	//结果不匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}


						// $ 匹配字串行尾

	$a='/php$/';
	$b='sdfsdphp';			//结果匹配
	$b='sdfsdphpsdfsd';		//结果不匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}


						// ^ 匹配字串行首

	$a='/^php/';
	$b='sdfsdphp';		//结果不匹配
	$b='phpsdsd';		//结果匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}


						// | 匹配字串的左边或右边

	$a='/php|asp|jsp|wamp/';
	$b='sdphp';		//结果匹配
	$b='sdasp';		//结果匹配
	$b='sdjsp';		//结果匹配
	$b='sdjwamp';		//结果匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}


						// () 分组匹配字串 及分组提取

	$a='/(this) (is) (php)/';
	$b='this is php';		//结果匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}
	//分组提取案例在下面--U 贪婪，和(),\2 分组提取的应用  
	
	
	
	
	
	
	
			//=====表达式-元字符=====
			
			
			

						// [a-z] 匹配包含a-z的小写字母的字串

	$a='/[a-z]/';
	$b='abc';		//结果匹配
	$b='1abc';		//结果匹配
//或
	$a='/a[a-z]c/';
	$b='abc';		//结果匹配
	$b='aba';		//结果不匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}


						// [A-Z] 匹配包含A-Z的大写字母的字串 

	$a='/[A-Z]/';
	$b='abAc';		//结果匹配
	$b='1ZS';		//结果匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}


						// [0-9] 匹配包含数字的字串 

	$a='/[0-9]/';
	$b='abAc';		//结果不匹配
	$b='1ZS';		//结果匹配
	$b='a 0.3';		//结果匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}
	

						// [abc] 匹配包含a,b,c的字串  

	$a='/[abc]/';
	$b='a';		//结果匹配
	$b='d';		//结果不匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}
		

						// [^abc] 匹配包含a,b,c以外字符的字串 

	$a='/[^abc]/';
	$b='abcaabbcc';		//结果不匹配
	$b='abcdef';		//结果匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}
	

						// [a-zA-Z0-9_] 匹配包含字母数字下划线的字串 

	$a='/[a-zA-Z0-9_]/';
	$b='a';		//结果匹配
	$b='5';		//结果匹配
	$b='*';		//结果不匹配
	$b='*a';	//结果匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}
			

					// \w 匹配包含所有字母数字及下划线的字串 同[a-zA-Z0-9_]
	$a='/\w/';
	$b='a';		//结果匹配
	$b='2';		//结果匹配
	$b='*';		//结果不匹配
	$b='*a';	//结果匹配
	
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}
				

						// \W 与\w相反 匹配包含非字母数字及下划线的字串
	$a='/\W/';
	$b='a';		//结果不匹配
	$b='*';		//结果匹配
	$b=' ';		//结果匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}


						// \d 匹配包含数字的字串 
	$a='/\d/';
	$b='a';		//结果不匹配
	$b='1';		//结果匹配
	$b='a1';	//结果匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}
				

						// \D 匹配包含非数字字符串
	$a='/\D/';
	$b='a';		//结果匹配
	$b='*';		//结果匹配
	$b='1';		//结果不匹配
	$b='1s';	//结果匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}
				

						// \s 匹配包含空格的字串
	$a='/\s/';
	$b='a';		//结果不匹配
	$b='a ';		//结果匹配
	$b='a *';		//结果匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}
	

						// \S 匹配包含非空格的字串
	$a='/\S/';
	$b='a';		//结果匹配
	$b=' ';		//结果不匹配
//	$b='a ';	//结果匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}
		

						// \b 匹配到达了单词边界 
	$a='/php\b/';
	$b='thisisphp';		//结果匹配
	$b='thisisphpa';		//结果不匹配
	$b='thisisphp the good';		//结果匹配
	
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}
		

						// \B 匹配没有达到单词边界 
	$a='/php\B/';
	$b='thisisphp';		//结果匹配
	$b='thisisphpaa';		//结果匹配
	
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}
			

						// \ 匹配正则中的特殊字符 
	$a='/\$/';
	$b='php';		//结果不匹配
	$b='ph$p';		//结果匹配
	$b='p$hp';		//结果匹配
	$b='p#hp';		//结果不匹配
	
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}
	
	
	
	
	
	
				//=====表达式-修饰符=====
			

								// i 不区分大小写 
	$a='/php/i';
	$b='php';		//结果匹配
	$b='PHp';		//结果匹配
	$b='PHp12a';		//结果匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}	


								// m  多行识别 
	$a='/php$/';
	$b="sdfsdphp\ndfsdf";		//结果不匹配
	$a='/php$/m';
	$b="sdfsdphp\ndfsdf";		//结果匹配
//或
	$a='/^php/';
	$b="sdfsd\nphpdfsdf";		//结果不匹配
	$a="/^php/m";
	$b="sdfsd\nphpdfsdf";		//结果匹配
	
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}	


							// x 忽略正则中的空白 
	$a='/ph p/';
	$b="php";		//结果不匹配
	
	$a='/ph p/x';
	$b="php";		//结果匹配
	
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}			
	

							// A 强制从头开始匹配  类似 ^
	$a='/php/A';
	$b="phpsdfsdf";		//结果匹配
	$b="aphpsdfsdf";		//结果不匹配
	if(preg_match($a,$b)){
		echo "匹配";
	}else{
		echo "不匹配";
	}			
	
	
							// U 禁止贪婪，只跟踪到最近的一个匹配符并结束。
				
	
	//案例在下面--U 贪婪，和(),\2 分组提取的应用   
	
	
	
	
	
	
	
	
	
	
				//=====正则表达式perl风格函数=====
							
							
							
							// preg_grep() 字串中搜索匹配的内容，返回数组
							
	$language = array('php','asp','jsp','python','ruby');
	print_r(preg_grep('/p$/',$language));	//结果 是 php,asp,jsp
	print_r(preg_grep('/^p/',$language));	//结果 是 php,python
	
	
	
	
	
							// preg_match() 判断内容是否匹配规则 返回真假
	
	//if(preg_match("/php[1-6]/",'php1')){			//结果正确
	if(preg_match("/php[1-6]/",'php7')){			//结果错误
		echo '内容正确';
	}else{
		echo "内容错误";
	}
	
	
							//preg_match 验证邮箱格式案例

	$mode='/([\w\.]{2,255})@([\w\-]{2,255}).([a-zA-Z]{2,4})/';
	//$str="ycku60@gmail.com";
	$str="lichao11111111@163.com";
	if(preg_match($mode,$str)){
		echo '邮箱格式正确';
	}else{
		echo "邮箱格式错误";
	}
	
	
	
	
							//preg_match_all 将匹配到的多个结果放在一个数组中  返回一个二维数组
	示例一：
	$mode='/php[1-9]/';
	$str='abcphp1edfphp2hijphp5klmnphp6opq';
	preg_match_all($mode,$str,$out);
	print_r($out);
	echo "<br>".$out[0][2];
	示例二：
	$str='lsjdfhttp://www.baidu.comlkjfs;f';
	echo $str.'<br>';
	$pattern='/http\:\/\/[w]{3}\..*\.[a-z]{2,3}/';
	preg_match_all($pattern,$str,$resault);
	echo '<pre>';
	var_dump($resault);
	
			
							
								
							//preg_quote 定界正则 为特殊字符前加上斜杠
	$str="this price is $150";
	echo $str."<br>";
	echo preg_quote($str);
	
	
	
	
							//preg_replace 替换指定字符
	示例一：
	$mode="/php[1-6]/";
	$str="this is php5,this is php6,this is php6";
	echo $str."<br>";
	echo preg_replace($mode,'python',$str);
	示例二：
	$str='lsjdfhttp://www.baidu.comlkjfs;f';
	echo $str.'<br>';
	$pattern='/http\:\/\/[w]{3}\..*\.[a-z]{2,3}/';	
	$restr='mp3.sina.cn';
	$str = preg_replace($pattern,$restr,$str); 瘵匹配的内容转换成指定的字串
	echo $str;

	
	
							//preg_split 分割字符串
	$mode="/[.@$]/";
	$str='abcd.efghij@klmnopqr$stuvwxyz';
	echo $str."<br>";
	print_r(preg_split($mode,$str));
	
	
	
	
	
					
							// U 贪婪，和(),\2 分组提取的应用
	$mode='/(\[b\])(.*)(\[\/b\])/U';
	$replace='<strong>\2</strong>';
	$string="This is a [b]php5[/b],This is a [b]php6[/b]";
	echo $string."<br>";
	echo preg_replace($mode,$replace,$string)
	*/
	
	//注： （组1） （组2）代表分组    用 \1 \2	提取分组内容
	//注： U 禁止贪婪，如上，当有多个<b></b><b></b> 时，就会产生贪婪情况 ，忽略掉中间的</b><b>  直接操作首个<b>和尾个</b>   而使用 //U时，则会使每组<b></b>都会独立产生作用。
	禁止贪婪还可以用？来解决
	
	
	
	
	
	
							// 另一种风格的正则 POSIX
	
	
	提供了7个函数，ereg(),ereg_replace(),eregi(),eregi_replace(),split(),spliti(),sql_regcase()	







	




							// 回车，换行，的区别，以及它们在不同系统里的区别 

	\r 回车回车，告诉打字机把打印头定位在左边界。

	\n 换行换行，告诉打字机把纸张向下移动一行。
			
	\t 制表符
	windows里面每行结尾是\r\n
	Linux系统里面 \n
	MAC系统里面  \r
			















