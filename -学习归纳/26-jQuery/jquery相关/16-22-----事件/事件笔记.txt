



		第16课 基础事件
学习重点：
	1.绑定事件
	2.简写事件
	3.复合事件


-----绑定事件的类型：
	click:		单击
	dblclcik:	双击
	mousedown:	鼠标按下
	mouseup:	鼠标弹起
	mousemove:	鼠标移动
	mouseover:    	鼠标移入
	mouseout:	鼠标移出
	change:		表单值的改变
	select:		文本内容被选定事件
	submit:		提交触发
	keydown:	键盘按下
	keypress:       键盘按下
	keyup:		键盘抬起
	blur:		丢失焦点
	focus:		激活焦点
	load:		加载
	resize:		窗口大小的改变
	scroll:		滚动
	error:		错误
	...更多事件可以参考手册.




html页面；
<script src='jquery-1.11.1.js'></script>
<script src='a.js'></script>
<link type='text/css' rel='stylesheet' href='a.css'/>
<body>
<form>
	<input type='button' value='按钮'/>
	<input type='text' value='abcdefg'/>
	<input type='submit' value='提交'/>
</form>
	<div></div>
	<P>p</p><P>p</p><P>p</p><P>p</p><P>p</p><P>p</p><P>p</p>
	<P>p</p><P>p</p><P>p</p><P>p</p><P>p</p><P>p</p><P>p</p>
	<P>p</p><P>p</p><P>p</p><P>p</p><P>p</p><P>p</p><P>p</p>
	<P>p</p><P>p</p><P>p</p><P>p</p><P>p</p><P>p</p><P>p</p>
</body>



.js页面
$(function(){
	//jq 用匿名函数通过 .bind(type,[],fn) 绑定事件
	$('input').bind('click',function(){
	//	alert('aaaaa');
	});

	//jq 用普通函数通过 .bind()绑定事件
	//$('input').bind('click',fn1);
	function fn1(){
		alert('fn1');
	}
	function fn2(){
		alert('fn2');
	}

	// jq绑定多个事件
	//$('input').bind('click mouseover',fn);

	// jq绑定多个不同效果事件
	//$('input').bind('mouseover mouseout',function(){
	//	$('div').html(function(index,value){
		//	return value+1;
	//	});
	//});
	
	//通过对象键值对绑定多个事件
	$('input').bind({
		mouseover:function(){
	//		alert('移入');
		},
		mouseout:function(){
	//		alert('移出');
		}
	});
	

	//删除绑定事件的三种形式
	//$('input').bind('click mouseover',fn);
	//$('input').unbind();			//删除元素绑定的所有事件
	//$('input').unbind('mouseover');	//删除元素指定的事件

	//$('input').bind('click',fn1);
	//$('input').bind('click',fn2);
	//$('input').unbind('click',fn2);	//删除以函数形式绑定的事件




	//jq封装的事件
	$('input').click(function(){		//click 单击事件
	//	alert('click单击事件');
	});
	$('input').dblclick(function(){
	//	alert('dblclcik双击事件');	//dblclick 双击事件
	});

	$('input').mousedown(function(){
	//	alert('mousedown鼠标左键按下事件');	//mousedown 鼠标左键按下事件
	});

	$('input').mouseup(function(){
	//	alert('mouseup鼠标弹起事件');		//mouseup 鼠标左键弹起事件
	});

	$(window).unload(function(){
	//	alert('页面卸载事件');		//unload 页面卸载事件（刷新或关闭，需浏览器支持）
	});

	$(window).resize(function(){
	//	alert('窗口大小改变事件');	//resize 窗口大小改变事件
	});

	$(window).scroll(function(){
	//	alert('滚动条位置改变事件');	//scroll 流动条位置改变事件
	});
	
	$(":text").select(function(){
	//	alert('选定文本内容事件');	//select 选定文本内容事件
	});
	
	$(':text').change(function(){
	//	alert('文本内容被改变事件');	//change 文本内容被改变事件
	});


	$('form').submit(function(){
		alert('表单提交事件');		//submit 表单提交事件
	});			
	//注意:submit事件是针对于form元素的 (一：submit要在form中，二：要用form对象来操作)
});


















	第17课 基础事件下


-----mouseover(),mouseout()与mouseenter(),mouseleave()的区别
	mouseover() , mouseout()	表示鼠标移入和移出
	mouseenter() , mouseleave()	表示鼠标穿过和穿出 
	enter(),leave()在穿过子元素时不会触发;over(),out()则会触发。 就是说如果只有一个元素的时候它们的效果是一样的，但如果有多个元素重叠的时候效果就会不一样了！


-----键盘事件keydown(),keyup(),keypress()
	注意：keydown(),keyup()返回的是键码，而keypress()返回的是字符编码
	$('input').keydown(function(e){
		alert(e.keyCode);	//keydown()keyup()要使用keyCode	可显示功能键
	});

	$('input').keypress(function(e){
		alert(e.charCode);	//keypress()要使用charCode	不显示功能键
	});

	$(window).keydown(function(e){
	//	alert(e.keyCode);
	});
	$(window).keyup(function(e){
	//	alert(e.keyCode);
	});
	$(window).keypress(function(e){
	//	alert(e.charCode);
	});



html页面
<script src="jquery-1.11.1.js"></script>
<script src='migrate.js'></script>
<script src="a.js"></script>
<head>
	<link rel='stylesheet' type='text/css' href='./a.css'/>
	<link type="text/css" rel="stylesheet" href="./a.css" />
</head>
<body>
	<div style='width:300px;height:300px;background:green'>
		<p style="width:100px;height:100px;background:blue"></p>
		<input type='password'>
	</div>
	<strong></strong>
	<input type='text' />
	<div>
	</div>
	<div id='one' style='width:300px;height:300px;background:green'>
	</div>
</body>







.js页面
$(function(){
	
	//-----鼠标移入和移出事件
	$('div').mouseover(function(){
	//	$(this).css('background','red');
	//	$('strong').html(function(index,value){
	//		return value+1;
	//	});
	}).mouseout(function(){
	//	$(this).css('background','green');
	});	//over()和out的子节点会再次触发父节点事件，它们不统一。

	//-----鼠标穿过和穿出事件
	$('div').mouseenter(function(){
	//	$(this).css('background','red');
		$('strong').html(function(index,value){
	//		return value+1;
		});
	}).mouseleave(function(){
	//	$(this).css('background','green');
	});	//enter()和leave() 的子节点不会再次触发父节点事件，它们统一

	//-----focus光标激活事件(当前元素激活)
	$('input').focus(function(){
	//	alert('光标激活');
	});

	//-----blur光标丢失事件(当前元素激活)
	$(':password').blur(function(){
	//	alert('光标丢失');
	});

	//-----focusin 光标激活事件(可子节点激活)
	$('div').focusin(function(){
	//	alert('光标激活');
	});

	//-----focusout 光标激活事件(可子节点激活)
	$('div').focusout(function(){
	//	alert('光标激活');
	});


	//-----hover() 光标悬停事件
	//注：hover()是结合了mouseenter(),和mouseleave()两个方法。
	$('div').hover(function(){
	//	$(this).css('background','red');
	},function(){
	//	$(this).css('background','green');
	});


	//-----点击循环变换(切换)背景色(颜色)
/*
	var aa=0;
	$('#one').click(function(){
		if(aa==0){
			$(this).css('background','blue');
			aa=1;
		}else if(aa==1){
			$(this).css('background','red');
			aa=2;
		}else if(aa==2){
			$(this).css('background','green');
			aa=0;
		}
	});
*/

	//-----点击元素消失再恢复
	$('div').click(function(){
	//	$(this).toggle('slow');
	//	$(this).toggle(4000);
	});


	//-----toggle(fn1,fn2,,,,)  切换元素属性 
	//注：1.8以后以删除 需要引入migrate文件才可使用
	$('div').toggle(function(){
		$(this).css('background','red');	
	},function(){
		$(this).css('background','blue');
	},function(){
		$(this).css('background','green');
	});
});











		第18课 事件对象
学习要点：
	1.事件对象
	2.冒泡和默认行为

.js页面
$(function(){
	//----- e 系统自动传给函数的事件 也可是其它变量
	//其结果是一个对象，即是对象就会有属性和方法
	$('input').click(function(es){
	//	alert(es+'es');	
	});

	//-----type 获取这个事件的事件类型，例如click
	$('input').bind('click',function(e){
	//	alert(e.type);	//获取事件类型
	//	alert(typeof e.type); //结果string类型
	});

	//-----target 获取触发事件的DOM元素
	//target是获取触发元素的DOM,就是点哪个元素就是哪个元素
	$('input').bind('click',function(e){
	//	alert(e.target);	
	});


	//-----currentTarget 获取指定触发的DOM元素，等同与this
	//currentTarget得到的是监听元素的DOM,就是绑定的哪个元素就是哪个元素
	$('div').bind('click',function(e){
		//alert(e.currentTarget);
		//alert(e.target);
	});
	//-----target与currentTarget的区别
	$('div').bind('click',function(e){
	//	alert(this==e.currentTarget);	//currentTarget 相当于this
	});
	$('div').bind('click',function(e){
	//	alert(this==e.target);		//target则不然
	});


	//-----relatedTarget 获取目标（鼠标）离开之后或进入之前的那个DOM元素
	//也就是移入移出最相邻的那个DOM
	$('span').bind('mouseover',function(e){
	//	alert(e.relatedTarget);	//移入前的DOM元素
	});
	$('span').bind('mouseout',function(e){
	//	alert(e.relatedTarget);	//移出后的DOM元素
	});


	//-----data 获取事件调用时的额外数据 可以是数字，字符串，数组，对象
	$('input').bind('click',123,function(e){
	//	alert(e.data);		//获取到的数字
	});
	$('input').bind('click','abc',function(e){
	//	alert(e.data);		//获取到的字符
	});
	$('input').bind('click',[1,2,'a','b'],function(e){
	//	alert(e.data);		//获取到的数组
	//	alert(e.data[3]);	//获取数组中指定下标的元素
	});
	$('input').bind('click',{'user':'lee','age':100},function(e){ //user:lee是输入的键值对
	//	alert(e.data['user']);	//获取键值对user对应的值lee
	});


	//-----pageX/pageY 获取相对于页面原点的水平/垂直坐标
		//页面原点就是文档的左上点（x=0,y=0）的位置
	//-----screenX/screenY	获取显示器屏幕位置的水平/垂直坐标（非jquery封装）
	//-----clientX/clientY  获取相对于页面视口的水平/垂直坐标（非jquery封装）
	$(document).bind('click',function(e){
	//	alert(e.pageX+','+e.screenX+','+e.clientX);	//三种X坐标
	//	alert(e.pageY+','+e.screenY+','+e.clientY);	//三种Y坐标	
	});
	//当三种坐标在出现滚动条的情况下，结果就会不同，pageX/Y的坐标就会以原点累加，比其它值都大
	
	//-----result  获取上一个相同事件的返回值
	$('input').bind('click',function(){
	//	return 123;
	});
	$('input').bind('click',function(e){
	//	alert(e.result);
	});

	//-----timeStamp  获取事件触发的时间戳
	$(document).bind('click',function(e){
	//	alert(e.timeStamp);
	});

	//-----which  获取鼠标的左中右键（1，2，3），或获取键盘按键
	$(document).bind('mousedown',function(e){
	//	alert(e.which);	  //获取哪个鼠标键触发的事件
	});	
	$(document).bind('keydown',function(e){
	//	alert(e.which);	  //获取哪个键盘键触发的事件
	});

	//-----altKey/shiftKey/ctrlKey/metaKey  获取事件发生时是否按下了alt,shift,ctrl或meta键。
	$('div').bind('click',function(e){
	//	alert(e.ctrlKey);	
	});
	$('div').bind('click',function(e){
	//	alert(e.altKey);	//alt好像不好用，，
	});	
	$('div').bind('click',function(e){
	//	alert(e.shiftKey);
	});
});


html页面
<script src='jquery-1.11.1.js'></script>
<script src='a.js'></script>
<body>
	<input type='button' value='按钮'/>
	<div style='width:200px;height:200px;background:#ccc'>
		<span style='width:100px;height:100px;background:#eee;display:block'></span>
	</div>
	<p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p>
	<p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p>
	<p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p>
	<p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p>
</body>
















	第19课 事件对象下



.js页面
$(function(){
	//-----冒泡和禁止冒泡行为
	//冒泡行为；如果页面中重叠了多个元素，并且重叠的这些元素都绑定了同一个事件，那么就会出现冒泡问题。
	//e.stopPropagation() 禁止冒泡行为
	$('input').bind('click',function(e){
	//	e.stopPropagation();
	//	alert('input');
	});

	$('div').bind('click',function(){
	//	alert('div');
	});
	$(document).bind('click',function(){
	//	alert('document');
	});


	//-----e.preventDefault() 阻止默认行为
	//-----默认行为：就是当右键点击时出现的默认菜单，点击超连接时跳转页面，点击提交按键提交信息，这都是默认行为。
	//-----禁止超连接跳转
	$('a').bind('click',function(e){
	//	e.preventDefault();
	//	alert('baidu');
	});

	//-----禁止表单提交
	$(':submit').bind('click',function(e){
	//	e.preventDefault();
	//	alert('submit');
	});
	
	$('form').submit(function(e){
	//	e.preventDefault();
	});
	
	//-----同时阻止冒泡和默认行为
	$('a').bind('click',function(e){
	//	e.preventDefault();
	//	e.stopPropagation();
	//	alert('baidu');
	});
	
	//-----同时阻止冒泡和默认行为的简捷方法
	$('a').bind('click',function(){
	//	alert('baidu');
	//	return false;
	});


	//-----e.isPropagationStopped()判断是否调用了stopPropagation()方法
	//-----e.isDefaultPrevented()判断是否调用了preventDefault()方法
	$('a').bind('click',function(e){
		//alert('baidu');
		//e.stopPropagation();
		//e.preventDefault();
		//alert(e.isDefaultPrevented());
		//alert(e.isPropagationStopped());
	});

	
	//-----e.stopImmediatePropagation() 取消冒泡行为，并取消该事件的后续事件处理函数
	//-----e.isImmediatePropagationStopped() 判断是否调用了stopImmediatePropagation()方法
	$('a').bind('click',function(e){
		e.stopPropagation();
		e.preventDefault();
	
		e.stopImmediatePropagation(); //此方法会阻止同类事件的后续事件
		alert(e.isImmediatePropagationStopped());
		alert('a');
	});
	$('a').bind('click',function(){
		alert('aa');	//上一次同类事件使用e.stopImmediatePropagation()时，本次事件将停止
	});
	$('div').bind('click',function(e){
		alert('div');
	});
	$(document).bind('click',function(e){
		alert('document');
	});
});




html页面
<script src='jquery-1.11.1.js'></script>
<script src='a.js'></script>
<body>
	<div style='width:200px;height:200px;background:#ccc'>
		<input type='button' value='按钮' />
		<a href='www.baidu.com'>baidu</a>
	</div>
	<form action='11.html'/>
		<input type='submit' value='提交'/>
	</form>
</body>











	第20课	高级事件上

学习要点；
	1.模拟操作
	2.命名空间
	3.事件委托
	4.on,off和one

一：模拟操作
	在事件触发的时候，有时我们需要一些模拟用户行为的操作，例如，当网页加载完毕后自行点击一个按钮触发一个事件，而不是用户去点击。


.js页面
$(function(){
/*
	$('input').bind('click',function(){
	//	alert('将模拟用户操作触发');
	});
//-----模拟人为操作行为（点击行为）
	//$('input').trigger('click');
	
//-----模拟人为操作行为的简便方法
	$('input').bind('click',function(){
	//	alert('模拟人为操作事件');
	}).trigger('click');

//-----模拟行为可以传额外数据（数值，字串，数组，对象）
	//数字和字串
	$('input').click(function(e,data1,data2,data3,data4){
	//	alert(data1+'|'+data2+'|'+data3+'|'+data4['user']);
	}).trigger('click',['123','abc',[1,2,'a'],{'user':'lee'}]);
//trigger额外数据，只有一条时可以省略中括号，多条时不能省略

	//bind的额外数据用e.的形式，模拟行为的数据直接用data1,2....
	$('input').bind('click',{name:'zhang'},function(e,data1,data2,data3,data4){
	//	alert(data1+'|'+data2+'|'+data3+'|'+data4.user+'|'+e.data.name);
	}).trigger('click',['123','abc',[1,2,'a'],{'user':'wang'}]);

//-----自定义事件
//自定义事件本身没有绑定硬件，不会产生事件，它是给trigger准备的，相当于调用一个函数。
	$('input').bind('myEvent',function(){
	//	alert('自定义事件');
	}).trigger('myEvent');


//-----trigger模拟系统事件的简写方式 
	$('input').click(function(){
	//	alert('trigger模拟事件的简写');
	}).click();

//-----trigger可简写的系统事件

	blur 		focusin		mousedown	resize
	change		focusout	mouseenter	scroll
	click		keydown		mouseleave	select
	dblclick	keypress	mousemove	submit
	error		keyup		mouseout	unload
	focus		load		mouseover


//-----triggerHandler()模拟用户行为的另一个方法(它与trigger有四个区别)
	//$('input').click(function(){
		alert('模拟用户行为的另一个方法');
	//}).triggerHandler('click');
*/

//-----trigger与triggerHandler的区别
	//一：默认行为的禁止
	//trigger会提交后自动跳转，没有阻止默认行为
	//$('form').trigger('submit');

	//triggerHandler提交后不会跳转，默认行为会被阻止
	//$('form').triggerHandler('submit');

	//如果我们要使用trigger()来模拟用户提交，并阻止事件的默认行为，就要这么写
	$('form').submit(function(e){
	//	e.preventDefault();
	}).trigger('submit');

	//二：triggerHandler()只会影响第一个匹配的元素，而trigger()会影响所有

	/*三：triggerHandler()方法会返回当前事件执行的返回值，如果没有则返回undefined;而tirgger()则返回当前包含事件触发元素的jQuery对象（方便连缀调用）*/
/*
	$('input').click(function(){
		alert('aaaaaa');
	}).trigger('click').css('color','yellow');	//返回jQuery对象可以连缀

	$('input').click(function(){
		alert('triggerHandler()');
		return 123;
	}).triggerHandler('click');	//返回return值或undefined 都不可连缀
*/

	/*四：trigger()在创建事件的时候，会冒泡，但这种冒泡是自定义事件才能体现出来，是jQuery扩展于DOM的机制，并非DOM特性，而triggerHandler()不会冒泡 */

	$('div').bind('myEvent',function(){
		alert('自定义事件');
	});
	//$('.d3').trigger('myEvent');	//trigger在多层相同元素，指定上层时会冒泡

	//$('.d3').triggerHandler('myEvent');	//triggerHandler()不会冒泡


//-----命名空间： 
	/* 有时我们想对事件进行移除，但对于同名元素绑定的事件移出往往比较麻烦，这个时候，可以使用事件的命名空间解决 */

	$('input').bind('click.aaa',function(){	//'click.aaa' 中的.aaa就是区别每个事件的命名
		alert('aaa');	
	});
	$('input').bind('click.bbb',function(){
		alert('bbb');
	});
	$('input').bind('mouseover.aaa',function(){
		alert('mouseover');
	});

//-----移除一个指定类型且指定命名的事件
	//$('input').unbind('click.aaa');	

//-----移除所有指定命名的事件
	$('input').unbind('.aaa');	
});



html页面
<script src='jquery-1.11.1.js'></script>
<script src='a.js'></script>
<body>
	<input type='button' value='按钮'/>
	<div class='d1'>
		<div class='d2'>
			<div class='d3'>
				div
			</div>
		</div>
	</div>
</body>








	第21课 高级事件（中）

事件委托：
	什么是事件委托？用现实中的理解就是：有100个学生同时在某天中午接到快递，但这100个学生不可能同时站在学校门口等，那么都会委托门卫去收取，然后再逐个交给学生。而在jQuery中，我们通过事件冒泡的特性，让子元素绑定的事件冒泡到父元素（或祖先元素）上，然后再进行相关处理即可。


$(function(){
/*
	//bind绑定了三个button事件
	$(':button').bind('click',function(){
	//	alert('事件不委托');	
	});
	
//-----live绑定的是document,而非button(1.4.3后移除了)
	//所以不管有多少个button,永远只会绑定一次事件
	$(':button').live('click',function(){
	//	alert('委托事件');
	});

//-----bind无法给动态生成的元素绑定事件
	$(':submit').bind('click',function(){
	//	$(this).clone().appendTo('#box');
	});
*/

//-----live可以绑定动态生成的事件
	/* live绑定在document上，而点击button其实是冒泡到document上，并且点击document的时候，需要验证 event.type 和 event.target才能触发 */
	$(':submit').live('click',function(){
	//	$(this).clone().appendTo('#box');
	});
//-----live 不支持连缀调用
	//这样是不可以的
	$(':submit').eq(0).live('click',function(){
	//	$(this).clone().appendTo('#box');
	});


//-----die() 移除事件（1.4.3以后删除了，等同于unbind()）
	$('input').live('click',function(){
	//	$(this).clone().appendTo('#box');
	});
	//$('input').die('click');

//----克隆事件与委托事件的区别
	//clone(true)会产生很多冗余这是一个复制事件，不是委托事件
	$(':submit').bind('click',function(){
	//	$(this).clone(true).appendTo('#box');
	});

	$(':button').live('click',function(){
	//	$('<input type="button" value="按钮" />').appendTo('#box');
	});


//-----delegate()替代 live的方法  (它绑定的不是document,而是父元素)
	//此方法需传三个参数：1，目标元素(标签名或类名，Id名) 2,事件名称 3,function
	
	$('#box').delegate(':submit','click',function(){
		$(this).clone().appendTo('#box');
	});
	//live 语义不清晰，由于他没有指定绑定了谁，所以不清晰
	//delegate 主义清晰，绑定谁，谁就冒泡的底层元素


//-----undelegate() 移除delegate的方法
	$('#box').undelegate('click');


//-----live()和delegate()和bind()的区别
	/* 这三种方法一样都是事件绑定，那么区别也很明显，用途上遵循两个原则：1，在DOM中很多元素绑定相同事件时；2，在DOM中尚不存在即将生成的元素绑定事件时；我们推荐使用事件委托的绑定方式，否则推荐使用bind()的普通绑定。

});




html页面
<script src='jquery-1.11.1.js'></script>
<script src='migrate.js'></script>
<script src='a.js'></script>
<body>
	<div id='box' style='width:200px;height:200px;background:green'>
		<input type='button' value='按钮' class='one'/>
		<input type='button' value='按钮' class='one'/>
		<input type='button' value='按钮' class='one'/><br><br>
		<input type='submit' value='提交'/>
	</div>
</body>













	第22课 高级事件 - on, off 和one

	jQuery 不但封装了大量常用的事件处理，还提供了不少高级事件方便开发者使用，比如模拟用户触发事件，事件委托事件，和统一整合的on和off,以及仅执行一次的one方法，这些方法大大降低了开发者难度，提升了开始者的开发体验。

	on,off,one
	目前绑定事件和解绑的方法共有三组六个，由于这三组的共存有可能会造成一定的混乱，为此jQuery1.7以后推出了on(),off()方法彻底摒弃了前面三组。


$(function){

-----事件绑定及解绑的六种普通方法

	1	普通绑定 bind()
	2	普通解绑 unbind()
	3	事件委托 live()
	4	事件委托 delegate()
	5 	解绑委托 die()
	5 	解绑委托 undelegate()

//-----新绑定及解绑方法 on(),  off()
	
	$(':button').on('click',function(){
		alert('新绑定方法on');
	});

//-----on()方法也可以添加额外数据 
	
	$(':button').on('click',123,function(e){
		alert(e.data);		//额外数值
	});
	$('a').on('mouseover',[1,2,'abc'],function(e){
		alert(e.data);		//额外数组
		alert(e.data[2]);
	});
	$('div').on('mouseover',{'name':'wang'},function(e){
		alert(e.data.name);	//额外对象
	});

//-----on()方法同时绑定多个事件(两种方式)
	//方式一
	$(':button').on('mouseover mouseout',function(){
	//	alert('on()方法同时绑定移入，移出多个事件');
	});

	//方式二
	$(':button').on({
		mouseover:function(){
			alert('移入');
		},
		mouseout:function(){
			alert('移出');
		}
	});

//-----on()方法中同时阻止默认和冒泡行为的两种方式
	//方式一，当函数中有其它内容时用此方法
	$('form').on('submit',function(){
	//	return false;
	});
	
	//方式二，当函数中无其它内容内返回false时用此方法
	$('form').on('submit',false);

//-----on()方法中阻止默认行为
	$('form').on('submit',function(e){
		e.preventDefault();
	});

//-----on()方法中阻止冒泡行为

	$('div').on('click',function(){
		alert('a');
	});
	$('form').on('click',function(e){
		e.stopPropagation();
		alert('sub');
	});

//-----off()移除绑定事件
	$(':button').on('click',function(){
		alert('aaaa');
	});


	//$(':button').off('click');


//-----最新版移除绑定事件的函数
	function fn1(){
		alert('aaaaaa');
	}
	function fn2(){
		alert('bbbbbbb');
	}
	$(':button').on('click',fn1);	

	$(':button').off('click'.fn);

//-----off()新版本移除命名空间
	$(':button').on('click.a',function(){
		alert('aaaaaa');
	});
	$(':button').on('click.b',function(){
		alert('bbbbb');
	});

	$(':button').off('click.b');


//-----on()的事件委托方法
	$('#box').on('click',':button',function(){
		$(this).clone().appendTo('#box');
	});

//-----off() 移除事件委托
	$('#box').off('click',':button');

//-----one()仅一次触发事件
	$(':button').one('click',function(){
		alert('one()仅触发一次事件');
	});

//-----one()仅一次触发委托事件
	$('#box').one('click',':button',function(){
		$(this).clone().appendTo('#box');
	});
});




html页面
<script src='jquery-1.11.1.js'></script>
<script src='migrate.js'></script>
<script src='a.js'></script>
<body>
	<div id='box' style='width:200px;height:200px;background:green'>
	<form action='1.html'>
		<input type='button' value='按钮' class='one'/>
		<input type='button' value='按钮' class='one'/>
		<input type='button' value='按钮' class='one'/><br><br>
		<input type='submit' value='提交'/>
	</form>
	</div>
</body>

