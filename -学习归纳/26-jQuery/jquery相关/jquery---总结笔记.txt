jquery的功能和优势
  jquery作为javascript封装的库，他的目地就是为了简化开发者使用javascript,主要功能有以下几点。
  1，像CSS那样访问和操作DOM 
  2，修改CSS控制页面外观
  3，简化javascript代码操作
  4，事件处理更加容易
  5，各种动画效果使用方便
  6，让ajax技术更加完美
  7，基于jquery大量插件
  8，自行扩展功能插件




基础事件----16，17
事件对象----18，19
高级事件----20，21，22
动画效果----23，24，25

		
		=====jquery=====

-----jquery 的使用方法
-----代码风格：
-----jquery的连缀功能
-----window.onload 和 $(document).ready()的区别
-----对象的转换：
-----多个JS类库发生冲冲突的解决
-----获取对象的方式
-----获取对象的个数; size()方法 和 length 属性  
-----通过eq() 指定复数对象中的某一个对象
----- $('#id > p').css();  快捷操作子节点
-----判断DOM节点是否存在






	第6课
	=====选择器
-----.next() .next('p')	下一个(为p)兄弟节点			% 后面的兄弟节点
-----.nextAll() .nextAll('x')指定xx以后的所有( 为x )的兄弟节点	%
-----.prev() .prev('p') 指定上一个（为p）兄弟节点		% 前面的兄弟节点
-----.prevAll() .prevAll('p') 指定上面的全部（为p）兄弟节点	%
-----.siblings() .siblings('p')  指定上下所有(为p)同级节点。	% 前后的兄弟节点
-----.children() 一级子选择器					% 子节点
	被选定的一级子选择器的后代选择器也会受到影响
-----.find('x') 选择后代选择器中为x的节点			% 多级子节点
-----$('#one, .two, strong, .three')群组选择器  		% 群组
-----$('ul li a')后代选择器
-----$('ul li *')全局选择器 或 区域性全局选择器
-----$('p.one')限制p标签且类名为one的元素			% 限制
-----$('x','#y')选择#y下为x的后代节点
----- $('xx + xx')	下一个兄弟选择器
-----$('x ~ ') $('x ~ y') 指定x以后的所有( 为y )的兄弟节点
-----$('#two > a')	指定#one下所有为a 的一级子节点
----- .nextUntil('x')指定下面非X节点，遇到X节点结束 		% 非
----- .prevUntil('x')指定上面非x节点，遇到x节点结束		% 非
-----$('x[title]') 通过属性title来设置样式
-----$('a[title=num1]')  设置指定的属性的样式			% 属性
-----$('a[title^=nu]')	设置标签名的属性以哪些字母为开头的样式
-----$('a[title$=f]')	设置标签名的属性以哪些字母为结尾的样式
-----$('a[title|=num]')  属性值完全匹配或完全匹配-以前部分内容
-----$('a[title!=num1]')  设置不等于xxx字段属性的样式
-----$('a[title~=num1]')   包含空格的属性列表
-----$('a[title*=nu]')   属性值中包含指定字串的
-----$('a[aaa][title=num]')  匹配属性的个数与名字




	第7课
	=====基本过滤器=====
-----$('li:first')	 选择首个li元素				% 首个 第一个
-----$('li:last')	 选择最后一个li元素			% 最后一个
-----$('#one li:last')	 利用ID选择#one 中最后一个li元素
-----$('ul:first li:last')	 用first同时选择 父子两级元素	% 父子 两级
-----$('li:not(.two)')	 选择除指定类名以外的			% 以外
-----$('li:even')	 选择0以上为偶数的元素（包括0）		% 偶数
-----$('li:odd')	 选择0以上为奇数的元素（不包括0）	% 奇数
-----$('li:eq(3)')	 以下标形式选择元素（下标是从0开始）	% 指定 下标
-----$('li:eq(-3)')	 以下标形式选择元素（负数就是倒数-1为最后一个）
-----$('li:gt(3)')	 选择大于指定下标的所有元素(可以指定负数)	% 下标 大于
-----$('li:lt(3)')	 选择小于指定下村的所有元素（可以指定负数）	% 下标 小于
-----$("h2:header")	 选择指定h1-h6标题元素				% 标题
-----$("div h3:header")	 选择指定区域内h1-h6标题元素		
-----$('input').get(0).focus();		让表单输入框自动获取焦点	% 自动获取 焦点 
-----$(':focus')			选择初始化焦点所在的元素	% 初始化 焦点



	====四种常用的过过滤器方法====
-----$('li').first()	选择首个li元素				% 首个
-----$('li').last()	选择最后一个li元素			% 最后一个
-----$('li').eq(3)	选择指定下标的li元素			% 指定 下标
-----$('li').not('.two')	选择指定.two类名以外的所有li元素% 以外	




	第8课
	=====内容过滤器
-----$('div:contains("ku.co")')		选取含有某字段的文本元素 	% 包含 文本 字段
-----$('div:empty').css('background','yellow').css('height','20px');	% 空文本 空元素
	//选取不包含子元素和空文本的元素
	//设置内容为空的div节点元素，需要设置其高度才能看见效果  所谓空的就是即不能有内容也不包含标签
	
-----$('ul:has(.two)')		选择ul的子节点li中含有class是two的 ul节点 % 含有
-----$('div:parent')		选择有子元素的div节点			% 含有子节点 父节点
-----$('ul').has('.two')	选择ul子节点中包含有class为two的 ul节点 此方法等同于$('ul:has(.two)')
-----$('li').parent().size();		获取li的父元素的标签的个数	% 个数 长度
-----$('li').parent().get(0);		获取li的父元素标签的第一个元素
-----$('li').parent()			设置li父元素标签的所有元素的样式
-----$('li').parents()			设置祖先元素的样式（直接到html元素）
-----$('li').parentsUntil('body')	样式设置到body标签为止，	% 为止
	


	=====可见性过滤器
-----$('div:hidden').size(); 		获取隐藏的DIV 节点元素的个数 	% 隐藏
-----$('div:hidden').css('background','red').show(1000);		% 显示隐藏
	//使隐藏的DIV节点元素 在一秒后 从上至下显示出来
-----$('div:visible').size());  	获取可见的div节点元素的个数	% 获取可见



	=====子元素过滤器=====
							(以下相同：且为指定名的)
-----$('li:first-child')	//获取每个父元素的第一个子元素	 	% 首个 第一个 子节点
-----$('li:last-child')		//获取每个父元素的最后一个子元素	% 最后一个子节点
-----$('li:only-child')		//获取只有一个子元素的元素		% 只有一个
-----$('li:nth-child(odd)')	//获取每个父元素的奇数子元素		% 奇数子节点
-----$('li:nth-child(even)')	//获取每个父元素的偶数子元素		% 偶数子节点
-----$('li:nth-child(1)')	//获取每个父元素下的指定下标的子元素	% 指定下标子节点
-----$('li:nth-child(3n)')	//获取每个父元素下的子元素，获取方式为逢N获取	% n
-----$('li:nth-child(3n+1)')	//获取每个父元素下的子元素，获取方式为逢N+1获取







	第9课
	=====其它方法=====

-----alert($('.two').is('li'));	//判定.two类所在元素是否为‘li’   % 判定 是否
-----alert($('.two').is($('li')));	//is()的形式不仅可以是标签名，也可以是jquery对象
-----alert($('.two').is($('li').get(2)));	//判定.two类所在元素是否是下标为2的‘li’DOM元素对象

-----alert($('.two').is($('li').eq(1)));	//判定.two类所在元素是否是下标为2的‘li’jquery元素对象

-----判断同时拥有指定的类名和属性名的元素是否存在
-----attr()-获取title属性值的参数
	alert($('.two').is(function(){	
		return $(this).attr('title')=='aaa';	//attr()-获取title属性值的参数
	}));
	//判断.two类名所在的元素中同时存在title属性为aaa的 元素是否存在。 
	//注意这个方法必须要用this作引用 
	
-----alert($('li').eq(1).hasClass('two'));	//判断下标为1的 li 对象的类名是否为‘two’
-----$('li').slice(2,7).css('color','red'); //选择下标从 2 到 7的 li对象（7不受影响）
							% 从 到 之间
-----$('li').slice(2).css('background','red');	//选择下标从2往后的所有 li 元素
							% 以下 往后 所有
-----$('li').slice(2,-3).css('background','red');	//选择下标从2到倒数第三个之间的li元素


-----alert($('#one').find('li').end().get(0).nodeName); //获取指定ID名所在元素下的子节点li的上一层元素的第一个元素		% 指定 上一层
-----alert($('#one').find('li').parent().get(0).nodeName) //同上的另一种方式 
-----$('#one').next('ul').end().css("background",'#ccc');  //end() 获取当前元素前一次状态

-----alert($('div:first').children().size());	//获取第一个div节点的子节点的个数
-----alert($('div:first').contents().size());	//获取第一个div节点中元素个数

-----filter() 多选择器共同实现
	//$('li').filter('.two, :first, :last').css('background','#ccc');
	//$('li').filter('.two, :first-child, :last-child').css('background','red'); 

-----filter(function(){})	同时限制多条件
	$('li').filter(function(){
		return $(this).attr('class')=='two' && $(this).attr('title')=='aaa';
	}).css('background','#ccc');




		第十集
	=====基础DOM和CSS操作

-----alert($('#two').html());	//获取指定元素中的内容（包括标签）
-----alert($('#two').text());	//获取指定元素中文本内容 （不包括标签）
-----$('#one').html('<u>aaaaaaaa</u>'); //替换指定元素中的内容 会解析标签
-----$('#two').text('<a href="#">www.klsdfs.com</a>');  
	//替换指定元素文本内容，不会解析标签

-----alert($('input').eq(1).val()); 	//获取表单value值
-----$('input').eq(1).val('ddddddddd');	//替换表单value值
-----$('input').eq(2).val('女');	//替换radio表单值
-----alert($('input').eq(2).val());
	//if($('input').eq(2).val()=='女'){
		//$('#four').text('女');	//替换radio关联文本内容
	//}

-----$('input').val(['男','女','编程']);	//设置表单选择项自动选择
	
-----alert('#one').attr('id');	//获取某个元素 KEY属性的属性值 

-----$('div').attr('title','我是域名'); //设置指定元素的属性名和属性值。
	
-----为指定元素同时赋值多个属性

	
-----$('div').attr('title',function(index,value){	 //为元素添加属性的方法	


-----$('div').html($('div').html()+'<em>www.li.com</em>');  //追加内容
-----$('xx').html(function(index,value){})	//为元素添加内容的方法
-----$('div').removeAttr('title');		//清除元素的属性








		第十一课
	=====基础DOM和CSS操作=====

学习要点：
	1.	DOM简介
	2.	设置元素及内容
	3.	元素属性操作
	4。	元素样式操作

-----//用匿名函数计算操作CSS属性值的方法   %%%%
-----$('div').addClass('red');		//给元素添加一个CSS类并配置一个属性
-----$('div').addClass('bg size');	//给元素添加一个CSS类并配置多个属性
-----$('div').removeClass('bg');	//删除一个CSS类属性
-----$('div').removeClass('red size');	//同时删除多个CSS类属性	
-----//$(this).toggle(3000)		//点击后消失
-----//toggle()不加参数一点就没，加参数3000就是三秒种内消失
-----//点击换（多个）CSS属性
-----利用true和false原理的算法设置点击不同次数来切换CSS属性
-----//切换元素不同的CSS样式类
-----//用三目方法切换元素的类属性(有缺点)
-----//切换元素类属性的方法（优化）	 %%%%%
-----//切换元素的class类属性(带bool算法)










		第12课
		


-----alert($('div').width());			//获取元素宽度
-----alert($('div').innerWidth());		//获取元素宽度，包含内边距padding
-----alert($('div').outerWidth());		//获取元素宽度，包含border和padding
-----alert($('div').outerWidth(true));		//获取元素宽度, 同上且包含外边距
-----$('div').width('500pt');			//设置其它长度单位时需要指定
-----$('div').width(function(index,width){	//设置元素宽度（带回调函数）

-----alert($('div').offset().top);		//获取元素相对于视口的偏移位置
-----alert($('strong').position().top);		//获取元素相对于父元素的偏移位置
-----alert($(window).scrollTop());		//获取垂直滚动条的值
-----$(window).scrollTop();			//设置垂直滚动条的值
-----alert($(window).scrollLeft());		//获取水平滚动条的值
-----$(window).scrollLeft();			//设置水平滚动条的值







		第13课 DOM节点操作
学习要点：
	1。创建节点
	2，插入节点
	3，包裹节点
	4，节点操作

-----var aa = $('<i>这是一个在JS中创建的节点</i>');	//创建节点
-----$('body').append(aa);					//插入节点
-----$('div').append($('<u>DOM</u>'));		//向指定元素内部后面插入节点内容
-----$('div').append(function(index,html){	//用匿名函数向指定元素内部后面插入节点内容
		return '<u>uuuuuu</u>'+index+html;  //这里的html代表div的内容
	});
-----$('u').appendTo('div');			//将指定节点移入到另一节点内部的后面
-----$('div').prepend(aa);				//向指定元素内容前面插入节点内容
-----$('div').prepend(function(index,html){  //用匿名函数向指定元素内部前面插入节点内容
		return 'aaaaa'+index+html;
	});
-----$('u').prependTo('div');			//将指定节点移入到另一节点内部的前面
-----$('div').after('<i>iiii</i>');			//向指定节点后面插入一个兄弟节点
-----$('div').after(function(index,html){		//用匿名函数向指定节点后加一个兄弟节点
		return '<u>uuuuu</u>'+index+html;
	});
-----$('div').before('<i>iiii</i>');		//向指定节点前面插入一个兄弟节点
-----$('div').before(function(index,html){	//用匿名函数向指定节点前面加一个兄弟节点
		return '<u>uuuu</u>'+index+html;
	});
-----$('u').insertAfter('div');		//把指定节点移动到另一兄弟节点后面
-----$('div').insertBefore('u');		//把指定节点移动到另一兄弟节点前面








	第14课

-----$('div').wrap('<strong></strong>');	//给指定的节点包裹添加一层html父节点
-----$('div').wrap('<strong/>');
-----$('div').wrap('<strong>1111</strong>');
-----$('div').wrap('<strong><em></em></strong>');	//给指定节点同时包裹添加多层html父节点
-----$('div').wrap(document.createElement('strong')); //通过创建DOM节点对象给指定节点包裹添加html父节点

-----$('div').unwrap();		//移除一层包裹的html父节点（只对用wrap添加的有效）
-----$('div').unwrap();			//移除多层时需多次操作

-----$('div').wrapAll('<u/>');	//把所有指定类型的节点包裹在一个html节点中
-----$('div').wrapAll(document.createElement('u')); //创建DOM对象 (同上)

-----$('div').wrapInner('<u/>');	//向指定节点的内容和子节点包裹添加一层html元素
-----$('div').wrapInner(document.createElement('u'));	//通过DOM对象给指定节点内容包裹添加HTML元素

-----$('div').wrap(function(index){		//为指定节点包裹添加HTML父节点元素的方法
	//	return "<u>"+index+"</u>";
	});
-----$('div').wrapInner(function(index){	//为指定节点的内容元素包裹HTML元素的方法
	//	return '<u>'+index+'</u>';
	});
	
-----$('p').clone(true).prependTo('body');	//复制节点，参数true可选,表示连同事件一并复制
	
-----$('p').remove();				//删除一个节点元素
-----$('p').remove('.one');			//删除满足指定参数条件的节点，（可指定带某个类名的节点）
-----$('p').eq(1).remove();
-----alert($('strong').remove().get(0));  	//获取被删除的元素名
-----$('p').remove().appendTo('body');		//删除后再添加的节点元素不保留事件行为
-----$('p').detach().prependTo('body');		//删除后再添加的节点元素会保留事件行为

-----$('p').empty();				//清空指定节点内容，并保留节点
-----$('p').replaceWith('<span>DOM</span>');	//替换节点
-----$('<span>DOM</span>').replaceAll('p');	//替换节点











		第15课 表单选择器

-----获取表单value值的方法
	//alert($('input').size());
	//alert($('input').eq(0).val());
	//alert($('input').eq(1).val());
	//alert($('input[type=text]').val());
	//alert($('input[name=psw]').val());
	//alert($('input[name=user][type=text]').val());

----- :input 选取所有表单元素(包括select,textarea,botton)
	//alert($(':input').size());
----- :text 选取所有的单行本框
----- :password 选取所有的密码框
----- :checkbox 选取所有的复选择框
----- :submit 选取所有的提交按钮
----- :reset 选取所有的重置按钮
----- :image 选取所有的图像按钮
----- :button 选取所有的普通按钮
----- :file 选取所有的文件按钮
----- :hidden 选取所有的不可见字段
	<br><option>也算做隐藏元素
	//alert($('form :hidden').size());
	//alert($('form :hidden').val());
	//alert($('form :hidden[name=one]').val());
----- :radio 选取所有的单选框
	//alert($(':radio[name=sex]').eq(0).val());
	//alert($(':radio[name=sex]').last().val());
----- :enabled 选取所有可用的元素
	//alert($('form :enabled').size());
----- :disabled 选取所有不可用的元素
	//alert($('form :disabled').size());
----- :checked 选取所有被选中的元素（单选，复选）
	//alert($('form :checked').size());
----- :selected 选取所有被选择中的元素(下拉菜单)
	alert($('form :selected').size());
----- option:selected 选择下拉菜单option的值和文本内容











		第16课 基础事件
-----绑定事件的类型：
-----jq 用匿名函数通过 .bind(type,[],fn) 绑定事件
	$('input').bind('click',function(){
	//	alert('aaaaa');
	});
-----jq 用普通函数通过 .bind()绑定事件
	$('input').bind('click',fn1);
	function fn1(){
		alert('fn1');
	}
	function fn2(){
		alert('fn2');
	}
-----jq绑定多个事件
	$('input').bind('click mouseover',fn);
-----jq绑定多个不同效果事件
	$('input').bind('mouseover mouseout',function(){
		$('div').html(function(index,value){
			return value+1;
		});
	});
-----通过对象键值对绑定多个事件
	$('input').bind({
		mouseover:function(){
			alert('移入');
		},
		mouseout:function(){
			alert('移出');
		}
	});
=====删除绑定事件的三种形式
	----删除元素绑定的所有事件
		$('input').unbind();	
	----删除元素指定的事件		
		$('input').unbind('mouseover');	
	-----删除以函数形式绑定的事件
		$('input').unbind('click',fn2);	

=====jq封装的事件
	-----$('input').click(function(){	//click 单击事件
	-----$('input').dblclick(function(){	//dblclick 双击事件
	-----$('input').mousedown(function(){	//mousedown 鼠标左键按下事件
	-----$('input').mouseup(function(){	//mouseup 鼠标左键弹起事件
	-----$(window).unload(function(){	//unload 页面卸载事件（刷新或关闭，需浏览器支持）
	-----$(window).resize(function(){	//resize 窗口大小改变事件
	-----$(window).scroll(function(){	//scroll 流动条位置改变事件
	-----$(":text").select(function(){	//select 选定文本内容事件
	-----$(':text').change(function(){	//change 文本内容被改变事件
	-----$('form').submit(function(){	//submit 表单提交事件			
	//注意:submit事件是针对于form元素的 (一：submit要在form中，二：要用form对象来操作)







	=====第17课 基础事件下



-----鼠标移入和移出事件
	$('div').mouseover(function(){
	//	$(this).css('background','red');
	//	$('strong').html(function(index,value){
	//		return value+1;
	//	});
	}).mouseout(function(){
	//	$(this).css('background','green');
	});	//over()和out的子节点会再次触发父节点事件，它们不统一。

-----鼠标穿过和穿出事件
	$('div').mouseenter(function(){
	//	$(this).css('background','red');
		$('strong').html(function(index,value){
	//		return value+1;
		});
	}).mouseleave(function(){
	//	$(this).css('background','green');
	});	//enter()和leave() 的子节点不会再次触发父节点事件，它们统一
	
-----键盘事件keydown(),keyup(),keypress()
	$(window).keydown(function(e){
	//	alert(e.keyCode);
	});
	$(window).keyup(function(e){
	//	alert(e.keyCode);
	});
	$(window).keypress(function(e){
	//	alert(e.charCode);
	});

-----focus光标激活事件(当前元素激活)
	$('input').focus(function(){	alert('光标激活');	});

-----blur光标丢失事件(当前元素激活)
	$(':password').blur(function(){	alert('光标丢失');	});

-----focusin 光标激活事件(可子节点激活)
	$('div').focusin(function(){	alert('光标激活');	});

-----focusout 光标激活事件(可子节点激活)
	$('div').focusout(function(){	alert('光标激活');	});

-----hover() 光标悬停事件
	//注：hover()是结合了mouseenter(),和mouseleave()两个方法。

-----点击循环变换(切换)背景色(颜色)
	var aa=0;
	$('#one').click(function(){
		if(aa==0){
			$(this).css('background','blue');
			aa=1;
		}else if(aa==1){
			$(this).css('background','green');
			aa=0;
		}
	});

-----$('div').click(function(){  //点击元素消失再恢复
	$(this).toggle('slow');
	$(this).toggle(4000);
	});

-----toggle(fn1,fn2,,,,)  切换元素属性 
	//注：1.8以后以删除 需要引入migrate文件才可使用



事件补充：
$(function(){
/*
//blur 失去焦点事件
	$(":text").blur(function(){
		alert("失去焦点");
	});

//内容改变事件
	$(":text").change(function(){
		alert("内容以改变");
 	});

//左键双击事件
	$("div").dblclick(function(){
		alert("双击事件");
	});

//获取焦点事件
	$(":text").focus(function(){
		alert("获得焦点事件");
 	});

//浏览窗口大小变化事件
	$(window).resize(function(){
		alert("浏览器大小变化事件");
	});

	$(document).scroll(function(){
		alert("滚动条事件");	
	});
*/
//文本框内容被选择事件
	$(":text").select(function(){
		alert("内容被选择事件");
	});

	$("form").submit(function(){
		alert("表单提交事件");
	});

	$(window).unload(function(){
		alert("离开本页面事件");
	});
/*unload:会因浏览器的支持与否而影响效果
具体来说，当发生以下情况时，会发出 unload 事件：
点击某个离开页面的链接 
在地址栏中键入了新的 URL 
使用前进或后退按钮 
关闭浏览器 
重新加载页面*/


//focusin 可以从不是文本框的父元素层使用
//focus 则必须要使用在文本框类的元素层上
	$("p").focusin(function() {
 	//	 $(this).find("span").css('display','node').fadeOut(1000);
	});

  	$(":text").focus(function(){
		$(this).next().hide(2000);
	});


	$(":text").focusout(function(){
		alert("失去焦点事件");
	});

/*
	$(window).keydown(function(e){
		alert("带功能键键盘按下事件"+e.keyCode);
	});

	$(window).keyup(function(e){
		alert("带功能键键盘抬起事件"+e.keyCode)
	});

	$(window).keypress(function(e){
		alert("无功能键键盘按下事件"+e.keyCode);
	});


	//mousedown 目标可选document 及各元素 
	//还可通过e.which获取具体是哪个键触发的事件
	$("div").mousedown(function(e){
		alert("鼠标左键按下事件"+e.which);
	});

	$(document).mouseup(function(e){
		alert('鼠标抬起事件'+e.which);
	})



	//存在子元素时，不受影响
	$("div").mouseenter(function(){
		alert("鼠标进入区域事件");
	});


	//当存在子元素时，不会受影响
	$("div").mouseleave(function(){
		alert("鼠标离开区域事件");
	});


	//鼠标移动事件,但测试在某区域上，不动也触发
	$("div").mousemove(function(){
		alert("鼠标移动事件");
	});

	
	//当有子元素时，会受到影响
	$("div").mouseout(function(){
		alert("鼠标移出事件");
	});


	//存在子元素时，受影响
	$("div").mouseover(function(){
		alert("鼠标移入事件");
	});
*/
});








	=====第18课 事件对象（上）



----- e 系统自动传给函数的事件 也可是其它变量
	其结果是一个对象，即是对象就会有属性和方法
	$('input').click(function(es){
		alert(es+'es');	
	});

-----type 获取这个事件的事件类型，例如click
	$('input').bind('click',function(e){
		alert(e.type);	//获取事件类型
		alert(typeof e.type); //结果string类型
	});

-----target 获取触发事件的DOM元素
	target是获取触发元素的DOM,就是点哪个元素就是哪个元素
	$('input').bind('click',function(e){
		alert(e.target);	
	});

-----currentTarget 获取指定触发的DOM元素，等同与this
	currentTarget得到的是监听元素的DOM,就是绑定的哪个元素就是哪个元素
	$('div').bind('click',function(e){
		alert(e.currentTarget);
	});
-----target与currentTarget的区别
	$('div').bind('click',function(e){
		alert(this==e.currentTarget);	//currentTarget 相当于this
	});
	$('div').bind('click',function(e){
		alert(this==e.target);		//target则不然
	});


-----relatedTarget 获取目标（鼠标）离开之后或进入之前的那个DOM元素
	也就是移入移出最相邻的那个DOM
	$('span').bind('mouseover',function(e){
		alert(e.relatedTarget);	//移入前的DOM元素
	});
	$('span').bind('mouseout',function(e){
		alert(e.relatedTarget);	//移出后的DOM元素
	});

-----data 获取事件调用时的额外数据 可以是数字，字符串，数组，对象
	$('input').bind('click',123,function(e){
		alert(e.data);		//获取到的数字
	});
	$('input').bind('click','abc',function(e){
		alert(e.data);		//获取到的字符
	});
	$('input').bind('click',[1,2,'a','b'],function(e){
		alert(e.data);		//获取到的数组
		alert(e.data[3]);	//获取数组中指定下标的元素
	});
	$('input').bind('click',{'user':'lee','age':100},function(e){ //user:lee是输入的键值对
		alert(e.data['user']);	//获取键值对user对应的值lee
	});


-----pageX/pageY 获取相对于页面原点的水平/垂直坐标
-----screenX/screenY	获取显示器屏幕位置的水平/垂直坐标（非jquery封装）
-----clientX/clientY  获取相对于页面视口的水平/垂直坐标（非jquery封装）
	--page=文档的左上点 (固定不变)
	--screen=屏幕左上点
	--client=视口左上点
	当三种坐标在出现滚动条的情况下，结果就会不同，pageX/Y的坐标就会以原点累加，比其它值都大
	
	$(document).bind('click',function(e){
		alert(e.pageX+','+e.screenX+','+e.clientX);	//三种X坐标
		alert(e.pageY+','+e.screenY+','+e.clientY);	//三种Y坐标	
	});
	
-----result  获取上一个相同事件的返回值
	$('input').bind('click',function(){
		return 123;
	});
	$('input').bind('click',function(e){
		alert(e.result);
	});

-----timeStamp  获取事件触发的时间戳
	$(document).bind('click',function(e){
		alert(e.timeStamp);
	});

-----which  获取鼠标的左中右键（1，2，3），或获取键盘按键
	$(document).bind('mousedown',function(e){
		alert(e.which);	  //获取哪个鼠标键触发的事件
	});	
	$(document).bind('keydown',function(e){
		alert(e.which);	  //获取哪个键盘键触发的事件
	});

-----altKey/shiftKey/ctrlKey/metaKey  获取事件发生时是否按下了alt,shift,ctrl或meta键。
	$('div').bind('click',function(e){
		alert(e.ctrlKey);	
	});
	$('div').bind('click',function(e){
		alert(e.altKey);	//alt好像不好用，，
	});	
	$('div').bind('click',function(e){
		alert(e.shiftKey);
	});










	=====第19课 事件对象下



-----冒泡和禁止冒泡行为
	冒泡行为；如果页面中重叠了多个元素，并且重叠的这些元素都绑定了同一个事件，那么就会出现冒泡问题。
-----e.stopPropagation() 禁止冒泡行为
	$('input').bind('click',function(e){
		e.stopPropagation();	//禁止冒泡
		alert('input');
	});
	$('div').bind('click',function(){
		alert('div');
	});
	$(document).bind('click',function(){
		alert('document');
	});


-----e.preventDefault() 阻止默认行为
	默认行为：就是当右键点击时出现的默认菜单，点击超连接时跳转页面，点击提交按键提交信息，这都是默认行为。
-----禁止超连接跳转
	$('a').bind('click',function(e){
		e.preventDefault();
		alert('baidu');
	});

-----禁止表单提交
	//方法一
	$(':submit').bind('click',function(e){
		e.preventDefault();
		alert('submit');
	});
	//方法二
	$('form').submit(function(e){
	//	e.preventDefault();
	});
	
-----同时阻止冒泡和默认行为
	//一普通方法
	$('a').bind('click',function(e){
		e.preventDefault();
		e.stopPropagation();
		alert('baidu');
	});
	//二简捷方法
	$('a').bind('click',function(){
		alert('baidu');
		return false;
	});


-----e.isPropagationStopped()判断是否调用了stopPropagation()方法
-----e.isDefaultPrevented()判断是否调用了preventDefault()方法
	$('a').bind('click',function(e){
		alert('baidu');
		e.stopPropagation();
		e.preventDefault();
		alert(e.isDefaultPrevented());
		alert(e.isPropagationStopped());
	});

	
-----e.stopImmediatePropagation() 取消冒泡行为，并取消该事件的后续事件处理函数
-----e.isImmediatePropagationStopped() 判断是否调用了stopImmediatePropagation()方法
	$('a').bind('click',function(e){
		e.stopPropagation();
		e.preventDefault();
	
		e.stopImmediatePropagation(); //此方法会阻止同类事件的后续事件
		alert(e.isImmediatePropagationStopped());
		alert('a');
	});
	$('a').bind('click',function(){
		alert('aa');	//上一次同类事件使用e.stopImmediatePropagation()时，本次事件将停止
	});
	$('div').bind('click',function(e){
		alert('div');
	});
	$(document).bind('click',function(e){
		alert('document');
	});









	=====第20课	高级事件上



学习要点；
	1.模拟操作
	2.命名空间
	3.事件委托
	4.on,off和one

一：模拟操作
	在事件触发的时候，有时我们需要一些模拟用户行为的操作，例如，当网页加载完毕后自行点击一个按钮触发一个事件，而不是用户去点击。



-----模拟人为操作行为（点击行为）
	$('input').trigger('click');
-----模拟人为操作行为的简便方法
	$('input').bind('click',function(){
		alert('模拟人为操作事件');
	}).trigger('click');
-----模拟行为可以传额外数据（数值，字串，数组，对象）
	$('input').click(function(e,data1,data2,data3,data4){
		alert(data1+'|'+data2+'|'+data3+'|'+data4['user']);
	}).trigger('click',['123','abc',[1,2,'a'],{'user':'lee'}]);
	//trigger额外数据，只有一条时可以省略中括号，多条时不能省略

	//bind的额外数据用e.的形式，模拟行为的数据直接用data1,2....
	$('input').bind('click',{name:'zhang'},function(e,data1,data2,data3,data4){
	//	alert(data1+'|'+data2+'|'+data3+'|'+data4.user+'|'+e.data.name);
	}).trigger('click',['123','abc',[1,2,'a'],{'user':'wang'}]);

-----自定义事件
//自定义事件本身没有绑定硬件，不会产生事件，它是给trigger准备的，相当于调用一个函数。
	$('input').bind('myEvent',function(){
		alert('自定义事件');
	}).trigger('myEvent');
-----trigger模拟系统事件的简写方式 
	$('input').click(function(){
		alert('trigger模拟事件的简写');
	}).click();
-----trigger可简写的系统事件
	blur 		focusin		mousedown	resize
	change		focusout	mouseenter	scroll
	click		keydown		mouseleave	select
	dblclick	keypress	mousemove	submit
	error		keyup		mouseout	unload
	focus		load		mouseover
-----triggerHandler()模拟用户行为的另一个方法(它与trigger有四个区别)
	$('input').click(function(){
		alert('模拟用户行为的另一个方法');
	}).triggerHandler('click');


-----trigger与triggerHandler的区别
	一：默认行为的禁止
	//trigger会提交后自动跳转，没有阻止默认行为
	$('form').trigger('submit');

	triggerHandler提交后不会跳转，默认行为会被阻止
	$('form').triggerHandler('submit');

	//如果我们要使用trigger()来模拟用户提交，并阻止事件的默认行为，就要这么写
	$('form').submit(function(e){
		e.preventDefault();
	}).trigger('submit');

	二：triggerHandler()只会影响第一个匹配的元素，而trigger()会影响所有

	三：triggerHandler()方法会返回当前事件执行的返回值，如果没有则返回undefined;而tirgger()则返回当前包含事件触发元素的jQuery对象（方便连缀调用）
	$('input').click(function(){
		alert('aaaaaa');
	}).trigger('click').css('color','yellow');	//返回jQuery对象可以连缀

	$('input').click(function(){
		alert('triggerHandler()');
		return 123;
	}).triggerHandler('click');	//返回return值或undefined 都不可连缀


	四：trigger()在创建事件的时候，会冒泡，但这种冒泡是自定义事件才能体现出来，是jQuery扩展于DOM的机制，并非DOM特性，而triggerHandler()不会冒泡 */
	$('div').bind('myEvent',function(){
		alert('自定义事件');
	});
	$('.d3').trigger('myEvent');	//trigger在多层相同元素，指定上层时会冒泡
	$('.d3').triggerHandler('myEvent');	//triggerHandler()不会冒泡

-----命名空间： 
	/* 有时我们想对事件进行移除，但对于同名元素绑定的事件移出往往比较麻烦，这个时候，可以使用事件的命名空间解决 */

	$('input').bind('click.aaa',function(){	//'click.aaa' 中的.aaa就是区别每个事件的命名
		alert('aaa');	
	});
	$('input').bind('click.bbb',function(){
		alert('bbb');
	});
	$('input').bind('mouseover.aaa',function(){
		alert('mouseover');
	});

-----移除一个指定类型且指定命名的事件
	//$('input').unbind('click.aaa');	

-----移除所有指定命名的事件
	$('input').unbind('.aaa');	










	=====第21课 高级事件（中）



事件委托：
	什么是事件委托？用现实中的理解就是：有100个学生同时在某天中午接到快递，但这100个学生不可能同时站在学校门口等，那么都会委托门卫去收取，然后再逐个交给学生。而在jQuery中，我们通过事件冒泡的特性，让子元素绑定的事件冒泡到父元素（或祖先元素）上，然后再进行相关处理即可。


-----live绑定的是document,而非button(1.4.3后移除了)
	所以不管有多少个button,永远只会绑定一次事件
	$(':button').live('click',function(){
		alert('委托事件');
	});

-----bind无法给动态生成的元素绑定事件
	$(':submit').bind('click',function(){
		$(this).clone().appendTo('#box');
	});
*/

-----live可以绑定动态生成的事件
	/* live绑定在document上，而点击button其实是冒泡到document上，并且点击document的时候，需要验证 event.type 和 event.target才能触发 */
	$(':submit').live('click',function(){
		$(this).clone().appendTo('#box');
	});
-----live 不支持连缀调用
	//这样是不可以的
	$(':submit').eq(0).live('click',function(){
		$(this).clone().appendTo('#box');
	});


-----die() 移除事件（1.4.3以后删除了，等同于unbind()）
	$('input').live('click',function(){
		$(this).clone().appendTo('#box');
	});
	$('input').die('click');

-----克隆事件与委托事件的区别
	//clone(true)会产生很多冗余这是一个复制事件，不是委托事件
	$(':submit').bind('click',function(){
		$(this).clone(true).appendTo('#box');
	});

	$(':button').live('click',function(){
		$('<input type="button" value="按钮" />').appendTo('#box');
	});


-----delegate()替代 live的方法  (它绑定的不是document,而是父元素)
	//此方法需传三个参数：1，目标元素(标签名或类名，Id名) 2,事件名称 3,function
	
	$('#box').delegate(':submit','click',function(){
		$(this).clone().appendTo('#box');
	});
	//live 语义不清晰，由于他没有指定绑定了谁，所以不清晰
	//delegate 主义清晰，绑定谁，谁就冒泡的底层元素


//-----undelegate() 移除delegate的方法
	$('#box').undelegate('click');


//-----live()和delegate()和bind()的区别
	/* 这三种方法一样都是事件绑定，那么区别也很明显，用途上遵循两个原则：1，在DOM中很多元素绑定相同事件时；2，在DOM中尚不存在即将生成的元素绑定事件时；我们推荐使用事件委托的绑定方式，否则推荐使用bind()的普通绑定。

});












	=====第22课 高级事件 - on, off 和one

	jQuery 不但封装了大量常用的事件处理，还提供了不少高级事件方便开发者使用，比如模拟用户触发事件，事件委托事件，和统一整合的on和off,以及仅执行一次的one方法，这些方法大大降低了开发者难度，提升了开始者的开发体验。

	on,off,one
	目前绑定事件和解绑的方法共有三组六个，由于这三组的共存有可能会造成一定的混乱，为此jQuery1.7以后推出了on(),off()方法彻底摒弃了前面三组。


-----事件绑定及解绑的六种普通方法

	1	普通绑定 bind()
	2	普通解绑 unbind()
	3	事件委托 live()
	4	事件委托 delegate()
	5 	解绑委托 die()
	5 	解绑委托 undelegate()

-----新绑定及解绑方法 on(),  off()

-----on()方法也可以添加额外数据 

-----on()方法同时绑定多个事件(两种方式)

-----on()方法中同时阻止默认和冒泡行为的两种方式
	//方式一，当函数中有其它内容时用此方法
	//方式二，当函数中无其它内容内返回false时用此方法

-----on()方法中阻止默认行为

-----on()方法中阻止冒泡行为

-----off()移除绑定事件

-----最新版移除绑定事件的函数

-----off()新版本移除命名空间

-----on()的事件委托方法

-----off() 移除事件委托

-----one()仅一次触发事件

-----one()仅一次触发委托事件








	第23课	动画效果

学习要点：
	1 显示，隐藏
	2 浮动，卷动
	3 淡入，淡出
	4 自定义动画
	5 列队动画方法
	6 动画相关方法
	7 动画全局属性
jQuery中显示方法为： show(), 隐藏方法为: hide(),在无参数的时候只是硬性的显示和隐藏内容。
	1, show(),hide() 可以传两个参数，一个是速度，另一个是回调函数
	
//-----show()显示方法和 hide() 隐藏方法
	
//-----show(),hide() 加速度参数

//-----当show(),hide()使用在内联元素上时，会先将该元素转成区块元素

//-----show(),hide()的三种速度预设值 slow,normal,fast
	//slow-600,norma-400,fast-200

//-----当show(),hide()方法速度参数错误或为空时的默认速度为400毫秒

//-----使用show(),hide()的回调函数，可以实现列队效果
	//显示或隐藏后弹出提示框

//-----同步动画，多个区块同时显示或隐藏

//-----列队动画的两种方法
	//一：普通方法	
	//二：递归自调用
	
//-----toggle() 切换显示与隐藏

//-----向下渐显slideDown，向上渐消失slideUp，渐变的切换 slideToggle

//-----淡入fadeIn,淡出fadeOut,淡入出的切换fadeToggle 

//-----fadeTo使透明度到百分比

//-----无限循环切换元素的显示和隐藏

















	第24课 动画效果

//-----animate() 自定义动画-多重动画同步运动效果
	//必传的参数有一个，就是对象的CSS模式键值对，还有两个可选参数速度和回调函数。
	
//-----自定义动画函数的两个可选参数，速度和回调函数

//-----设置元素的position产生移动动画效果

//-----动画效果的累加累减速功能

//-----实现列队动画（两种方式）
	//列队动画-回调函数方式
	//连缀方式 
	//顺序方式
	
//-----顺序方式操作多个元素时不能列队动画，回调函数方式则可以
	//顺序方式显示的是同步效果
	//回调函数方式显示的是队列效果
	
//-----css不是动画方法，会默认排列到和第一个动画方法同步

//-----用函数参数的方式可以解决CSS与动画效果的列队问题，
	
//-----解决queue()后无法执行列队动画的两个方法
	//注意： 使用queue方法时，其后面的方法就不会调用了，如果想调用则要在queue方法内传入一个next参数，(老版可能不支持)，或可用dequeue 解决。如下：
	//next参数解决方法
	//dequeue()解决方法
	
//-----queue()也可以使用在顺序方式列队动画中

//-----queue() 也可以得到列队动画的长度个数 (queue()需要传一个参数 -'fx')

//-----clearQueue() 清除队列动画指定项后面的属性


















	第25课 动画效果（下）

动画相关方法：
	很多时候需要停止正在运行中的动画，jQuery为此提供了一个stop()方法，它有两个可选参数：stop(clearQueue , gotoEnd) , clearQueue传递一个布尔值，代表是否清空未执行完的动画列队，gotoEnd代表是否直接将正执行的动画跳转到末尾状态。


//-----stop() 暂停正在运行中的单独的动画效果

//-----无参数的stop()不会停止所有的列队动画
	//无参的stop()不会停止所有的列队动画，只会停止正在运行中的当前的那一项动画效果，而其它的动画效果依然会继续执行。

//-----带一个参数true的stop()可以暂停全部列队动画
	
//-----带两个参数true的stop()会让列队动画停止，并直接把元素定位在最的一个动画的位置上
	//注：测试当在第一个动画运行没完成前触发此方法，会直接停止在当前的位置上。
	
//-----delay() 列队动画时间延迟

//-----无限slide 动画上下消失显示运动
	
//-----:animated查找当前运动的动画，并更换其背景色
	
//-----$.fx.interval 浏览器运行的帧数，默认为13毫秒每帧

//-----$.fx.off 关闭动画效果 
	
//----- animate动画运动参数 swing(缓动),linear(匀速)
	










		第26课  Ajax

	ajax全称为：“Asynchronous JavaScript and XML” (异步JavaScript 和XML),它并不是JavaScript的一种单一技术，而是利用了一系列交互式网页应用相关的技术所形成的结合体，使用ajax，我们可以无刷新状态更新页面，并且实现异步提交，提升了用户体验。
	
学习要点：
	1：ajax概述
	2：load方法
	3：get(),post()
	4：$.getScript()和$.getJSON()
	5：$.ajax()方法
	6：表单序列化
	
//-----ajax概述（文字叙述）
//-----load()方法及其三个参数（文字叙述）
//-----http回应状态码说明（文字叙述）
//-----第三个参数 xhr 是对象 它有四个属性

	=====load() 异步加载HTML文件内容

//-----把另一个页面内容加载到本页指定元素内

//-----ajax加载指定页面并筛选内容

//-----加载时用GET方式传送数据以便验证	

//-----第二个参数data 是以POST提交数据的，它以对象键值对的形式来操作

//-----第三个参数 回调函数的使用

//-----函数参数response 表示从服务器端返回的内容

//-----编辑返回的内容

//-----函数参数status 表示返回的状态，success 代表成功，error代表失败

//-----函数参数xhr 表示xml,http,requert的对象 它有四个属性

//-----xhr属性responseText	作为响应主体被返回的文本内容 等同于上面的response方法。

//-----xhr属性responseXML  返回包含响应数据的XML DOM文档	

//-----xhr属性status  响应的HTTP状态

//-----xhr属性statusText  HTTP状态的说明













	//第27课 ajax 中

//-----$.get()和$.post() (文本)
  	.load()方法是局部方法，因为他需要一个包含元素的jquery对象作为前缀，而$.get()和$.post()是全局方法，无须指定某个元素，对于用途而言，.load()适合做静态文件的异步获取，而对于需要传递参数到服务器页面的，$.get()和$.post()更加合适。
	$.get()方法有四个参数，前面三个参数和.load()一样，多了一个第四个参数type,即服务器返回的内容格式：包括xml,html,script,json,jsonp和text,第一个参数为必选参数，后面三个为可选参数。
	
 	$.get()和$.post()方法的使用基本上一致，他们之间的区别也比较隐晦，基本都是背后的不同，在用户使用上体现不出，具体区别如下：
	1.GET请求是通过URL提交的，而POST请求则是HTTP消息实体提交的。
	2.GET提交有大小限制(2KB),而POST方式不受限制 。
	3.GET方式会被缓存下来，可能有安全性问题，POST没有这个问题
	4.GET方式通过$_GET[]获取，POST方式通过$_POST[]获取

//-----$.get()的使用方法一：$.get("url?a=b",fn) url带问号和函数两个参数的形式

//-----$.post("url?a=b",fn) url带问号和函数两个参数的形式是不可用的

//-----$.get()的使用方法二：$.get("url","a=b",fn) 三个参数的形式
//通过DATA参数字串键值对的形式传参，其自动转换为问号紧跟传参
//注意在c.php文件中对get和post的设置要正确

//-----$.post()的使用方法一：$.post("url","a=b",fn) 三个参数的形式
//通过DATA参数字串键值对的形式传参，其自动转换为问号紧跟传参
//注意在c.php文件中对get和post的设置要正确

//-----$.get()的使用方法三：$.get("url",{a:"b"},fn) 三个参数的形式
//通过DATA参数对象键值对的形式传参

//-----$.post()的使用方法二：$.get("url",{a:"b"},fn) 三个参数的形式
//通过DATA参数对象键值对的形式传参

//-----$.get()和$.post()的第四个参数type
//返回的内容格式包括：xml,html,script,json,jsonp和text
//type参数对于php文件返回的数据是纯文本，默认是html或text，所以当响应内容为html和text时可以不用在尾部加html参

//-----get(),post()的参数type会自动识别响应返回的内容格式

//-----获取xml中指定元素的内容
//-----xml响应体会返回一个DOM对象
//-----响应体为xml时，设置type为html会把xml中连标签所有内容当作纯文本

//-----json响应体返回一个对象 
//-----获取json响应体的内容

//-----$.getScript()和$.getJSON() （文本）

//-----$.getJSON()的使用方法	

//-----$.getScript()方法的使用















	第28课 ajax (下)
学习要点：
	5：$.ajax()方法
	6：表单序列化

	
//-----$.ajax()方法的使用

//-----表单序列化 （文本）
	
//-----ajax 针对表单提交的普通方式

//-----表单序列化 $("").serialize()

//-----序列化serialize()会得到字符串形式的键值对，并且对URL进行编码

//-----.serialize()方法可以直接获取单选复选和下拉列表等内容
//-----使用序列化得到单选或多选中的元素内容
//-----解码序列化后被编码的内容

//-----.serialize()序列化方法可以把数据生成键值对的json对象
//-----转换JSON数据，并将其数据显示在页面上	
//-----接收任何数据的方法

//-----初始化重复的属性

//-----对像方式的键值对返回的是一个对象

//-----$.param()解析对象的键值对，转为数据

























		第29课 ajax 进阶

学习要点：
	1，加载请求
	2，错误处理
	3，请求全局事件
	4，JSON 和 JSONP


//-----加载请求：（文本）

//-----显示和隐藏请求加载的提示信息ajaxStart() ajaxStop()
//-----设置请求超时 timeout:500
//-----取消全局事件 global:false

//-----请求加载的错误处理：（文本）
//-----第一种错误处理方式 
//-----第二种错误处理方法-连缀方式
//-----第三种错误处理方式.ajaxError()全局事件提示错误
//-----获取事件的类型
//-----事件当前的目标对象
//-----查看事件对象都有哪些属性
//------settings 得到的是对象及查看其所有属性	
//------获取当前发生错误的路径 
//------获取当前传输用的是什么类型（post,get）

//-----获取错误类型 （not found）
//-----	六个全局的请求事件（文本）
//-----请求事件的全局形式
//-----请求事件的连缀方式
//-----请求事件的属方式





















		//第30课 ajax 进阶
学习要点：
	4，JSON 和 JSONP
	5，jqXHR对象


//-----dataType设置会影响xml,json的response结果类型是纯文本还是对象

//-----如何获取php文件中包含转码后的json数据及dataType 设置数据类型

//-----JSON 和 JSONP (文本)

//-----本地获取php文件中JSON数据的两种方式	

//-----跨域获取php文件中JSON数据的两种方式

//-----跨域获取json数据的简便方式 jsonp

//-----jqXHR 和 done() 的用法及优点。
//-----done等同于success 的功能	
//-----done可以连缀
//-----done在编辑response时的扩展性好，不会覆盖以前的内容。

//-----同时处理多个jqXHR对象数据（普，简两种方式）




















		第31课工具函数

	学习要点：
		1，字符操作
		2，数组和对象操作

//-----字符串操作,去除字串左右的空格 $.trim()

//-----数组和对象操作
//-----$.each()遍历数组

//-----$.each()遍历对象
	//遍历window对象
	//遍历ajax()对象
	//遍历ajax()对象的fn

//-----$.grep 数组的筛选

//-----$.map()修改数据 

//-----$.inArray()获取指定元素的下标

//-----$.merge()合并两个数组

//-----$.unique()删除重复的DOM元素
//-----获取所有的指定元素将其放进一个数组
	//获取所有的指定元素将其放进一个数组
	//删除数组中相同的DOM元素

//-----$.toArray()合并多个DOM组成元素




















		第32课 工具函数 (下)

//=====测试操作（文本）

//-----$.isArray() 判断目标是否为一个数组

//-----$.isFunction() 判断是否为一个函数

//-----$.isEmptyObject() 判断对象是否为空

//-----$.isPlainObject() 判断是否为一个纯粹的对象

//-----$.contains() 判断DOM节点是否包含另一个DOM节点

//----$.type() 判断数据的类型

//-----$.isNumeric() 判断是否为数值

//-----$.isWindow() 判断是否为window对象

//-----$.param()将对象的键值对转换为URL中GET形式的字符串键值对

//=====浏览器测试

//-----获取IE浏览器版本号。

//-----获取火狐浏览器版本号

//-----$.support.ajax 判断是否能创建ajax

//-----$.support.opacity 设置不同浏览器的透明度
//-----通过$.support.opacity 来检测浏览器是IE类还是W3C类

//-----$.proxy()解决this指向问题















		第33课 插件
-----插件的使用和案例
-----插件概述：
-----验证插件：
-----插件使用流程：












		第34课 插件
-----自定义插件：
-----插件的种类：
-----全局插件与局部插件
-----this在插件里的区别








		第35课 知问前端-概述及jquery UI
-----jqueryUI 下载地址：
-----项目介绍：
-----jQueryUI 





		第36课 知问前端--创建header区 2
学习要点：
	1，创建界面
	2，引入UI

-----jQueryUI 下载官网 jqueryui.com

-----ico的引用（就是title上的图标）
-----dialog(对话框)






















		第37课 知问前端-对话框UI 上 3
//-----使用UI插件变换按键的样式

//-----同时打开两个对话框

//-----更改dialog的title和标题背景图片

//-----设置dialog标题内容的方法
//-----给dialog中加入按钮的方法
//-----给dialog中加入取消按键

//-----dialog页面位置选项，设置对话框的坐标

//-----设置对话框的高和宽（大小）这里不用带px 默认是像素。
  
//-----框体大小变化最小值

//-----框体大小变化最大值

//-----show,hide默认为淡入淡出形式

//-----下显，上隐形式显示消失。
	
//-----颤动方式显示消失

//-----从中心横轴垂直上下显示消失

//-----从左侧显示消失

//-----左侧显示消失，有透明度变化

//-----以左上角开始显示消失

//-----显示消失，带有透明度和背景色的变化

//-----四周向中心显示消失
	
//-----四周向中心显示消失，与puff正好相反

//-----以闪烁形式显示和消失

//-----设置关闭X图标的title显示信息

//-----设置dialog对话框外是否可以操作。会蒙有一层纱

//-----设置dialog是否可以调整大小 

//-----设置dialog是否可以移动

//-----隐藏dialog对话框

//-----显示隐藏后的dialog对话框



















		第38课 知问前端-对话框UI 下 4

//-----dialog()方法的事件
//-----对话框获得焦点事件
//-----对话框创建事件
//-----对话框显示事件
//-----对话框关闭事件
//-----对话框将要关闭事件
//-----对话框移动事件
//-----对话框移动事件中ui的坐标属性
//-----调整对话框大小事件
//-----显示与关闭对话框
//-----删除对话框
//-----判断对话框是否以显示
//-----widget得到的是对话框整体的对象
//-----获取对话框的title值
//-----设置对话框的title值
//-----获取对话框的autoOpen值
//-----将指定对话框置前
//-----on()方法触发的对话框事件


















		第39课 知问前端--按键UI 5
//-----引入UI按钮样式的方式
//-----修改全局和局部按钮的样式(普通，悬停，点击及局部和全局)
//-----设置按钮的（非）激活状态//-----设置按钮上显示的文字
//-----给按钮上加图标
//-----隐藏按钮上的文字
//-----按钮的创建事件
//-----按钮操作之禁用和启用按钮
//-----删除按钮
//-----更新按钮，刷新按钮
//-----得到button的jquery对象
//-----得到button的options值
//-----设置button的options值
//-----获取对话框中按钮的个数
//-----查看对话框中第一个按钮的相关信息
//-----删除对话框中的按钮(两种方法)
//-----设置对话框中的单选按钮(两种方法)
//-----设置对话框中的多选按钮(两种方法)

















		第40课 知问前端-创建注册表单 6


//-----文本框点击后弹出日历
//-----将title提示信息用框的形式显示

学习要点：
	1，HTML部分
	2，CSS部分
	3，jQuery部分









		第41课 知问前端-工具提示UI 7
学习要点：
	1，调用tooltip()方法
	2，修改tooltip()样式
	3，tooltip()方法的属性
	4，tooltip()方法的事件
	5，tooltip()中使用on()


//-----课件内容（文本）
//-----调用tooltip()方法给title提示信息添加效果
//-----修改对话框中title提示信息的tooltip样式
//-----禁用tooltip样式
//-----tooltip中修改title提示信息内容
//-----tooltip中限制过滤要提示的title信息的范围
//-----为tooltip引入class形式的CSS样式
//-----tooltip()中设置title提示信息的位置
//-----title信息的显示与消失的效果默认为淡入淡出
//-----title信息与鼠标一起移动
//-----tooltip的创建，打开，关闭事件
//-----tooltip("option",param)非初始化的各操作行为
//--自动执行打开tooltiip()效果
//--关闭tooltip效果
//--禁用tooltip效果
//--启用tooltip效果
//--删除tooltip效果
//--获取tooltip对象
//--获取某个options的param选项值（内容）
//--设置某个options的param选项值（内容）
//-----tooltip 结合on的打开 ，关闭事件
















		第42课 知问前端-自动补全UI 8
学习要点：
	1，调用autocomplete()方法
	2，修改autocomplete()样式
	3，autocomplete()方法的属性
	4，autocomplete()方法的事件
	5，autocomplete中使用on()


//-----课件笔记
//-----调用自动补全
//-----修改自动补全鼠标悬停背景样式
//-----修改自动补全字体颜色的样式

//-----自动补全的外观选项
//-----禁用自动补全

//-----设置触发自动补全至少要输入的字数。
//-----设置触发自动补全后显示内容的时间，默认300毫秒
//-----设置自动补全触发后自动选择第一条内容
//-----设置自动补全提示内容的位置
//-----自动补全创建触发事件
//-----自动补全打开触发事件
//-----自动补全关闭触发事件
//-----补全菜单获得焦点触发事件
//-----获取补全菜单的值
//-----设置补全菜单要显示的内容

//-----选定自动补全菜单内容触发事件
//-----光标离开前后，文本框内容发生改变触发事件
//-----自动补全菜单搜索完毕触发事件
//-----自动菜单搜索完事件，并返回菜单内容值
//-----按指定字符自动触发自动补全菜单
//-----关闭自动补全
//-----禁用自动补全
//-----启用自动补全
//-----删除自动实例
//-----获取自动补全jquery对象
//-----获取某个options的param选项的值
//-----设置某个options的param选项的值
//-----自动补全关闭时触发
//-----自动补全查找时触发
//------自动补全获得焦点时触发事件
//-----光标离开后文本框内容改变触发事件
//-----自动补全选择内容后触发事件
//-----自动补全搜索完毕后显示之前触发事件并可返回值。

















		第43课 知问前端-邮箱自动补全 ui 9
学习要点：
	1，数据源function
	2，邮箱自动补全











		第44课 知问前端-日历UI 上 10

学习要点：
	1，日历的调用datepicker()方法
	2，修改datepicker()样式
	3，datepicker()方法的属性
	4，datepicker()方法的事件
	日历（datepicker）UI，可以让用户更加直观的，更加方便的输入日期，并且还考虑不同国家的语言限制，包括汉语等。
//-----1，日历 datepicker()方法的调用
//-----修改日历标题域的背景
//-----修改当天日期的样式
//-----修改选定日期的样式
//-----把日历改成中文版
//-----日期格式代码
//-----指定日历返回的日期格式 dateFormat mm/dd/yy(时间)
//-----指定星期中的天的长格式。dayNames(英文日期/数组)
//-----指定星期中的天的短格式。 dayNamesShort(英文日期/数组)
//-----指定星期中天的最小格式。 dayNamesMin(英文日期/数组)
//-----指定月份的长格式 。 monthNames(英文月分/数组)
//-----指定月份的短格式。 monthNamesShort(英文月份/数组)
//-----让日期显示到指定的input域。altField（无/字符串）
//-----设置显示在其它input域中的日期格式
//-----在日期的<input>域后面附加文本。 appendText(无、字符串)
//-----显示周。 showWeek(false、布尔值)	
//-----显示周的标题。 weekHeader("WK"/字符串)
//-----设置日历面板以星期几开头。firstDay(0/数值)



















		第45课 知问前端-日历UI 中 11

学习要点：
	1，日历的调用datepicker()方法
	2，修改datepicker()样式
	3，datepicker()方法的属性
	4，datepicker()方法的事件
	日历（datepicker）UI，可以让用户更加直观的，更加方便的输入日期，并且还考虑不同国家的语言限制，包括汉语等。
		
//-----禁用日历 disabled 
//-----日历同时显示多个月分的面板 numberOfMonths
//-----显示其它月份内容，但无法选择 showOtherMonths
//-----显示并可选择其它月份内容 selectOtherMonths
//-----显示月份下拉列表  changeMonth
//-----显示年份下拉列表  changeYear
//-----变换日历的显示顺序是从左还是从右开始  isRTL
//-----是否自动调整日历输入的文本框以适应日期格式的大小，
//-----以按钮形式及获取焦点的形式触发日历的显示 showOn
//-----设置触发日历按钮上的文本	buttonText
//-----设置触发日历按钮上的图片（能看到按钮） buttonImage
//-----设置用图片代替按钮（看不到按钮） buttonImageOnly
//-----日历面板上显示“今天和关闭”按钮  showButtonPanel
//-----设置“今天”按钮上的的文本
//-----设置鼠标悬停在上月下月的时的提示信息
//-----让上月，下月和今天的按钮上显示当前的日期。  navigationAsDateFormat
//-----在日历面板上的年后面加上文本  yearSuffix
//-----将日历中的月份放在年的后面  showMonthAfterYear

















		第46课 知问前端-日历UI 下 12

学习要点：
	1，日历的调用datepicker()方法
	2，修改datepicker()样式
	3，datepicker()方法的属性
	4，datepicker()方法的事件
	日历（datepicker）UI，可以让用户更加直观的，更加方便的输入日期，并且还考虑不同国家的语言限制，包括汉语等。

//-----选择日期范围的代码
//-----设置日期显示的范围（天，周，月）
//-----隐藏不存在的上月或下月	hideIfNoPrevNext
//-----设置日历显示年份的范围
//-----预设默认选定日期，没有指定，则是当天。
//-----设置“今天”按钮指向的是实际的今天还是选定的当天 gotoCurrent
//-----设置日历弹出时的效果 showAnim
//-----设置日历弹出及隐藏时延迟时间  duration
//-----设置日历弹出隐藏的各种效果
//-----日历显示时触发事件	beforeShow
//-----日期的筛选或限制	beforeShowDay
//-----限制日历每月的1号为不可选状态 (beforeShowDay)
//-----限制日历每个周一为不可选状态  (beforeShowDay)
//-----同时限制日历的多种情况的日期为不可状态。(beforeShowDay)

//-----设置日历中每月1号的字体都是大号字体
//-----日历筛选限制beforeShowDay的第二个参数“指定类名”
//-----日历筛选限制beforeShowDay的第三个参数，为筛选的对象设置悬停的提示文本

//-----日历中年份或月份改变时触发 onChangeMonthYear
//-----得到日历当前选择的日期   onSelect
//-----得到日历关闭后所选择日期  onClose
//-----获得日历的日期的用外部方法（当前的年份）
//-----设置日历的日期的外部方法
//-----日历隐藏与显示的外部方法
//-----删除日历的外法方法
//-----获取日历的jQuery对象的外部方法
//-----刷新日历的外部方法
//-----获取是否禁用日历的外部方法
//-----设置属性的值的外部方法
//-----获取属性的值的外部方法


























		第47课 知问前端--验证插件 上 13
学习要点：
	1，使用validate.js插件
	2，默认验证规则
	3，validate()方法和选项



//-----课程笔记（文本）
//-----启用validate表单验证插件
//-----使用控件方式验证“必填”和“不得小于两位”
//-----汉化validate验证插件的错误提示信息
//-----使用插件键值对的方式验证 一项属性”必填“。

//-----使用插件键值对方式同时验证多项属性 "必填"和"不得小于两位"
//-----修改验证的错误提示信息

//-----常见的验证规则
//-----验证字段不能为空
//-----验证输入正确邮箱格式
//-----验证输入正确网址
//-----验证输入正确日期
//-----验证输入正确日期格式
//-----验证输入正确数字
//-----验证正确的信用卡号
//-----验证必须为正整数
//-----验证两次(密码)输入是否一致
//-----验证最小长度
//-----验证最大长度
//-----验证长度的范围
//-----验证值的范围
//-----验证最小值
//-----验证最大值

















		第48课 知问前端--验证插件 中 14


//-----验证长度时提示信息自动匹配设置的长度 {0}{1}
//-----调试模式，会阻止自动提交 debug
//-----全局默认行为设置并为全局设置debug模式。
//-----代替默认提交的方式 submitHandler
//-----忽略某个字段验证 ignore
//-----群组提示group
//-----群组提示第二种方法(推荐使用这种方法)
//-----设置错误提示的class名
//-----设置错误提示的标签名
//-----统一包裹错误提示
//-----设置成功后加载的class
//-----输入验证正确后在文本框内加入图标
//-----设置验证错误时边框变色，正确时恢复
//-----获取验证到的错误个数。并随个数改变而改变提示信息。
//-----获取错误提示句柄，不用提交及时获取值。
//-----课程笔记 


















		第49课 知问前端--验证插件 下 15


//-----验证用户名是否被占用
//-----同时传递多个值到远程端（同时验证用户名和密码）
//-----validate验证相关操作
	//取消提交验证
	//设置鼠标离开不触发验证,点击提交时才验证
	//设置键盘按下弹起不触发验证
	//设置点击 checkbox和radio点击不触发验证
	//不让错误提示元素获得焦点
	//隐藏验证错误提示
	//屏蔽验证时提示title信息


//-----判断表单所验证的元素是否全部有效
//-----单独验证表单项。
//-----删除所有验证规则
//-----删除指定验证规则
//-----自定义验证规则
//-----课程笔记
















		第50课 知问前端-验证注册表单 16
//-----课程笔记

学习要点：
	1，HTML部分
	2，CSS部分
	3，jquery部分

//-----获取验证到错误的个数
//-----随错误个数变换对话框的高度
//-----输入框获得焦点高亮失去焦点恢复（变化样式）
	//--获取焦点时变亮
	//--失去焦点时恢复
//-----验证正确后星号变换成图标或其它文字
//-----为元素添加一个类样式。
//-----到指定字段的value值。
//-----工具-重置表单
//-----工具-清空某一个字段














		//第51课 知问前端--ajax表单插件 17
 

		
学习要点：
	1，核心方法
	2，option参数
	3，工具方法
//-----课程笔记
//-----ajaxForm()提交方法
//-----ajaxSubmit()提交方法
//-----设置提交到指定页面
//-----将ajax提交页面返回的内容显示在指定的元素中
//-----指定ajax传输的方式是get还是post
//-----指定传输数据类型(xml,json,script,默认null)
//-----成功提交后清除表单内容。

//-----成功提交后重置表单内容。
//-----提交时添加额外的自定义数据
//-----提交之前的行为，一般用于验证。
	//--options 获取指定属性的值。如url,type等。
	//--jqForm 获取form表单的代码内容
	//--formData 获取表单中某个字段的相关属属性如，name,value等

//-----提交失败后执行及其三个参数
//-----工具-表单序列化 formSerialize()
//-----工具-获取表单序列化中指定的某一个字段
//-----工具-得到指定字段的value值。
//-----工具-重置表单
//-----工具-清空某一个字段

















		第52课 知问前端-ajax提交表单 18


学习要点：
	1，创建数据库
	2，Loading制作
	3，ajax提交

//-----课程笔记
//-----数据交互中效果的实现
//-----取消ESC键的关闭功能
//-----隐藏数据交互提示框的标头区域
//-----获取验证到错误的个数
//-----随错误个数变换对话框的高度
//-----输入框获得焦点时高亮（变化样式）
//-----removeClass删除一个类
//-----验证正确后星号变换成图标或其它文字
//-----为元素添加一个类样式。
//-----将获取到的验证错误存放到指定的元素中















		第53课 知问前端-cookie插件
课程笔记（图片）
学习要点：
	1，使用cookie插件
	2，注册直接登陆

//-创建一个cookie 
//-设置cookie存储的有效期
//-设置cookie存放的路径
//-限制在指定的域名中才生成cookie
//-限制在https加密连接时才生成cookie
//-获取cookie的值
//-关闭解码/编码
//-获取所有的cookie
//-用对象方式获取某个cookie
//-删除当前目录下指定的cookie
//-删除指定目录下的cookie
//=用cookie控制登陆，注册状态
  //-在提交注册的时候生成cookie
  //-以表单的用户名生成cookie
  //-隐藏用户名和退出项
  //-控制登陆，注册的状态
  //-ajax提交注册成功后再次调取cookie并隐藏注册登陆项
//-退出登陆状态
//-删除cookie  
//-跳转到首页











		第54课 知问前端-ajax登陆
课程笔记（图片）
学习要点：
	1，服务器端代码
	2，jquery端代码













		第55课 知问前端-选项卡UI 上
学习要点：
	1，使用tabs
	2, 修改tabs样式
	3，tabs()方法的属性
	4，tbas()方法的事件
	5，tabs中使用on
课程笔记(图片)

//-选项卡的初始化
//-选项卡折叠形式的（显示，隐藏）效果
//-禁用指定某个或多个选项卡（使其变灰无法使用）
//-设置选项卡变换的触发事件(鼠标悬停)
//也可设置为其它事件触发
//-设置页面初始化时默认显示哪个选项卡。
//-设置页面初始化时选项卡默认是为显示或是折叠
//此功能要配合collapsible:true 使用
//-设置选项卡内容显示显框的高度
	// content:根据内容伸展高度，
	// auto: 设置选项卡最高的那个高度为全部选项卡的高度，	
	// fill: 为选项卡的高度添加额外的高度（以最高的高度为基准）	
//-设置选项卡切换时的形式(淡入淡出或其它形式)
//-选项卡切换的各种形式		
//-选项卡创建事件
	//获取当前选项卡的html代码段
	//tab得到当前的活动选项卡	
	//获取当前选项卡的显示内容
	//panel得到内容选项的对象
//-选项卡切换事件（切换完成之后触发）
	//得到旧的选项卡对象
	//得到新的选项卡对象		
	//得到旧的选项卡内容	
	//得到新的选项卡内容	
//-选项卡切换事件（切换完成之前触发）
	//得到旧的选项卡对象
	//得到新的选项卡对象		
	//得到旧的选项卡内容	
	//得到新的选项卡内容		














		第56课 知问前端-选项卡UI 下
课程笔记(图片)

//-ajax远程加载文档后触发事件
//-ajax远程加载文档之前触发事件
//-加载之前获取选项卡中的内容
//-设置ajax加载指定页面的url 
//-禁用或启用指定（全部）选项卡（外部命令）
//-获取选项卡jquery对象(外部方法)
//-更新选项卡(外部方法)
//-删除选项卡(外部方法)
//-得到tabs的option值(外部方法)
//-设置tabs的option值(外部方法)
//-点击按钮触发局部更新
//-on形式的ajax加载后触发事件
//-on形式的ajax加载后触发事件
//-on形式的选项卡切换触发事件
//-on形式的选项卡切换前触发事件

















		第57课 知问前端-折叠菜单UI
学习要点：
	1，使用accordion
	2，修改accordion样式
	3，accordion()方法的属性
	4，accordion()方法的事件
	5，accordion中使用on
课程笔记(图片)

//-accordion折叠菜单的初始化
//-collapsible设置菜单是否可以折叠
//-disabled禁用折叠菜单
//-event触发折叠菜单切换的事件
//-active:1设置页面初始化时第二个折叠菜单自动展开
//-active:true设置页面初始化时所有的折叠菜单是否自动展开
//-heightStyle 设置折叠菜单内容框的高度
	//设置全部折叠菜单的高度与最高的那个高度相同
	//设置折叠菜单内容框的高度根据内容高度而变
	//设置为折叠菜单内容添加额外的高度。
//-header 设置折叠菜单的标题标签
//-icons设置折叠菜单上的小图标（如+ ,- 号）
//-create折叠菜单创建时触发事件
//-得到当前折叠菜单标题对象及代码段
//-得到当前折叠菜单中内容及其对象
//=activate折叠菜单切换完成后触发事件
//-折叠菜单切换后得到新的标题对象及代码段
//-折叠菜单切换后得到新的折叠菜单中内容及其对象
//-折叠菜单切换后得到旧的标题对象及代码段
//-折叠菜单切换后得到旧的折叠菜单中内容及其对象
//=beforeActivate折叠菜单切换前触发事件
//-折叠菜单切换前得到新的标题对象及代码段
//-折叠菜单切换前得到新的折叠菜单中内容及其对象
//-折叠菜单切换前得到旧的标题对象及代码段
//-折叠菜单切换前得到旧的折叠菜单中内容及其对象
//-disable禁用折叠菜单（外部方法）
//-enable启用折叠菜单
//-widget获取折叠菜单jquery对象
//-refresh更新折叠菜单
//-destroy删除折叠菜单
//-得到accordion的option值
//-设置accordion的option值
//-on形式的折叠菜单切换完成后事件
//-on形式的折叠菜单切换前触发事件














		第58课 知问前端-编辑器插件 -.txt
学习要点：
	1，编辑器简介
	2，引入uEditor
课程笔记(图片)
//-调用uEditor插件










		第59课 知问前端-ajax提问系统
学习要点：
	ajax提问；
课程笔记(图片)

//-contents获得框架内容里面的元素和值


















		第60课 知部前端-ajax显示全部（收起） 上
学习要点：
	1，ajax显示 （区域内容的“全部显示”与“收起”）
















		第61课 知部前端-ajax显示全部（收起） 下
学习要点：
	用截取字符串的形式显示及收起内容


















\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\




-----jquery 的使用方法

1：先把jquery类库引入  <script src="类库文件名.js"></script>
2：创建一个调用的js文件	<script src="自建文件.js"></script>
3：在自建js文件中操作jquery  


例：
html页面内容：
	<body>
		<input type="button" value="点击"/>
	</body>

.js页面内容：
$(function(){			//$();   创建一个对象
	$('input').click(function(){	//创建了一个input对象  并指定了对其的点击事件的方法
		alert("dddddddd");	
	});
});






-----代码风格：
	$(function(){});	//执行一个匿名函数
	$('#box');		//选择被执行的Id元素
	$('#box').css('color','red');	//执行功能函数。

	这里的$ 等同于jQuery  如：	
	$('#boc');	等同于 jQuery('#box');


-----jquery的连缀功能
	
	$('#lz').css('color','blue').css('fontSize','5cm').css('textAlign','center');




-----window.onload 和 $(document).ready()的区别
	---onload : 当网页全部加载完毕
	---read   : 当DOM加载完毕 

	onload: 必须等待网页全部加载完毕，然后再执行。只执行一次，如果第二次，那么将覆盖第一次。

	ready: 只需要网页中DOM结构加载完毕，就可以执行引入的代码。可以执行N次，不会覆盖上次。
		ready的简写方法如下;
			$(document).ready(function(){
				alert('1');
			});
		可简写成：
			$(function(){
				alert('1');
			});




	###例1--  window.onload

window.onload=function(){
	alert(1);
}
window.onload=function(){
	alert(2);
}
其结果只会弹出一次 2 ..  1就会被覆盖掉



	###例2-- $(document).ready();

$(document).ready(function(){
	alert(1);
});
$(document).ready(function(){
	alert(2);
});
	其结果就会分别弹出 1 和 2 两次。不会覆盖上一次的操作。






-----对象的转换：   
	jquery对象和html元素对象间的相互转换。

$(function(){
	alert(document.getElementById('one'));		//javascript方法获取DOM对象
	alert($('#one').get(0));			//jquery方法获取DOM对象

	$(document.getElementById('one')).css('color','red').css('fontSize','5cm');
			//用javascript方法操作对象
	$('#one').css('textAlign','center');	
			//用jquery方法操作对象
});	










-----多个JS类库发生冲冲突的解决
	例如当一个文档同时引入了jquery库和base库  而两个库都是用$来操作的。那么先引用的库对$的操作就会失效。
	
     ===当jquery库在前面时的两种解决方法
	解决方法一：
		在对jquery操作时，不要用$ ，用jQuery 如：  把$('#one').css(); 改成jQuery('#one').css();

	解决方法二;
		声明一个变量把jQuery对象赋给这个变量；如：		
		var $$ = jQuery;
		$$('#one').css();

     ===当jquery库在后面时的解决方法
		当jquery库在后面时，可以通过jQuery.noConflict()释放掉对$的所有权，
		然后再创建一个变量$$，再把jQuery的对象赋给$$这个变量，以后jquery用$$来进行操作









-----获取对象的方式
	1.通过id
		$('#one').css('color','blue');
	2.通过标签名
		$('div').css('color','blue');
	3.通过类名
		$('.class').css('color','blue');





-----获取对象的个数; size()方法 和 length 属性  

	1.通过size()方法获取长度个数
	alert($('#id').size());		//通过id获取
	alert($('div').size());		//通过标签名
	alert($('.class').size());	//通过类名

	2.通过length属性获取长度个数
	alert($('div').length);		//通过标签名获取
	alert($('.two').length);	//通过类名获取




-----通过eq() 指定复数对象中的某一个对象
html页面
<div>aaa</div>
<div>aaa</div>
<div>aaa</div>
<div>aaa</div>
<div>aaa</div>
.js页面
$(function(){
	$('div').eq(0).css('color','blue');
	$('div').eq(3).css('fontSize','1cm');
	$('div').eq(4).css('color','red').css('fontSize','2cm').css('textAlign','center');
});




----- $('#id > p').css();  快捷操作子节点
-----判断DOM节点是否存在
html页面
<div id="box">
	<p>aaaaaaa</p>
	<p>aaaaaaa</p>
	<p>aaaaaaa</p>
	<div>
		<p>bbbbbbb</p>
		<p>bbbbbbb</p>
		<p>bbbbbbb</p>
	</div>
</div>

.js页面 
$(function(){
	$('#box > p').css('color','blue');
});

结果；只会对id为bos的对象中的一级子节点起作用。二级子节点不会受到影响








-----判断DOM节点是否存在 

	if($('#pox').get(0)){
		.....
	}
	或
	if($('#pox')[0]){
		....
	}








=====选择器



-----$('#one, .two, strong, .three')群组选择器  
	群组选择器可以将相同的样式全并

	css群组选择器 ---  div, p, .one, span{}

	jquery群组选择器; 如下例：

html页面

<div id='one'>div</div>
<div>div</div>
<div>div</div>
<p class='two'>p</p>
<p class='two'>p</p>
<p>p</p>
<strong>strong</strong>
<strong>strong</strong>
<strong>strong</strong>
<span class='three'>sssssss</span>
<span class='one'>sssssss</span>
<span>sssssss</span>


jquery页面

$(function(){
	$('#one, .two, strong, .three').css('color','blue');
});










-----$('ul li a')后代选择器
	下例中的 ul li a 与 ul a 的效果相同，都可以影响 a 的效果。但如果不想影响全部a 的效果，就要指定区域了。

html页面
<ul>
	<li><a href='#'>aaaa</a></li>
	<li><a href='#'>aaaa</a></li>
</ul>
<a href='#'>bbbbbbb</a>
<a href='#'>bbbbbbb</a>


.js页面
$(function(){
	$('ul li a').css('color','#ccc');
});












-----$('ul li *')全局选择器 或 区域性全局选择器
	
	在全局范围中使用 * 号,会极大的消耗资源，它包括了html,head等。所以不建议在全局中使用 *
	
$(function(){
	//alert($('*')[2].nodeName);		//获取指定对象的节点名
	//alert($('*').size());			//获取所有对象的个数
	//alert($('*').length);			//获取所有对象的个数
});


	全局选择器适用在区域内。

html 页面 
<ul>
	<li><a href='#'>aaaa</a></li>
	<li><a href='#'>aaaa</a></li>
	<li><em>AAAAAAA</em></li>
	<li><u>BBBBBBBB</u></li>
</ul>
<a href='#'>bbbbbbb</a>
<a href='#'>bbbbbbb</a>

.js页面
$(function(){
	$('ul li *').css('color','red');
	alert($('ul li *').length);		//结果显示4个，与实际相同。就没有耗费多余的资源
});










-----$('p.one')限制设置样式的范围
-----$('x','#y')选择#y下为x的后代节点

	$('x','y')限制y对象下面的子节点为x 如果X中又包含其它后代节点。那么被包含的节点都算做X的一体都会受到影响，a标签除外。

例一：
html页面
<div class='one'>aaaaaaaa</div>
<p class='one'>aaaaaaaa</p>
<div>bbbbbbb</div>
<p>bbbbbbbbb</p>

.js页面
$(function(){
	$('.one').eq(0).css('color','red');	//指定影响的对象
	$('p.one').css('color','blue');		
	//限制p中带class为one 的标签对象被设置样式。
	$('p','#one').css('color','blue');	// $('x','#y')限制#y下为x的子节点
});


例二：
html页面
<div class='one two'>aaaaaaaa</div>
<p class='one'>aaaaaaaa</p>
<div class='two'>bbbbbbb</div>
<p>bbbbbbbbb</p>

.js页面
$(function(){
	$('.one.two').css('color','blue');	//指定同时有类one和类two的标签对象
});











-----.find('x') 选择后代选择器中为x的节点 
-----.children() 一级子选择器
	被选定的一级子选择器的后代选择器也会受到影响


$(function(){
	$('#one').find('p').css('color','red');	//.find()  所有的后代选择器

	$('#one').children('p').css('color','blue');	//.children() 一级子选择器
	
});




----- $('xx + xx')	下一个兄弟选择器
-----.next() .next('p')	下一个(为p)兄弟节点

	注意：这两种下一个兄弟节点的获取方法,如果不指定节点名，那么下一个节点可以是任何节点。如果指定了下一个节点名，那么只有在匹配时，样式才会生产。如果不匹配。样式不生效.
$(function(){
	//$('#one + p').css('fontSize','1cm');		//$('xx + xx')下一个兄弟选择器
	//$('#one').next().css('color','blue');		//.next() 下一个兄弟节点 
	//$('#one').next('strong').css('color','red');	//指定下个兄弟节点为strong的，
	$('#one').next('p').css('color','red');
});








-----$('x ~ ') $('x ~ y') 指定x以后的所有( 为y )的兄弟节点
-----.nextAll() .nextAll('x')指定xx以后的所有( 为x )的兄弟节点
-----$('#two > a')	指定#one下所有为a 的一级子节点
	
	选择当前节点以后的所有为指定名的兄弟节点，中间可以间隔，只要为指定名的兄弟选择器都会受影响。

html页面 
<p>pppppp</p>
<div id="one"><p>aaaaa</p></div>
<strong>sssss</strong>
<p>p111111</p>
<p>p111111</p>
<u>uuuuuuu</u>
<p>p111111</p>

.js页面 
$(function(){
	//$('#one ~ p').css('color','blue');   //指定#one以后的所有为p 的兄弟节点
	//('#one ~ ').css('color','blue');	//指定#one以后的所有兄弟节点
	//$('#one').nextAll().css('color','red');	//指定#one以后的所有为p 的兄弟节点
	//$('#one').nextAll('p').css('color','red');	//指定#one以后的所有兄弟节点
	$('#two > a').css('color','yellow');		//指定#one下所有为a 的子节点
});








-----.prev() .prev('p') 指定上一个（为p）兄弟节点
-----.prevAll() .prevAll('p') 指定上面的全部（为p）兄弟节点
-----.siblings() .siblings('p')  指定上下所有(为p)同级节点。


$(function(){
	//$('#one').prev().css('color','red');	// .prev() 上一个兄弟节点
	//$('#one').prev('p').css('color','red');  // .prev('p')指定上一个并且为P的兄弟节
	//$('#one').prevAll().css('color','blue'); // .prevAll() 上面的全部兄弟节点
	//$('#one').prevAll('p').css('color','blue');// .prevAll('p') 指定上面全部为p的兄弟节点。

	//$('#one').siblings().css('color','blue');	// .siblings() 指定上下所有同级节点。
	//$('#one').siblings('p').css('color','red');	// .siblings('p') 指定上下所有同级为p的节点
});









----- .nextUntil('x')指定下面非X节点，遇到X节点结束 
----- .prevUntil('x')指定上面非x节点，遇到x节点结束

$(function(){	
	$('#one').nextUntil('p').css('color','blue');   // .nextUntil('x')指定下面非X节点，遇到X节点结束 
	$('#one').prevUntil('p').css('color','red');	// .prevUntil('x')指定上面非x节点，遇到x节点结束
});

nextUntil('p')--将设置p以外的兄弟节点，遇到p节点时结束。 如果兄弟节点中包含p 也会被设置。因为这个函数只会针对兄弟节点来设置。









-----$('x[title]') 通过属性title来设置样式
-----$('a[title=num1]')  设置指定的属性的样式

<a title='num1'>num1</a>
<a>num2</a>
<a>num3</a>
<a>num4</a>
<a title="num5">num5</a>

.js页面
$(function(){
	$('a[title]').css('color','red');	//通过属性title来设置样式
	$('a[title=num1]').css('color','blue'); //直接设置num1 的样式
});







-----$('a[title^=nu]')	设置标签名的属性以哪些字母为开头的样式
-----$('a[title$=f]')	设置标签名的属性以哪些字母为结尾的样式

<a title='num1'>num1</a>
<a title='numxxf'>num2</a>
<a title='nukdjf'>num3</a>
<a>num4</a>
<a title="num5">num5</a>

.js页面 
$(function(){
	$('a[title^=nu]').css('color','yellow');	//设置以哪些字母为开头的属性样式
	$('a[title$=f]').css('color','blue');	//设置标签名的属性以哪些字母为结尾的样式
});










-----$('a[title|=num]')  属性值完全匹配或完全匹配-以前部分内容
-----$('a[title!=num1]')  设置不等于xxx字段属性的样式
-----$('a[title~=num1]')   包含空格的属性列表
-----$('a[title*=nu]')   属性值中包含指定字串的
-----$('a[aaa][title=num]')  匹配属性的个数与名字


<a title='num1'>num1</a>
<a title='num-xxf'>num2</a>
<a title='nukdjf'>num3</a>
<a title='num2 aaa bbb'>num4</a>
<a title="num-5f">num5</a>
<a aaa='bbb' title='num'>num6</a>

.js页面 
$(function(){
	//$('a[title|=num1]').css('color','yellow');	//title|nun1 需要完全匹配
	$('a[title|=num]').css('color','blue');		//title|= 配 num- 后面无需匹配
	$('a[title!=num1]').css('color','red');		//title!= 设置不等于xxx字段属性的样式
	$('a[title~=num1]').css('color','blue');	//title~=   属性中包含空格的

	$('a[title*=nu]').css('color','yellow');	//title*=   属性值中包含指定字串的

	$('a[aaa][title=num]').css('color','yellow');	//[aaa][title]  匹配属性的个数与名字
});

















		=====基本过滤器=====
-----$('li:first')	 选择首个li元素
-----$('li:last')	 选择最后一个li元素
-----$('#one li:last')	 利用ID选择#one 中最后一个li元素
-----$('ul:first li:last')	 用first同时选择 父子两级元素
-----$('li:not(.two)')	 选择除指定类名以外的
-----$('li:even')	 选择0以上为偶数的元素（包括0）
-----$('li:odd')	 选择0以上为奇数的元素（不包括0）
-----$('li:eq(3)')	 以下标形式选择元素（下标是从0开始）
-----$('li:eq(-3)')	 以下标形式选择元素（负数就是倒数-1为最后一个）
-----$('li:gt(3)')	 选择大于指定下标的所有元素(可以指定负数)
-----$('li:lt(3)')	 选择小于指定下村的所有元素（可以指定负数）
-----$("h2:header")	 选择指定h1-h6标题元素
-----$("div h3:header")	 选择指定区域内h1-h6标题元素
-----$('input').get(0).focus();		让表单输入框自动获取焦点
-----$(':focus')			选择初始化焦点所在的元素



	====四种常用的过过滤器方法====
-----$('li').first()	选择首个li元素
-----$('li').last()	选择最后一个li元素
-----$('li').eq(3)	选择指定下标的li元素
-----$('li').not('.two')	选择指定.two类名以外的所有li元素



html页面
<script src="jquery-1.11.1.js"></script>
<script src="a.js"></script>
<style>
	*{
		font:normal bold 20px normal;
	}

</style>

<ul id='one'>
	<li>aaaaaaaaaaa</li>
	<li class='two'>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
</ul>
<ul>
	<li>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
</ul>
<div>
	<h2>aaaaaaaaaa</h2>
	<h3>aaaaaaaaaa</h3>
</div>
<input type="text" />



.js页面

$(function(){
	//基本过滤器
	
	//$('li:first').css('background','#ccc');  // :first 选择首个li元素
	//$('li:last').css('background','#aaa');	//:last 选择最后一个li元素
	//$('#one li:last').css('background','#eee'); // 利用ID选择#one 中最后一个li元素
	//$('ul:first li:last').css('background','red'); // 用first同时选择 父子两级元素
	//$('li:not(.two)').css('background','#ccc');	// 选择除指定类名以外的
	//$('li:even').css('background','#ccc');		//选择0以上为偶数的元素（包括0）
	//$('li:odd').css('background','#aaa');		//选择0以上为奇数的元素（不包括0）
	//$('li:eq(3)').css('background','#aaa');	//以下标形式选择元素（下标是从0开始）
	//$('li:eq(-3)').css('background','#aaa');	//以下标形式选择元素（负数就是倒数-1为最后一个）
	//$('li:gt(3)').css('background','#aaa');	//选择大于指定下标的所有元素(可以指定负数)
	//$('li:lt(3)').css('background','#aaa');	//选择小于指定下村的所有元素（可以指定负数）
	//$("h2:header").css('background','#aaa');	//选择指定标题元素
	//$("div h3:header").css('background','#ccc');


	//注意： focus过滤器,必须是网页初始状态时就以激活的焦点元素才能实现元素获取，而不是鼠标点击或TAB先择的。
	//$('input').get(0).focus();		//让表单输入框自动获取焦点
	//$(':focus').css('background','yellow');		//选择初始化焦点所在的元素



	//四种常用的过过滤器方法
	//$('li').first().css('background','#ccc');	//选择首个li元素
	//$('li').last().css('background','#ccc');	//选择最后一个li元素
	//$('li').eq(3).css('background','#ccc');		//选择指定下标的li元素
	//$('li').not('.two').css('background','#aaa');	//选择指定.two类名以外的所有li元素
});
















	=====内容过滤器
-----$('div:contains("ku.co")')		选取含有某字段的文本元素
-----$('div:empty').css('background','yellow').css('height','20px');
	//选取不包含子元素和空文本的元素
	//设置内容为空的div节点元素，需要设置其高度才能看见效果  所谓空的就是即不能有内容也不包含标签
	
-----$('ul:has(.two)')		选择ul的子节点li中含有class是two的 ul节点 
-----$('div:parent')		选择有子元素的div节点
-----$('ul').has('.two')	选择ul子节点中包含有class为two的 ul节点 此方法等同于$('ul:has(.two)')
-----$('li').parent().size();		获取li的父元素的标签的个数
-----$('li').parent().get(0);		获取li的父元素标签的第一个元素
-----$('li').parent()			设置li父元素标签的所有元素的样式
-----$('li').parents()			设置祖先元素的样式（直接到html元素）
-----$('li').parentsUntil('body')	样式设置到body标签为止，
	


	=====可见性过滤器
-----$('div:hidden').size(); 		获取隐藏的DIV 节点元素的个数
-----$('div:hidden').css('background','red').show(1000);
	//使隐藏的DIV节点元素 在一秒后 从上至下显示出来
-----$('div:visible').size());  	获取可见的div节点元素的个数






html页面

<script src="jquery-1.11.1.js"></script>
<script src="a.js"></script>
<style>
	*{
		font:normal bold 20px normal;
	}

</style>
<div style="display:none">我们的网站是:ycku.com</div>
<div>我们的旧网站是yc60.com</div>
<body>
<div>d</div>
<div></div>

<ul id='one'>
	<li>aaaaaaaaaaa</li>
	<li class='two'>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
</ul>
<ul>
	<li>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
</ul>
<div>
	<h2>aaaaaaaaaa</h2>
	<h3>aaaaaaaaaa</h3>
</div>
<input type="text" />
</body>




.js页面
$(function(){
	//$('div:contains("ku.co")').css('background','yellow');  //选取含有某字段的文本元素
	
	//$('div:empty').css('background','yellow').css('height','20px');
	//选取不包含子元素和空文本的元素
	//设置内容为空的div节点元素，需要设置其高度才能看见效果  所谓空的就是即不能有内容也不包含标签
	
	//$('ul:has(.two)').css('background','red'); 
	//选择ul的子节点li中含有class是two的 ul节点 

	//$('div:parent').css('background','red');
	//选择有子元素的div节点


	//$('ul').has('.two').css('background','#ccc');
	//选择ul子节点中包含有class为two的 ul节点 此方法等同于$('ul:has(.two)')

	//alert($('li').parent().size()); //获取li的父元素的标签的个数
	//alert($('li').parent().get(0)); //获取li的父元素标签的第一个元素

	//$('li').parent().css('background','#ccc'); //设置li父元素标签的所有元素的样式

	//$('li').parents().css('background','#ccc'); //设置祖先元素的样式（直接到html元素）
	//$('li').parentsUntil('body').css('background','#ccc'); //样式设置到body标签为止，
	
	//alert($('div:hidden').size());  //获取隐藏的DIV 节点元素的个数
	//$('div:hidden').css('background','red').show(1000);
	//使隐藏的DIV节点元素 在一秒后 从上至下显示出来

	//alert($('div:visible').size());  //获取可见的div节点元素的个数
});



















	=====子元素过滤器=====

-----$('li:first-child')		//获取每个父元素的第一个子元素
-----$('li:last-child')			//获取每个父元素的最后一个子元素
-----$('li:only-child')			//获取只有一个子元素的元素
-----$('li:nth-child(odd)')		//获取每个父元素的奇数子元素
-----$('li:nth-child(even)')	 	//获取每个父元素的偶数子元素
-----$('li:nth-child(1)')		//获取每个父元素下的指定下标的子元素
-----$('li:nth-child(3n)')		//获取每个父元素下的子元素，获取方式为逢N获取
-----$('li:nth-child(3n+1)')		//获取每个父元素下的子元素，获取方式为逢N+1获取




html页面
<script src="jquery-1.11.1.js"></script>
<script src="a.js"></script>
<style>
	*{
		font:normal bold 20px normal;
	}

</style>

<ul id='one'>
	<li>aaaaaaaaaaa</li>
	<li class='two'>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
</ul>
<ul>
	<li>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
</ul>
<ul>
	<li>aaaaaaaaaaa</li>

</ul>


.js页面
$(function(){
	//$('li:first-child').css('background','red');	//获取每个父元素的第一个子元素
	//$('li:last-child').css('background','red'); 	//获取每个父元素的最后一个子元素

	//$('li:only-child').css('background','red');	//获取只有一个子元素的元素

	//$('li:nth-child(odd)').css('background','red'); 	//获取每个父元素的奇数子元素
	//$('li:nth-child(even)').css('background','blue'); 	//获取每个父元素的偶数子元素
	//$('li:nth-child(1)').css('background','red');		//获取每个父元素下的指定下标的子元素

	//$('li:nth-child(3n)').css('background','red');	//获取每个父元素下的子元素，获取方式为逢N获取
	//$('li:nth-child(3n+1)').css('background','red');	//获取每个父元素下的子元素，获取方式为逢N+1获取
	
});










	=====其它方法=====

-----alert($('.two').is('li'));	//判定.two类所在元素是否为‘li’ 
-----alert($('.two').is($('li')));	//is()的形式不仅可以是标签名，也可以是jquery对象
-----alert($('.two').is($('li').get(2)));	//判定.two类所在元素是否是下标为2的‘li’DOM元素对象

-----alert($('.two').is($('li').eq(1)));	//判定.two类所在元素是否是下标为2的‘li’jquery元素对象

-----判断同时拥有指定的类名和属性名的元素是否存在
-----attr()-获取title属性值的参数
	alert($('.two').is(function(){	
		return $(this).attr('title')=='aaa';	//attr()-获取title属性值的参数
	}));
	//判断.two类名所在的元素中同时存在title属性为aaa的 元素是否存在。 
	//注意这个方法必须要用this作引用 
	
-----alert($('li').eq(1).hasClass('two'));	//判断下标为1的 li 对象的类名是否为‘two’
-----$('li').slice(2,7).css('color','red'); //选择下标从 2 到 7的 li对象（7不受影响）
-----$('li').slice(2).css('background','red');	//选择下标从2往后的所有 li 元素

-----$('li').slice(2,-3).css('background','red');	//选择下标从2到倒数第三个之间的li元素


-----alert($('#one').find('li').end().get(0).nodeName); //获取指定ID名所在元素下的子节点li的上一层元素的第一个元素
-----alert($('#one').find('li').parent().get(0).nodeName) //同上的另一种方式 
-----$('#one').next('ul').end().css("background",'#ccc');  //end() 获取当前元素前一次状态

-----alert($('div:first').children().size());	//获取第一个div节点的子节点的个数
-----alert($('div:first').contents().size());	//获取第一个div节点中元素个数

-----filter() 多选择器共同实现
	//$('li').filter('.two, :first, :last').css('background','#ccc');
	//$('li').filter('.two, :first-child, :last-child').css('background','red'); 

-----filter(function(){})	同时限制多条件
	$('li').filter(function(){
		return $(this).attr('class')=='two' && $(this).attr('title')=='aaa';
	}).css('background','#ccc');




html页面

<script src="jquery-1.11.1.js"></script>
<script src="a.js"></script>
<style>
	*{
		font:normal bold 20px normal;
	}

</style>
<div>
sdfsd
	<strong>abcdefg</strong>sdfsd
	<b>sdfsd</b>
</div>

<ul id='one'>
	<li>aaaaaaaaaaa</li>
	<li class='two' title='aaa'>aaaaaaaaaaa</li>
	<li class='two'>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
</ul>
<ul>
	<li>aaaaaaaaaaa</li>
	<li class='two' title='aaa'>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
	<li>aaaaaaaaaaa</li>
</ul>
<ul>
	<li>aaaaaaaaaaa</li>

</ul>



.js页面

$(function(){
	//alert($('.two').is('li'));	//判定.two类所在元素是否为‘li’ 
	//alert($('.two').is($('li')));	//is()的形式不仅可以是标签名，也可以是jquery对象
	//alert($('.two').is($('li').get(2)));	//判定.two类所在元素是否是下标为2的‘li’DOM元素对象

	//alert($('.two').is($('li').eq(1)));	//判定.two类所在元素是否是下标为2的‘li’jquery元素对象


	//alert($('.two').is(function(){	//判断同时拥有指定的类名和属性名的元素是否存在
	//	return $(this).attr('title')=='aaa';	//attr()-获取title属性值的参数
	//}));
	//判断.two类名所在的元素中同时存在title属性为aaa的 元素是否存在。 
	//注意这个方法必须要用this作引用 
	
	//alert($('li').eq(1).hasClass('two'));	//判断下标为1的 li 对象的类名是否为‘two’

	//$('li').slice(2,7).css('color','red'); //选择下标从 2 到 7的 li对象（7不受影响）

	//$('li').slice(2).css('background','red');	//选择下标从2往后的所有 li 元素

	//$('li').slice(2,-3).css('background','red');	//选择下标从2到倒数第三个之间的li元素


	//alert($('#one').find('li').end().get(0).nodeName); //获取指定ID名所在元素下的子节点li的上一层元素的第一个元素
	//alert($('#one').find('li').parent().get(0).nodeName) //同上的另一种方式 

	//$('#one').next('ul').end().css("background",'#ccc');  //end() 获取当前元素前一次状态

	//alert($('div:first').children().size());	//获取第一个div节点的子节点的个数
	//alert($('div:first').contents().size());	//获取第一个div节点中元素个数

	//$('li').filter('.two, :first, :last').css('background','#ccc');
	//$('li').filter('.two, :first-child, :last-child').css('background','red'); 
	//filter() 多选择器共同实现

	//filter(function(){})	同时限制多条件
	$('li').filter(function(){
		return $(this).attr('class')=='two' && $(this).attr('title')=='aaa';
	}).css('background','#ccc');

});













	第十集

	=====基础DOM和CSS操作

-----alert($('#two').html());	//获取指定元素中的内容（包括标签）
-----alert($('#two').text());	//获取指定元素中文本内容 （不包括标签）
-----$('#one').html('<u>aaaaaaaa</u>'); //替换指定元素中的内容 会解析标签
-----$('#two').text('<a href="#">www.klsdfs.com</a>');  
	//替换指定元素文本内容，不会解析标签

-----alert($('input').eq(1).val()); 	//获取表单value值
-----$('input').eq(1).val('ddddddddd');	//替换表单value值
-----$('input').eq(2).val('女');	//替换radio表单值
-----alert($('input').eq(2).val());
	//if($('input').eq(2).val()=='女'){
		//$('#four').text('女');	//替换radio关联文本内容
	//}

-----$('input').val(['男','女','编程']);	//设置表单选择项自动选择
	
-----alert('#one').attr('id');	//获取某个元素 KEY属性的属性值 

-----$('div').attr('title','我是域名'); //设置指定元素的属性名和属性值。
	
-----为指定元素同时赋值多个属性

	
-----用index区分获得的元素
	//$('div').attr('title',function(){
	//	return "我是"+(index+1)+"号域名";
	//});

-----$('div').html($('div').html()+'<em>www.li.com</em>'); //追加内容

	$('div').html(function(index,value){
		return value+ '<em>www.lksjd.cn</em>';
	});
	
-----$('div').removeAttr('title');		//清除被修改的东西





html页面

<script src="jquery-1.11.1.js"></script>
<script src="a.js"></script>
<style>
	*{
		font:normal bold 20px normal;
	}
	.red{
		font-size:1cm;
	}

</style>
<body>
	<div>www.baidu.com</div>
	<div>www.baidu.com</div>
	<div id='one'>
		<strong>www.baidu.com</strong>
	</div>
	<div id='two'>
		<strong>aaaaaaaaaa</strong>
	</div>
	<div id='four'>
	<input type='radio' value="男"/>男
	<input type='radio' value="女"/>女
	<input type="checkbox" value='编程'/>编程
	</div>
</body>



.js页面

$(function(){
	//alert($('#two').html());	//获取指定元素中的内容（包括标签）
	//alert($('#two').text());	//获取指定元素中文本内容 （不包括标签）

	//$('#one').html('<u>aaaaaaaa</u>'); //替换指定元素中的内容 会解析标签
	//$('#two').text('<a href="#">www.klsdfs.com</a>');  
	//替换指定元素文本内容，不会解析标签

	//alert($('input').eq(1).val()); 	//获取表单value值
	//$('input').eq(1).val('ddddddddd');	//替换表单value值

	//$('input').eq(2).val('女');		//替换radio表单值
	//alert($('input').eq(2).val());
	//if($('input').eq(2).val()=='女'){
		//$('#four').text('女');	//替换radio关联文本内容
	//}

	//$('input').val(['男','女','编程']);	//设置表单选择项自动选择
	
	//alert('#one').attr('id');	//获取某个元素 KEY属性的属性值 

	//$('div').attr('title','我是域名'); //设置指定元素的属性名和属性值。
	
	//为指定元素同时赋值多个属性
	//此方法注意间隔是用逗号，class不建议用此方法操作，后面有功能更好的方法
	//$('div').attr({			
	//	'title':'aaaaaa',
	//	'class':'red',
	//	'data':'1111'
	//});
	

	//$('div').attr('title',function(index,value){	 //为元素添加属性的方法	
	//index代表多个属性的下标，value代表属性值， 如 title='这是域名'  index 代表title的下标 ,value代表"这是域名"
	//	return "以前的title是："+value+",现在的title是"+(index+1)+"号域名";
	//});

	//$('div').html($('div').html()+'<em>www.li.com</em>'); //追加内容





	// $('xx').html(function(index,value){})	//为元素添加内容的方法
	$('div').html(function(index,value){
		return value+ '<em>www.lksjd.cn</em>';
	});
	
	$('div').removeAttr('title');		//清除元素的属性










		第十一课
	=====基础DOM和CSS操作=====

学习要点：
	1.	DOM简介
	2.	设置元素及内容
	3.	元素属性操作
	4。	元素样式操作

-----//用匿名函数计算操作CSS属性值的方法   %%%%
-----$('div').addClass('red');		//给元素添加一个CSS类并配置一个属性
-----$('div').addClass('bg size');	//给元素添加一个CSS类并配置多个属性
-----$('div').removeClass('bg');	//删除一个CSS类属性
-----$('div').removeClass('red size');	//同时删除多个CSS类属性	
-----//$(this).toggle(3000)		//点击后消失
-----//toggle()不加参数一点就没，加参数3000就是三秒种内消失
-----//点击换（多个）CSS属性
-----利用true和false原理的算法设置点击不同次数来切换CSS属性
-----//切换元素不同的CSS样式类
-----//用三目方法切换元素的类属性(有缺点)
-----//切换元素类属性的方法（优化）	 %%%%%
-----//切换元素的class类属性(带bool算法)




html页面；
<script src="jquery-1.11.1.js"></script>
<script src="a.js"></script>
<link rel='stylesheet' type='text/css' href='a.css'/>
<style>
	*{
		font:normal bold 20px normal;
	}
	.d1{
		font-style:italic;
	}

</style>
<body>
<div style='width:200px;height:30px'>ksjdflksjfldfsdfsfasgdgfdgsdafsfassfskjfhs</div>
<div class='yellow'>bbb</div>
<div>aaaa</div>
</body>



.js页面 
$(function(){	

	$('div').css('width',function(index,value){	//用匿名函数计算操作CSS属性值的方法   %%%%
//		return parseInt(value)-100+'px';
	});

	$('div').addClass('red');		//给元素添加一个CSS类并配置一个属性
	$('div').addClass('bg size');		//给元素添加一个CSS类并配置多个属性

	$('div').removeClass('bg');		//删除一个CSS类属性
	$('div').removeClass('red size');	//同时删除多个CSS类属性


	$('div').click(function(){	
	//	$(this).toggle(3000)		//点击后消失
		//toggle()不加参数一点就没，加参数3000就是三秒种内消失
	});

	$('div').click(function(){
//		$(this).toggleClass('red size');	//点击换（多个）CSS属性
	});


	//利用true和false原理的算法设置点击不同次数来切换CSS属性
	var count=0;
	$('div').click(function(){
//		alert(' ');
//		$(this).toggleClass('red size',count++ %3==0);		
	});


/*
	//切换元素不同的CSS样式类
	$('div').click(function(){
		$(this).toggleClass('red');
		if($(this).hasClass('red')){
			$(this).removeClass('yellow');
		}else{
			//$(this).toggleClass('yellow');
			$(this).addClass('yellow');
		}
	});

*/


	//用三目方法切换元素的类属性(有缺点)
/*
	$('div').click(function(){
		$(this).toggleClass(function(){
			return $(this).hasClass('red') ? 'yellow':'red';
		});
	});
*/

/*
	//切换元素类属性的方法（优化）	 %%%%%
	$('div').click(function(){
		$(this).toggleClass(function(){
			if($(this).hasClass('red')){
				$(this).removeClass('red');
				return 'yellow';
			}else{
				$(this).removeClass('yellow');
				return 'red';
			}
		});
	});
*/

	//切换元素的class类属性(带bool算法)
	var a = 0;
	$(document).click(function(){
		$('div').toggleClass(function(index,className,switchBool){
			alert(index + className + switchBool);
			if($(this).hasClass('red')){
				$(this).removeClass('red');
				return 'yellow';
			}else{
				$(this).removeClass('yellow');
				return 'red';
			}
		},a++ %2==0);
	});
});













		第12课
		


-----alert($('div').width());			//获取元素宽度
-----alert($('div').innerWidth());		//获取元素宽度，包含内边距padding
-----alert($('div').outerWidth());		//获取元素宽度，包含border和padding
-----alert($('div').outerWidth(true));		//获取元素宽度, 同上且包含外边距
-----$('div').width('500pt');			//设置其它长度单位时需要指定
-----$('div').width(function(index,width){	//设置元素宽度（带回调函数）

-----alert($('div').offset().top);		//获取元素相对于视口的偏移位置
-----alert($('strong').position().top);		//获取元素相对于父元素的偏移位置
-----alert($(window).scrollTop());		//获取垂直滚动条的值
-----$(window).scrollTop();			//设置垂直滚动条的值
-----alert($(window).scrollLeft());		//获取水平滚动条的值
-----$(window).scrollLeft();			//设置水平滚动条的值


html页面；
<script src="jquery-1.11.1.js"></script>
<script src="a.js"></script>
<body>
	<div style='width:200px;padding:100px;border:100px solid #ccc;margin:100px'>
		aaaaaaa
	</div>
	<div style='position:relative;top:10px'>
		<strong style='position:absolute;top:1px;'>www.baidu.com</strong>
	</div>
	<div>www.baidu.com</div>
	<p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p>
	<p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p>
	<p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p>
	<p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p>
</body>



.js页面 

$(function(){
	//alert($('div').css('width'));  		//获取元素宽度的两种方法
	//alert(typeof parseInt($('div').css('width'))); 
	//alert(typeof $('div').css('width'));   //得到的结果类型是string
	//alert(typeof $('div').width());		//得到的结果类型是number （便于计算）

	//$('div').width(500);			//设置元素宽度的方法 （智能显示px）
	//$('div').width('500px');		
	//$('div').width('500pt');		//设置其它长度单位时需要指定

	//$('div').width(function(index,width){	//设置元素宽度（带回调函数）
	//	return width-500;
	//});

	//alert($('div').width());		//获取元素宽度
	//alert($('div').innerWidth());		//获取元素宽度，包含内边距padding
	//alert($('div').outerWidth());		//获取元素宽度，包含border和padding
	//alert($('div').outerWidth(true));	//获取元素宽度, 同上且包含外边距

					//  padding	border	margin
	//$('div').width();		//  200		200	200
	//$('div').innerWidth();	//  400		400	400
	//$('div').outerWidth();	//  400		600	600
	//$('div').outerWidth(true);	//  400		600	800


	//alert($('div').offset().top);		//获取元素相对于视口的偏移位置
	//alert($('strong').offset().top);	
	//alert($('strong').position().top);	//获取元素相对于父元素的偏移位置

	//alert($(document).scrollTop());	//获取垂直滚动条的值
	//$(window).scrollTop();		//设置垂直滚动条的值

	//alert($(document).scrollLeft());	//获取水平滚动条的值
	//$(window).scrollLeft();		//设置水平滚动条的值
				
	$(function(){				//scroll 通过点击行为获取
		$('p').click(function(){
			alert($(window).scrollTop());
		});
	});
});









		第13课 DOM节点操作
学习要点：
	1。创建节点
	2，插入节点
	3，包裹节点
	4，节点操作

-----var aa = $('<i>这是一个在JS中创建的节点</i>');	//创建节点
-----$('body').append(aa);					//插入节点
-----$('div').append($('<u>DOM</u>'));		//向指定元素内部后面插入节点内容
-----$('div').append(function(index,html){	//用匿名函数向指定元素内部后面插入节点内容
		return '<u>uuuuuu</u>'+index+html;  //这里的html代表div的内容
	});
-----$('u').appendTo('div');			//将指定节点移入到另一节点内部的后面
-----$('div').prepend(aa);				//向指定元素内容前面插入节点内容
-----$('div').prepend(function(index,html){  //用匿名函数向指定元素内部前面插入节点内容
		return 'aaaaa'+index+html;
	});
-----$('u').prependTo('div');			//将指定节点移入到另一节点内部的前面
-----$('div').after('<i>iiii</i>');			//向指定节点后面插入一个兄弟节点
-----$('div').after(function(index,html){		//用匿名函数向指定节点后加一个兄弟节点
		return '<u>uuuuu</u>'+index+html;
	});
-----$('div').before('<i>iiii</i>');		//向指定节点前面插入一个兄弟节点
-----$('div').before(function(index,html){	//用匿名函数向指定节点前面加一个兄弟节点
		return '<u>uuuu</u>'+index+html;
	});
-----$('u').insertAfter('div');		//把指定节点移动到另一兄弟节点后面
-----$('div').insertBefore('u');		//把指定节点移动到另一兄弟节点前面

	
html页面；
<script src='jquery-1.11.1.js'></script>
<script src='a.js'></script>
<body>
	<u>uuuuuuu</u>
	<div>节点</div>
	<div>节点</div>
</body>



.js页面；
$(function(){
	var aa = $('<i>这是一个在JS中创建的节点</i>');	//创建节点
	//$('body').append(aa);					//插入节点

	//$('div').append($('<u>DOM</u>'));		//向指定元素内部后面插入节点内容

	//$('div').append(function(index,html){	//用匿名函数向指定元素内部后面插入节点内容
	//	return '<u>uuuuuu</u>'+index+html;  //这里的html代表div的内容
	//});

	//$('u').appendTo('div');			//将指定节点移入到另一节点内部的后面

	//$('div').prepend(aa);				//向指定元素内容前面插入节点内容

	//$('div').prepend(function(index,html){  //用匿名函数向指定元素内部前面插入节点内容
	//	return 'aaaaa'+index+html;
	//});
	
	//$('u').prependTo('div');			//将指定节点移入到另一节点内部的前面


	//$('div').after('<i>iiii</i>');			//向指定节点后面插入一个兄弟节点

	$('div').after(function(index,html){		//用匿名函数向指定节点后加一个兄弟节点
		//return '<u>uuuuu</u>'+index+html;
	});

	//$('div').before('<i>iiii</i>');		//向指定节点前面插入一个兄弟节点

	$('div').before(function(index,html){	//用匿名函数向指定节点前面加一个兄弟节点
	//	return '<u>uuuu</u>'+index+html;
	});

	//$('u').insertAfter('div');		//把指定节点移动到另一兄弟节点后面
	//$('div').insertBefore('u');		//把指定节点移动到另一兄弟节点前面

});













		第14课 DOM节点操作

	包裹节点：使用字符串代码将指定元素的代码包含着的意思。
	

html页面；
<script src='jquery-1.11.1.js'></script>
<script src='a.js'></script>
<link type='text/css' rel='stylesheet' href='a.css'/>
<body>
	<p>pppppp</p>
	<p class='one'>p2222222</p>
	<div>ddd</div>
	<strong></strong>
	<div>ddd</div>
</body>



.js页面
$(function(){
	//$('div').wrap('<strong></strong>');	//给指定的节点包裹添加一层html父节点
	//$('div').wrap('<strong/>');
	//$('div').wrap('<strong>1111</strong>');
	//$('div').wrap('<strong><em></em></strong>');	//给指定节点同时包裹添加多层html父节点

	//$('div').wrap($('strong').get(0));
	//$('div').wrap(document.createElement('strong')); //通过创建DOM节点对象给指定节点包裹添加html父节点

	//$('div').unwrap();		//移除一层包裹的html父节点（只对用wrap添加的有效）
	//$('div').unwrap();			//移除多层时需多次操作
	//$('div').wrapAll('<u/>');	//把所有指定类型的节点包裹在一个html节点中
	//$('div').wrapAll(document.createElement('u')); //创建DOM对象 (同上)
	//$('div').wrapInner('<u/>');	//向指定节点的内容和子节点包裹添加一层html元素
	//$('div').wrapInner(document.createElement('u'));	//通过DOM对象给指定节点内容包裹添加HTML元素

	$('div').wrap(function(index){		//为指定节点包裹添加HTML父节点元素的方法
	//	return "<u>"+index+"</u>";
	});
	$('div').wrapInner(function(index){	//为指定节点的内容元素包裹HTML元素的方法
	//	return '<u>'+index+'</u>';
	});
	
	$('p').click(function(){
		alert('pppppp');
	});
	
	//$('p').clone(true).prependTo('body');	//复制节点，参数true 表示连同事件一并复制
	
	//$('p').remove();		//删除一个节点元素
	//$('p').remove('.one');		//删除满足指定参数条件的节点，（可指定带某个类名的节点）
	//$('p').eq(1).remove();

	//alert($('strong').remove().get(0));  //获取被删除的元素名

	//$('p').remove().appendTo('body');	//删除后再添加的节点元素不保留事件行为
	
	//$('p').detach().prependTo('body');	//删除后再添加的节点元素会保留事件行为

	//$('p').empty();			//清空指定节点内容，并保留节点

	//$('p').replaceWith('<span>DOM</span>');		//替换节点
	
	//$('<span>DOM</span>').replaceAll('p');			//替换节点

});












		第15课 表单选择器

html页面；
<script src='jquery-1.11.1.js'></script>
<script src='a.js'></script>
<link type='text/css' rel='stylesheet' href='a.css'/>
<body>
	<form>
	<input type='text' disabled='disabled' name='user' value='aaaaaaa'/>
	<input type='password' name='psw' value='abc'/>
	<textarea></textarea>
	<select multiple>
		<option>1</option>
		<option>2</option>
		<option>3</option>
	</select>
	<input type='radio'checked='checked' name='sex' value='男'>男
	<input type='radio' name='sex' value='女'>女
	<input type='checkbox' checked>运动
	<input type='hidden' name='one' value='oooooooo'/>
	<input type='button' value='提交'/>
	</form>
</body>



.js页面
$(function(){
	//获取表单value值的方法
	//alert($('input').size());
	//alert($('input').eq(0).val());
	//alert($('input').eq(1).val());
	//alert($('input[type=text]').val());
	//alert($('input[name=psw]').val());
	//alert($('input[name=user][type=text]').val());

	// :input 选取所有表单元素(包括select,textarea,botton)
	//alert($(':input').size());

	// :text 选取所有的单行本框

	// :password 选取所有的密码框

	// :checkbox 选取所有的复选择框

	// :submit 选取所有的提交按钮

	// :reset 选取所有的重置按钮

	// :image 选取所有的图像按钮

	// :button 选取所有的普通按钮

	// :file 选取所有的文件按钮

	// :hidden 选取所有的不可见字段
		<br><option>也算做隐藏元素
	//alert($('form :hidden').size());
	//alert($('form :hidden').val());
	//alert($('form :hidden[name=one]').val());

	// :radio 选取所有的单选框
	//alert($(':radio[name=sex]').eq(0).val());
	//alert($(':radio[name=sex]').last().val());

	// :enabled 选取所有可用的元素
	//alert($('form :enabled').size());

	// :disabled 选取所有不可用的元素
	//alert($('form :disabled').size());

	// :checked 选取所有被选中的元素（单选，复选）
	//alert($('form :checked').size());

	// :selected 选取所有被选择中的元素(下拉菜单)
	alert($('form :selected').size());

	// option:selected 选择下拉菜单option的值和文本内容
	$(".slc").change(function(){
		alert($(this).find("option:selected").text());
		alert($(this).find("option:selected").val());
	});
});












		第16课 基础事件
学习重点：
	1.绑定事件
	2.简写事件
	3.复合事件


-----绑定事件的类型：
	click:		单击
	dblclcik:	双击
	mousedown:	鼠标按下
	mouseup:	鼠标弹起
	mousemove:	鼠标移动
	mouseover:    	鼠标移入
	mouseout:	鼠标移出
	change:		表单值的改变
	select:		文本内容被选定事件
	submit:		提交触发
	keydown:	键盘按下
	keypress:       键盘按下
	keyup:		键盘抬起
	blur:		丢失焦点
	focus:		激活焦点
	load:		加载
	resize:		窗口大小的改变
	scroll:		滚动
	error:		错误
	...更多事件可以参考手册.




html页面；
<script src='jquery-1.11.1.js'></script>
<script src='a.js'></script>
<link type='text/css' rel='stylesheet' href='a.css'/>
<body>
<form>
	<input type='button' value='按钮'/>
	<input type='text' value='abcdefg'/>
	<input type='submit' value='提交'/>
</form>
	<div></div>
	<P>p</p><P>p</p><P>p</p><P>p</p><P>p</p><P>p</p><P>p</p>
	<P>p</p><P>p</p><P>p</p><P>p</p><P>p</p><P>p</p><P>p</p>
	<P>p</p><P>p</p><P>p</p><P>p</p><P>p</p><P>p</p><P>p</p>
	<P>p</p><P>p</p><P>p</p><P>p</p><P>p</p><P>p</p><P>p</p>
</body>



.js页面
$(function(){
	//jq 用匿名函数通过 .bind(type,[],fn) 绑定事件
	$('input').bind('click',function(){
	//	alert('aaaaa');
	});

	//jq 用普通函数通过 .bind()绑定事件
	//$('input').bind('click',fn1);
	function fn1(){
		alert('fn1');
	}
	function fn2(){
		alert('fn2');
	}

	// jq绑定多个事件
	//$('input').bind('click mouseover',fn);

	// jq绑定多个不同效果事件
	//$('input').bind('mouseover mouseout',function(){
	//	$('div').html(function(index,value){
		//	return value+1;
	//	});
	//});
	
	//通过对象键值对绑定多个事件
	$('input').bind({
		mouseover:function(){
	//		alert('移入');
		},
		mouseout:function(){
	//		alert('移出');
		}
	});
	

	//删除绑定事件的三种形式
	//$('input').bind('click mouseover',fn);
	//$('input').unbind();			//删除元素绑定的所有事件
	//$('input').unbind('mouseover');	//删除元素指定的事件

	//$('input').bind('click',fn1);
	//$('input').bind('click',fn2);
	//$('input').unbind('click',fn2);	//删除以函数形式绑定的事件




	//jq封装的事件
	$('input').click(function(){		//click 单击事件
	//	alert('click单击事件');
	});
	$('input').dblclick(function(){
	//	alert('dblclcik双击事件');	//dblclick 双击事件
	});

	$('input').mousedown(function(){
	//	alert('mousedown鼠标左键按下事件');	//mousedown 鼠标左键按下事件
	});

	$('input').mouseup(function(){
	//	alert('mouseup鼠标弹起事件');		//mouseup 鼠标左键弹起事件
	});

	$(window).unload(function(){
	//	alert('页面卸载事件');		//unload 页面卸载事件（刷新或关闭，需浏览器支持）
	});

	$(window).resize(function(){
	//	alert('窗口大小改变事件');	//resize 窗口大小改变事件
	});

	$(window).scroll(function(){
	//	alert('滚动条位置改变事件');	//scroll 流动条位置改变事件
	});
	
	$(":text").select(function(){
	//	alert('选定文本内容事件');	//select 选定文本内容事件
	});
	
	$(':text').change(function(){
	//	alert('文本内容被改变事件');	//change 文本内容被改变事件
	});


	$('form').submit(function(){
		alert('表单提交事件');		//submit 表单提交事件
	});			
	//注意:submit事件是针对于form元素的 (一：submit要在form中，二：要用form对象来操作)
});


















	第17课 基础事件下


-----mouseover(),mouseout()与mouseenter(),mouseleave()的区别
	mouseover() , mouseout()	表示鼠标移入和移出
	mouseenter() , mouseleave()	表示鼠标穿过和穿出 
	enter(),leave()在穿过子元素时不会触发;over(),out()则会触发。 就是说如果只有一个元素的时候它们的效果是一样的，但如果有多个元素重叠的时候效果就会不一样了！


-----键盘事件keydown(),keyup(),keypress()
	注意：keydown(),keyup()返回的是键码，而keypress()返回的是字符编码
	$('input').keydown(function(e){
		alert(e.keyCode);	//keydown()keyup()要使用keyCode	可显示功能键
	});

	$('input').keypress(function(e){
		alert(e.charCode);	//keypress()要使用charCode	不显示功能键
	});

	$(window).keydown(function(e){
	//	alert(e.keyCode);
	});
	$(window).keyup(function(e){
	//	alert(e.keyCode);
	});
	$(window).keypress(function(e){
	//	alert(e.charCode);
	});



html页面
<script src="jquery-1.11.1.js"></script>
<script src='migrate.js'></script>
<script src="a.js"></script>
<head>
	<link rel='stylesheet' type='text/css' href='./a.css'/>
	<link type="text/css" rel="stylesheet" href="./a.css" />
</head>
<body>
	<div style='width:300px;height:300px;background:green'>
		<p style="width:100px;height:100px;background:blue"></p>
		<input type='password'>
	</div>
	<strong></strong>
	<input type='text' />
	<div>
	</div>
	<div id='one' style='width:300px;height:300px;background:green'>
	</div>
</body>







.js页面
$(function(){
	
	//-----鼠标移入和移出事件
	$('div').mouseover(function(){
	//	$(this).css('background','red');
	//	$('strong').html(function(index,value){
	//		return value+1;
	//	});
	}).mouseout(function(){
	//	$(this).css('background','green');
	});	//over()和out的子节点会再次触发父节点事件，它们不统一。

	//-----鼠标穿过和穿出事件
	$('div').mouseenter(function(){
	//	$(this).css('background','red');
		$('strong').html(function(index,value){
	//		return value+1;
		});
	}).mouseleave(function(){
	//	$(this).css('background','green');
	});	//enter()和leave() 的子节点不会再次触发父节点事件，它们统一

	//-----focus光标激活事件(当前元素激活)
	$('input').focus(function(){
	//	alert('光标激活');
	});

	//-----blur光标丢失事件(当前元素激活)
	$(':password').blur(function(){
	//	alert('光标丢失');
	});

	//-----focusin 光标激活事件(可子节点激活)
	$('div').focusin(function(){
	//	alert('光标激活');
	});

	//-----focusout 光标激活事件(可子节点激活)
	$('div').focusout(function(){
	//	alert('光标激活');
	});


	//-----hover() 光标悬停事件
	//注：hover()是结合了mouseenter(),和mouseleave()两个方法。
	$('div').hover(function(){
	//	$(this).css('background','red');
	},function(){
	//	$(this).css('background','green');
	});


	//-----点击循环变换(切换)背景色(颜色)
/*
	var aa=0;
	$('#one').click(function(){
		if(aa==0){
			$(this).css('background','blue');
			aa=1;
		}else if(aa==1){
			$(this).css('background','red');
			aa=2;
		}else if(aa==2){
			$(this).css('background','green');
			aa=0;
		}
	});
*/

	//-----点击元素消失再恢复
	$('div').click(function(){
	//	$(this).toggle('slow');
	//	$(this).toggle(4000);
	});


	//-----toggle(fn1,fn2,,,,)  切换元素属性 
	//注：1.8以后以删除 需要引入migrate文件才可使用
	$('div').toggle(function(){
		$(this).css('background','red');	
	},function(){
		$(this).css('background','blue');
	},function(){
		$(this).css('background','green');
	});
});











		第18课 事件对象
学习要点：
	1.事件对象
	2.冒泡和默认行为

.js页面
$(function(){
	//----- e 系统自动传给函数的事件 也可是其它变量
	//其结果是一个对象，即是对象就会有属性和方法
	$('input').click(function(es){
	//	alert(es+'es');	
	});

	//-----type 获取这个事件的事件类型，例如click
	$('input').bind('click',function(e){
	//	alert(e.type);	//获取事件类型
	//	alert(typeof e.type); //结果string类型
	});

	//-----target 获取触发事件的DOM元素
	//target是获取触发元素的DOM,就是点哪个元素就是哪个元素
	$('input').bind('click',function(e){
	//	alert(e.target);	
	});


	//-----currentTarget 获取指定触发的DOM元素，等同与this
	//currentTarget得到的是监听元素的DOM,就是绑定的哪个元素就是哪个元素
	$('div').bind('click',function(e){
		//alert(e.currentTarget);
		//alert(e.target);
	});
	//-----target与currentTarget的区别
	$('div').bind('click',function(e){
	//	alert(this==e.currentTarget);	//currentTarget 相当于this
	});
	$('div').bind('click',function(e){
	//	alert(this==e.target);		//target则不然
	});


	//-----relatedTarget 获取目标（鼠标）离开之后或进入之前的那个DOM元素
	//也就是移入移出最相邻的那个DOM
	$('span').bind('mouseover',function(e){
	//	alert(e.relatedTarget);	//移入前的DOM元素
	});
	$('span').bind('mouseout',function(e){
	//	alert(e.relatedTarget);	//移出后的DOM元素
	});


	//-----data 获取事件调用时的额外数据 可以是数字，字符串，数组，对象
	$('input').bind('click',123,function(e){
	//	alert(e.data);		//获取到的数字
	});
	$('input').bind('click','abc',function(e){
	//	alert(e.data);		//获取到的字符
	});
	$('input').bind('click',[1,2,'a','b'],function(e){
	//	alert(e.data);		//获取到的数组
	//	alert(e.data[3]);	//获取数组中指定下标的元素
	});
	$('input').bind('click',{'user':'lee','age':100},function(e){ //user:lee是输入的键值对
	//	alert(e.data['user']);	//获取键值对user对应的值lee
	});


	//-----pageX/pageY 获取相对于页面原点的水平/垂直坐标
		//页面原点就是文档的左上点（x=0,y=0）的位置
	//-----screenX/screenY	获取显示器屏幕位置的水平/垂直坐标（非jquery封装）
	//-----clientX/clientY  获取相对于页面视口的水平/垂直坐标（非jquery封装）
	$(document).bind('click',function(e){
	//	alert(e.pageX+','+e.screenX+','+e.clientX);	//三种X坐标
	//	alert(e.pageY+','+e.screenY+','+e.clientY);	//三种Y坐标	
	});
	//当三种坐标在出现滚动条的情况下，结果就会不同，pageX/Y的坐标就会以原点累加，比其它值都大
	
	//-----result  获取上一个相同事件的返回值
	$('input').bind('click',function(){
	//	return 123;
	});
	$('input').bind('click',function(e){
	//	alert(e.result);
	});

	//-----timeStamp  获取事件触发的时间戳
	$(document).bind('click',function(e){
	//	alert(e.timeStamp);
	});

	//-----which  获取鼠标的左中右键（1，2，3），或获取键盘按键
	$(document).bind('mousedown',function(e){
	//	alert(e.which);	  //获取哪个鼠标键触发的事件
	});	
	$(document).bind('keydown',function(e){
	//	alert(e.which);	  //获取哪个键盘键触发的事件
	});

	//-----altKey/shiftKey/ctrlKey/metaKey  获取事件发生时是否按下了alt,shift,ctrl或meta键。
	$('div').bind('click',function(e){
	//	alert(e.ctrlKey);	
	});
	$('div').bind('click',function(e){
	//	alert(e.altKey);	//alt好像不好用，，
	});	
	$('div').bind('click',function(e){
	//	alert(e.shiftKey);
	});
});


html页面
<script src='jquery-1.11.1.js'></script>
<script src='a.js'></script>
<body>
	<input type='button' value='按钮'/>
	<div style='width:200px;height:200px;background:#ccc'>
		<span style='width:100px;height:100px;background:#eee;display:block'></span>
	</div>
	<p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p>
	<p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p>
	<p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p>
	<p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p><p>p</p>
</body>
















	第19课 事件对象下



.js页面
$(function(){
	//-----冒泡和禁止冒泡行为
	//冒泡行为；如果页面中重叠了多个元素，并且重叠的这些元素都绑定了同一个事件，那么就会出现冒泡问题。
	//e.stopPropagation() 禁止冒泡行为
	$('input').bind('click',function(e){
	//	e.stopPropagation();
	//	alert('input');
	});

	$('div').bind('click',function(){
	//	alert('div');
	});
	$(document).bind('click',function(){
	//	alert('document');
	});


	//-----e.preventDefault() 阻止默认行为
	//-----默认行为：就是当右键点击时出现的默认菜单，点击超连接时跳转页面，点击提交按键提交信息，这都是默认行为。
	//-----禁止超连接跳转
	$('a').bind('click',function(e){
	//	e.preventDefault();
	//	alert('baidu');
	});

	//-----禁止表单提交
	$(':submit').bind('click',function(e){
	//	e.preventDefault();
	//	alert('submit');
	});
	
	$('form').submit(function(e){
	//	e.preventDefault();
	});
	
	//-----同时阻止冒泡和默认行为
	$('a').bind('click',function(e){
	//	e.preventDefault();
	//	e.stopPropagation();
	//	alert('baidu');
	});
	
	//-----同时阻止冒泡和默认行为的简捷方法
	$('a').bind('click',function(){
	//	alert('baidu');
	//	return false;
	});


	//-----e.isPropagationStopped()判断是否调用了stopPropagation()方法
	//-----e.isDefaultPrevented()判断是否调用了preventDefault()方法
	$('a').bind('click',function(e){
		//alert('baidu');
		//e.stopPropagation();
		//e.preventDefault();
		//alert(e.isDefaultPrevented());
		//alert(e.isPropagationStopped());
	});

	
	//-----e.stopImmediatePropagation() 取消冒泡行为，并取消该事件的后续事件处理函数
	//-----e.isImmediatePropagationStopped() 判断是否调用了stopImmediatePropagation()方法
	$('a').bind('click',function(e){
		e.stopPropagation();
		e.preventDefault();
	
		e.stopImmediatePropagation(); //此方法会阻止同类事件的后续事件
		alert(e.isImmediatePropagationStopped());
		alert('a');
	});
	$('a').bind('click',function(){
		alert('aa');	//上一次同类事件使用e.stopImmediatePropagation()时，本次事件将停止
	});
	$('div').bind('click',function(e){
		alert('div');
	});
	$(document).bind('click',function(e){
		alert('document');
	});
});




html页面
<script src='jquery-1.11.1.js'></script>
<script src='a.js'></script>
<body>
	<div style='width:200px;height:200px;background:#ccc'>
		<input type='button' value='按钮' />
		<a href='www.baidu.com'>baidu</a>
	</div>
	<form action='11.html'/>
		<input type='submit' value='提交'/>
	</form>
</body>











	第20课	高级事件上

学习要点；
	1.模拟操作
	2.命名空间
	3.事件委托
	4.on,off和one

一：模拟操作
	在事件触发的时候，有时我们需要一些模拟用户行为的操作，例如，当网页加载完毕后自行点击一个按钮触发一个事件，而不是用户去点击。


.js页面
$(function(){
/*
	$('input').bind('click',function(){
	//	alert('将模拟用户操作触发');
	});
//-----模拟人为操作行为（点击行为）
	//$('input').trigger('click');
	
//-----模拟人为操作行为的简便方法
	$('input').bind('click',function(){
	//	alert('模拟人为操作事件');
	}).trigger('click');

//-----模拟行为可以传额外数据（数值，字串，数组，对象）
	//数字和字串
	$('input').click(function(e,data1,data2,data3,data4){
	//	alert(data1+'|'+data2+'|'+data3+'|'+data4['user']);
	}).trigger('click',['123','abc',[1,2,'a'],{'user':'lee'}]);
//trigger额外数据，只有一条时可以省略中括号，多条时不能省略

	//bind的额外数据用e.的形式，模拟行为的数据直接用data1,2....
	$('input').bind('click',{name:'zhang'},function(e,data1,data2,data3,data4){
	//	alert(data1+'|'+data2+'|'+data3+'|'+data4.user+'|'+e.data.name);
	}).trigger('click',['123','abc',[1,2,'a'],{'user':'wang'}]);

//-----自定义事件
//自定义事件本身没有绑定硬件，不会产生事件，它是给trigger准备的，相当于调用一个函数。
	$('input').bind('myEvent',function(){
	//	alert('自定义事件');
	}).trigger('myEvent');


//-----trigger模拟系统事件的简写方式 
	$('input').click(function(){
	//	alert('trigger模拟事件的简写');
	}).click();

//-----trigger可简写的系统事件

	blur 		focusin		mousedown	resize
	change		focusout	mouseenter	scroll
	click		keydown		mouseleave	select
	dblclick	keypress	mousemove	submit
	error		keyup		mouseout	unload
	focus		load		mouseover


//-----triggerHandler()模拟用户行为的另一个方法(它与trigger有四个区别)
	//$('input').click(function(){
		alert('模拟用户行为的另一个方法');
	//}).triggerHandler('click');
*/

//-----trigger与triggerHandler的区别
	//一：默认行为的禁止
	//trigger会提交后自动跳转，没有阻止默认行为
	//$('form').trigger('submit');

	//triggerHandler提交后不会跳转，默认行为会被阻止
	//$('form').triggerHandler('submit');

	//如果我们要使用trigger()来模拟用户提交，并阻止事件的默认行为，就要这么写
	$('form').submit(function(e){
	//	e.preventDefault();
	}).trigger('submit');

	//二：triggerHandler()只会影响第一个匹配的元素，而trigger()会影响所有

	/*三：triggerHandler()方法会返回当前事件执行的返回值，如果没有则返回undefined;而tirgger()则返回当前包含事件触发元素的jQuery对象（方便连缀调用）*/
/*
	$('input').click(function(){
		alert('aaaaaa');
	}).trigger('click').css('color','yellow');	//返回jQuery对象可以连缀

	$('input').click(function(){
		alert('triggerHandler()');
		return 123;
	}).triggerHandler('click');	//返回return值或undefined 都不可连缀
*/

	/*四：trigger()在创建事件的时候，会冒泡，但这种冒泡是自定义事件才能体现出来，是jQuery扩展于DOM的机制，并非DOM特性，而triggerHandler()不会冒泡 */

	$('div').bind('myEvent',function(){
		alert('自定义事件');
	});
	//$('.d3').trigger('myEvent');	//trigger在多层相同元素，指定上层时会冒泡

	//$('.d3').triggerHandler('myEvent');	//triggerHandler()不会冒泡


//-----命名空间： 
	/* 有时我们想对事件进行移除，但对于同名元素绑定的事件移出往往比较麻烦，这个时候，可以使用事件的命名空间解决 */

	$('input').bind('click.aaa',function(){	//'click.aaa' 中的.aaa就是区别每个事件的命名
		alert('aaa');	
	});
	$('input').bind('click.bbb',function(){
		alert('bbb');
	});
	$('input').bind('mouseover.aaa',function(){
		alert('mouseover');
	});

//-----移除一个指定类型且指定命名的事件
	//$('input').unbind('click.aaa');	

//-----移除所有指定命名的事件
	$('input').unbind('.aaa');	
});



html页面
<script src='jquery-1.11.1.js'></script>
<script src='a.js'></script>
<body>
	<input type='button' value='按钮'/>
	<div class='d1'>
		<div class='d2'>
			<div class='d3'>
				div
			</div>
		</div>
	</div>
</body>








	第21课 高级事件（中）

事件委托：
	什么是事件委托？用现实中的理解就是：有100个学生同时在某天中午接到快递，但这100个学生不可能同时站在学校门口等，那么都会委托门卫去收取，然后再逐个交给学生。而在jQuery中，我们通过事件冒泡的特性，让子元素绑定的事件冒泡到父元素（或祖先元素）上，然后再进行相关处理即可。


$(function(){
/*
	//bind绑定了三个button事件
	$(':button').bind('click',function(){
	//	alert('事件不委托');	
	});
	
//-----live绑定的是document,而非button(1.4.3后移除了)
	//所以不管有多少个button,永远只会绑定一次事件
	$(':button').live('click',function(){
	//	alert('委托事件');
	});

//-----bind无法给动态生成的元素绑定事件
	$(':submit').bind('click',function(){
	//	$(this).clone().appendTo('#box');
	});
*/

//-----live可以绑定动态生成的事件
	/* live绑定在document上，而点击button其实是冒泡到document上，并且点击document的时候，需要验证 event.type 和 event.target才能触发 */
	$(':submit').live('click',function(){
	//	$(this).clone().appendTo('#box');
	});
//-----live 不支持连缀调用
	//这样是不可以的
	$(':submit').eq(0).live('click',function(){
	//	$(this).clone().appendTo('#box');
	});


//-----die() 移除事件（1.4.3以后删除了，等同于unbind()）
	$('input').live('click',function(){
	//	$(this).clone().appendTo('#box');
	});
	//$('input').die('click');

//----克隆事件与委托事件的区别
	//clone(true)会产生很多冗余这是一个复制事件，不是委托事件
	$(':submit').bind('click',function(){
	//	$(this).clone(true).appendTo('#box');
	});

	$(':button').live('click',function(){
	//	$('<input type="button" value="按钮" />').appendTo('#box');
	});


//-----delegate()替代 live的方法  (它绑定的不是document,而是父元素)
	//此方法需传三个参数：1，目标元素(标签名或类名，Id名) 2,事件名称 3,function
	
	$('#box').delegate(':submit','click',function(){
		$(this).clone().appendTo('#box');
	});
	//live 语义不清晰，由于他没有指定绑定了谁，所以不清晰
	//delegate 主义清晰，绑定谁，谁就冒泡的底层元素


//-----undelegate() 移除delegate的方法
	$('#box').undelegate('click');


//-----live()和delegate()和bind()的区别
	/* 这三种方法一样都是事件绑定，那么区别也很明显，用途上遵循两个原则：1，在DOM中很多元素绑定相同事件时；2，在DOM中尚不存在即将生成的元素绑定事件时；我们推荐使用事件委托的绑定方式，否则推荐使用bind()的普通绑定。

});




html页面
<script src='jquery-1.11.1.js'></script>
<script src='migrate.js'></script>
<script src='a.js'></script>
<body>
	<div id='box' style='width:200px;height:200px;background:green'>
		<input type='button' value='按钮' class='one'/>
		<input type='button' value='按钮' class='one'/>
		<input type='button' value='按钮' class='one'/><br><br>
		<input type='submit' value='提交'/>
	</div>
</body>













	第22课 高级事件 - on, off 和one

	jQuery 不但封装了大量常用的事件处理，还提供了不少高级事件方便开发者使用，比如模拟用户触发事件，事件委托事件，和统一整合的on和off,以及仅执行一次的one方法，这些方法大大降低了开发者难度，提升了开始者的开发体验。

	on,off,one
	目前绑定事件和解绑的方法共有三组六个，由于这三组的共存有可能会造成一定的混乱，为此jQuery1.7以后推出了on(),off()方法彻底摒弃了前面三组。


$(function){

-----事件绑定及解绑的六种普通方法

	1	普通绑定 bind()
	2	普通解绑 unbind()
	3	事件委托 live()
	4	事件委托 delegate()
	5 	解绑委托 die()
	5 	解绑委托 undelegate()

//-----新绑定及解绑方法 on(),  off()
	
	$(':button').on('click',function(){
		alert('新绑定方法on');
	});

//-----on()方法也可以添加额外数据 
	
	$(':button').on('click',123,function(e){
		alert(e.data);		//额外数值
	});
	$('a').on('mouseover',[1,2,'abc'],function(e){
		alert(e.data);		//额外数组
		alert(e.data[2]);
	});
	$('div').on('mouseover',{'name':'wang'},function(e){
		alert(e.data.name);	//额外对象
	});

//-----on()方法同时绑定多个事件(两种方式)
	//方式一
	$(':button').on('mouseover mouseout',function(){
	//	alert('on()方法同时绑定移入，移出多个事件');
	});

	//方式二
	$(':button').on({
		mouseover:function(){
			alert('移入');
		},
		mouseout:function(){
			alert('移出');
		}
	});

//-----on()方法中同时阻止默认和冒泡行为的两种方式
	//方式一，当函数中有其它内容时用此方法
	$('form').on('submit',function(){
	//	return false;
	});
	
	//方式二，当函数中无其它内容内返回false时用此方法
	$('form').on('submit',false);

//-----on()方法中阻止默认行为
	$('form').on('submit',function(e){
		e.preventDefault();
	});

//-----on()方法中阻止冒泡行为

	$('div').on('click',function(){
		alert('a');
	});
	$('form').on('click',function(e){
		e.stopPropagation();
		alert('sub');
	});

//-----off()移除绑定事件
	$(':button').on('click',function(){
		alert('aaaa');
	});


	//$(':button').off('click');


//-----最新版移除绑定事件的函数
	function fn1(){
		alert('aaaaaa');
	}
	function fn2(){
		alert('bbbbbbb');
	}
	$(':button').on('click',fn1);	

	$(':button').off('click'.fn);

//-----off()新版本移除命名空间
	$(':button').on('click.a',function(){
		alert('aaaaaa');
	});
	$(':button').on('click.b',function(){
		alert('bbbbb');
	});

	$(':button').off('click.b');


//-----on()的事件委托方法
	$('#box').on('click',':button',function(){
		$(this).clone().appendTo('#box');
	});

//-----off() 移除事件委托
	$('#box').off('click',':button15:08 2014-10-23');

//-----one()仅一次触发事件
	$(':button').one('click',function(){
		alert('one()仅触发一次事件');
	});

//-----one()仅一次触发委托事件
	$('#box').one('click',':button',function(){
		$(this).clone().appendTo('#box');
	});
});




html页面
<script src='jquery-1.11.1.js'></script>
<script src='migrate.js'></script>
<script src='a.js'></script>
<body>
	<div id='box' style='width:200px;height:200px;background:green'>
	<form action='1.html'>
		<input type='button' value='按钮' class='one'/>
		<input type='button' value='按钮' class='one'/>
		<input type='button' value='按钮' class='one'/><br><br>
		<input type='submit' value='提交'/>
	</form>
	</div>
</body>











	第23课	动画效果

$(function(){
/*
学习要点：
	1 显示，隐藏
	2 浮动，卷动
	3 淡入，淡出
	4 自定义动画
	5 列队动画方法
	6 动画相关方法
	7 动画全局属性


一：jQuery中显示方法为： show(), 隐藏方法为: hide(),在无参数的时候只是硬性的显示和隐藏内容。
	1, show(),hide() 可以传两个参数，一个是速度，另一个是回调函数

//-----show()显示方法和 hide() 隐藏方法

	$(':button').eq(0).on('click',function(){
		$('#box').show();
	});
	$(':button').eq(1).on('click',function(){
		$('#box').hide();
	});
	


//-----show(),hide() 加速度参数
	$(':button').eq(0).on('click',function(){
		$('#box').show(1000);
	});
	$(':button').eq(1).on('click',function(){
		$('#box').hide(1000);
	});



//-----当show(),hide()使用在内联元素上时，会先将该元素转成区块元素
	// 内联元素：如span ,a ,u ,i 等，不占用一行，不会自动换行的元素
	// 区块元素：如 div  , p  等占用一行，会自动换行的元素。
	$(':button').eq(1).on('click',function(){
		$('span').hide(1000);
	});
	$(':button').eq(0).on('click',function(){
		$('span').show(1000);
	});



//-----show(),hide()的三种速度预设值 slow,normal,fast
	//slow-600,norma-400,fast-200
	$(':button').eq(1).on('click',function(){
		$('#box').hide('slow');
		$('span').hide('normal');
		$('div.one').hide('fast');
	});
	$(':button').eq(0).on('click',function(){
		$('#box').show('fast');
		$('span').show('normal');
		$('div.one').show('slow');
	});


//-----当show(),hide()方法速度参数错误或为空时的默认速度为400毫秒
	$(':button').eq(1).on('click',function(){
		$('#box').hide('sdfsdf');
		$('div.one').hide('');
	});



//-----使用show(),hide()的回调函数，可以实现列队效果
	//显示或隐藏后弹出提示框
	$(':button').eq(1).on('click',function(){
		$('#box').hide(1000,function(){
			alert('隐藏完毕');
		});
	});
	$(':button').eq(0).on('click',function(){
		$('#box').show(1000,function(){
			alert('显示完毕');
		});
	});

//-----同步动画，多个区块同时显示或隐藏
	$(':button').eq(1).on('click',function(){
		$('.text').hide('slow');
	});
	$(':button').eq(0).on('click',function(){
		$('.text').show('fast');
	});


//-----列队动画的两种方法
	//一：普通方法	
	$(':button').eq(1).click(function(){
		$('.text').eq(0).hide('slow',function(){
			$('.text').eq(1).hide('slow',function(){
				$('.text').eq(2).hide('slow',function(){
					$('.text').eq(3).hide('slow');
				});	
			});
		});
	});
	$(':button').eq(0).click(function(){
		$('.text').eq(0).show('slow',function(){
			$('.text').eq(1).show('normal',function(){
				$('.text').eq(2).show('fast',function(){
					$('.text').eq(3).show('slow');
				});	
			});
		});
	});

	//二：递归自调用
	$(':button').eq(1).click(function(){
		$('.text').last().hide('fast',function test(){
			$(this).prev().hide('fast',test);
		});
	});
	$(':button').eq(0).click(function(){
		$('.text').first().show('fast',function test(){
			$(this).next().show('fast',test);
		});
	});
	



//-----toggle() 切换显示与隐藏
	$('.toggle').click(function(){
		$('#box').toggle('slow');
	});



//-----向下渐显slideDown，向上渐消失slideUp，渐变的切换 slideToggle

	$('.up').click(function(){
		$('#box').slideUp(3000);
		$('.one').slideUp('slow');
	});

	$('.down').click(function(){
		$('#box').slideDown('slow');
		$('.one').slideDown(3000);
	});
	
	$('.toggle').click(function(){
		$('#box').slideToggle('fast');
	});


//-----淡入fadeIn,淡出fadeOut,淡入出的切换fadeToggle
	$('.out').click(function(){
		$('#box').fadeOut('slow');
	});
	$('.in').click(function(){
		$('#box').fadeIn('fast');
	});

	$('.toggle').click(function(){
		$('#box').fadeToggle('normal');
	});
//-----fadeTo使透明度到百分比
	$('.to').click(function(){
		$('#box').fadeTo('slow',0.5);
	});



//-----无限循环切换元素的显示和隐藏
	$('.to').click(function(){
		$('#box').fadeTo('slow',0.5,function t(){
			$(this).toggle(t)
		});
	});

*/
});


html页面
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
	<script src='jquery-1.11.1.js'></script>
	<script src='a.js'></script>
	<style>
		#box{
			width:100px;
			height:100px;
			background:#ccc;
		}
		.one{
			width:100px;
			height:100px;
			background:#ccc;
		}
		.text{
			font-size:1cm;
			paddin:5px;
			margin-left:5px;
			background:yellow;
			float:left;
		}	
	</style>
</head>
<body>
	<div class='text'>你</div>
	<div class='text'>好</div>
	<div class='text'>吗</div>
	<div class='text'>?</div>
	<input type='button' value='显示'/>
	<input type='button' value='隐藏'/>
	<input type='button' value='切换' class='toggle'/>;
	<input type='button' class='up' value='上'/>
	<input type='button' class='down' value='下'/>
	<input type='button' class='out' value='淡出'/>
	<input type='button' class='in' value='淡入'/>
	<input type='button' class='to' value='透明度到，，'/>
	<div id='box'>
		div
	</div>
	<span class='one'>
		span
	</span>
	<div class='one'></div>
</body>
</html>










	第24课 动画效果

$(function(){
/*	
	//-----animate() 自定义动画-多重动画同步运动效果
	//必传的参数有一个，就是对象的CSS模式键值对，还有两个可选参数速度和回调函数。
	$(':button').click(function(){
		$('div').animate({
			width:'200px',
			height:'200px',
			opacity:'0.5',
			fontSize:'50px'
		});
	});

//-----自定义动画函数的两个可选参数，速度和回调函数
	$(':button').click(function(){
		$('#box').animate({
			width:'300px',
			height:'300px',
			opacity:'0.4',
			fontSize:'50px'
		},2000,function(){
			alert('动画运行完毕');
		});
	});



//-----设置元素的position产生移动动画效果
	$(':button').click(function(){
		$('#box').animate({
			top:'300px',
			left:'300px'
		},5000,function(){
			alert('广告漂浮效果');
		});
	});




//-----动画效果的累加累减速功能
	$(':button').click(function(){
		$('#box').animate({
			left:'+=200px'
		},1000,function(){
			alert('移动了');
		});
	});


//-----实现列队动画（两种方式）
	//1.在回调函数中再执行一个动画。
	//2.通过连缀或顺序来实现列队动画。


	//列队动画-回调函数方式
	
	$(':button').click(function(){
		$('div').animate({
			width:'300px'
		},2000,function(){
			$('div').animate({
				height:'300px'
			},function(){
				$('div').animate({
					opacity:'0.2'
				},function(){
					$('div').animate({
						fontSize:'1cm'
					});
				});
			});
		});
	});

	// 列队动画-连缀或顺序方式（需同一个元素）
	//连缀方式 
	$(':button').click(function(){
		$('div').animate({width:'300px'}).animate({height:'300px'}).animate({opacity:0.2}).animate({fontSize:'2cm'});
	});
	或

	$(':button').click(function(){
		$('div').animate({width:'300px'})
			.animate({height:'300px'})
			.animate({opacity:0.1})
			.animate({fontSize:'5cm'});
	});	

	//顺序方式
	$(':button').click(function(){
		$('div').animate({width:'300px'});
		$('div').animate({height:'300px'});
		$('div').animate({opacity:0.5});
		$('div').animate({fontSize:'5cm'});
	});

	
//-----顺序方式操作多个元素时不能列队动画，回调函数方式则可以
	//顺序方式显示的是同步效果
	$(':button').click(function(){
		$('#box').animate({width:'300px'});
		$('#pox').animate({height:'300px'});
		$('#box').animate({opacity:0.5});
		$('#pox').animate({fontSize:'5cm'});
	});

	//回调函数方式显示的是队列效果
	$(':button').click(function(){
		$('#box').animate({width:'300px'},function(){
			$('#pox').animate({height:'300px'},function(){
			$('#box').animate({opacity:0.2},function(){
			$('#pox').animate({fontSize:'3cm'});
		});
		});
		});
	});

//-----css不是动画方法，会默认排列到和第一个动画方法同步
	$(':button').click(function(){
		$('#box').slideUp('slow').slideDown('slow').css('background','yellow');
	});


//-----用函数参数的方式可以解决CSS与动画效果的列队问题，
	$(':button').click(function(){
		$('#box').slideUp('slow').slideDown('slow',function(){
			$(this).css('background','yellow');
		});
	});

//-----解决queue()后无法执行列队动画的两个方法
	$(':button').click(function(){
		$('#box')
			.slideUp('slow')
			.slideDown('slow')
			.queue(function(){
				$(this).css('background','yellow');
			}).hide('slow');
	});

	//注意： 使用queue方法时，其后面的方法就不会调用了，如果想调用则要在queue方法内传入一个next参数，(老版可能不支持)，可用dequeue 解决。如下：
	//next参数解决方法
	$(':button').click(function(){
		$('#box')
			.slideUp('slow')
			.slideDown('slow')
			.queue(function(next){
				$(this).css('background','yellow');
				next();
			}).hide('slow');
	});
	
	//dequeue()解决方法
	$(':button').click(function(){
		$('#box')
			.slideUp('slow')
			.slideDown('slow')
			.queue(function(){
				$(this).css('background','yellow');
				$(this).dequeue();
			}).hide('slow');
	});

//-----queue()也可以使用在顺序方式列队动画中
	$(':button').click(function(){
		$('#box').slideUp('slow');
		$('#box').slideDown('slow');
		$('#box').queue(function(){
			$(this).css('background','yellow');
			$(this).dequeue();
		});
		$('#box').hide('slow');
	});

//-----queue() 也可以得到列队动画的长度个数 (queue()需要传一个参数 -'fx')
	$(':button').click(function(){
		$('#box')
			.slideUp('slow')
			.slideDown('slow')
			.queue(function(){
				$(this).css('background','blue');
				$(this).dequeue();
			})
			.hide('slow',function(){alert(count())});
	});
	function count(){
		return $('#box').queue('fx').length;
	}
*/
//-----clearQueue() 清除队列动画指定项后面的属性

	$(':button').click(function(){
		$('#box')
			.slideUp('slow')
			.slideDown('slow',function(){$(this).clearQueue()})
			.queue(function(){
				$(this).css('background','silver');
				$(this).dequeue();
			})
			.hide('slow');
	});
});




html页面
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
	<script src='jquery-1.11.1.js'></script>
	<script src='a.js'></script>
	<style>
		#box{
			width:100px;
			height:100px;
			background:red;
			position:absolute;
		}
		#pox{
			width:100px;
			height:100px;
			background:green;
			position:absolute;
			top:150px;
		}
		.test{
			padding:5px;
			margin-right:5px;
			background:orange;
			float:left;
			display:none;
		}
	</style>
</head>
<body>
	<input type='button' value='按钮'/>
	<div id='box'>box</div>
	<div id='pox'>pox</div>
</body>
</html>








	第25课 动画效果（下）

$(function(){

/*	
动画相关方法：
	很多时候需要停止正在运行中的动画，jQuery为此提供了一个stop()方法，它有两个可选参数：stop(clearQueue , gotoEnd) , clearQueue传递一个布尔值，代表是否清空未执行完的动画列队，gotoEnd代表是否直接将正执行的动画跳转到末尾状态。


//-----stop() 暂停正在运行中的单独的动画效果
	$('#start').click(function(){
		$('#box').animate({left:'800px'},3000);
	});
	$('#stop').click(function(){	
		$('#box').stop();
	});


//-----无参数的stop()不会停止所有的列队动画
	//无参的stop()不会停止所有的列队动画，只会停止正在运行中的当前的那一项动画效果，而其它的动画效果依然会继续执行。
	$('#start').click(function(){
		$('#box')
			.animate({left:'500px'},1000)
			.animate({top:'300px'},1000)
			.animate({width:'300px'},1000)
			.animate({height:'300px'},1000);
	});
	$('#stop').click(function(){
		$('#box').stop();
	});

//-----带一个参数true的stop()可以暂停全部列队动画
	$('#stopAll').click(function(){
		$('#box').stop(true);
	});
//-----带两个参数true的stop()会让列队动画停止，并直接把元素定位在最的一个动画的位置上
	//注：测试当在第一个动画运行没完成前触发此方法，会直接停止在当前的位置上。
	$('#end').click(function(){
		$('#box').stop(true,true);
	});



//-----delay() 列队动画时间延迟
	$('#start').click(function(){
		$('#box').delay(2000)
			.animate({left:'500px'})
			.animate({top:'300px'}).delay(3000)
			.animate({width:'300px'})
			.animate({height:'300px'});
	});


//-----无限slide 动画上下消失显示运动
	$('#start').click(function(){
	$('#box').slideToggle('slow',function(){
		$(this).slideToggle('slow',arguments.callee);
	});
	});
//-----:animated查找当前运动的动画，并更换其背景色
	$('#find').click(function(){
		$(':animated').stop().css('background','blue');
	});


//-----$.fx.interval 浏览器运行的帧数，默认为13毫秒每帧
//需设置在页面中所有动画效果的前面，不然无效。
	$.fx.interval=300;
	$('#start').click(function(){
		$('#box').toggle(1000);
	});


//-----$.fx.off 关闭动画效果 
	//在低端的浏览器，动画可能会出现各种异常而导致错误，所以jquery用此来关闭动画效果。

	$.fx.off=true; //此方法放在任何位置都可以，会关闭本页所有动画效果
	$('#start').click(function(){
		$('#box').toggle(1000);
	});
*/
//----- animate动画运动参数 swing(缓动),linear(匀速)
	$('#start').click(function(){
		$('#box').animate({left:'800px'},3000,'swing');
		$('#pox').animate({left:'800px'},3000,'linear');
	});
});




html页面

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
	<script src='jquery-1.11.1.js'></script>
	<script src='a.js'></script>
	<style>
		#box{
			width:100px;
			height:100px;
			background:red;
			position:absolute;
		}
		#pox{
			width:100px;
			height:100px;
			background:green;
			position:absolute;
			top:150px;
		}
		.test{
			padding:5px;
			margin-right:5px;
			background:orange;
			float:left;
			display:none;
		}
	</style>
</head>
<body>
	<input type='button' value='动画' id='start' />
	<input type='button' value='停止' id='stop' />
	<input type='button' value='完全停止' id='stopAll'/>
	<input type='button' value='终止' id='end'/>
	<input type='button' value='查找运动的动画' id='find'/>
	<div id='box'>box</div>
	<div id='pox'>pox</div>
</body>
</html>







 
 	第26课  Ajax

	ajax全称为：“Asynchronous JavaScript and XML” (异步JavaScript 和XML),它并不是JavaScript的一种单一技术，而是利用了一系列交互式网页应用相关的技术所形成的结合体，使用ajax，我们可以无刷新状态更新页面，并且实现异步提交，提升了用户体验。
	
学习要点：
	1：ajax概述
	2：load方法
	3：get(),post()
	4：$.getScript()和$.getJSON()
	5：$.ajax()方法
	6：表单序列化
	
-----ajax概述

  ajax这个概念是由 Jesse James Garrett 在2005年发明的。它本身不是单一技术，是一串技术的集合，主要有：
	1. JavaScript,通过用户或其它与浏览器相关事件捕获交互行为。
	2. XMLHttp$equest对象，通过这个对象可以在不中断其它浏览器任务的情况下向服务器发送请求。
	3. 服务器上的文件，以XML,HTML 或JSON格式保存文本数据 
	4. 其它JavaScript. 解释来自服务器的数据（比如PHP从MySQL获取的数据）并将其呈现到网页上。

  由于 ajax包含众多特性，优势与不足也非常明显，它们分别如下。
  优点：
	1.不需要插件支持（一般浏览器且默认开启javaScript即可）。
	2.用户体验极佳（不刷新页面即可获取可更新的数据 ）。
	3.提升WEB程序的性能（在传输数据方面做到按需放松，不必整体提交）。
	4.减轻服务器和带宽的负担（将服务器的一些操作转移到客户端）。

  缺点：
	1.不同版本的浏览器对 XMLHttpRequest对象支持度不足（比如IE5以前）。
	2.前进，后退的功能被破坏（因为Ajax永远在当前页，不会记录前后页面）。
	3.搜索引擎的支持度不够（因为搜索引擎爬虫还不能理解JS引起变化的数据的内容）。
	4.开始调试工具缺乏（相对于其他语言的工具集来说，JS或AJAX调试开发少可怜）


//-----load()方法及其三个参数
	load()方法有三个参数
		url：必选，请求HTML文件的URL地址，参数类型为String.
		data：可选，当用POST方法传输数据的。用此参数。以对象键值对的方式{url:"ycku"}
		callback：可选，成功或失败的回调整函数，参数类型为函数function.此参数有三个属性

//-----http回应状态码说明
	HTTP状态码：	状态字符串				说明 
	200				OK				服务器成功返回了页面
	400				Bad Request		语法错误导致服务器不识别
	401				Unauthorize		语法需要用户认证
	404				Not found		指定的URL在服务器上找不到
	500		Internal Server Error	服务器遇到意外错误，无法完成请求
	503		ServiceUnavailable		由于服务器过载或维护导致无法完成请求。
//-----第三个参数 xhr 是对象 它有四个属性
	responseText	作为响应主体被返回的文本，等同于方法response
	responseXML	如果响应主体内容类型是”text/xml“”application/xml“,则返回包含响应数据的XML DOM文档
	status		响应的HTTP状态
	statusText	HTTP状态的说明,赞同于方法status
		*/

c.js页面
//-----load() 异步加载HTML文件内容
$(function(){
  $(":button").click(function(){
/*
//-----把另一个页面内容加载到本页指定元素内
	$("#box").load("cc.html");

//-----ajax加载指定页面并筛选内容
	//筛选指定内容:这里实际上加载页面的全部内容，只是筛选了需要显示的内容。（以类名的方式筛选）
	//只显示了指定的内容。
	$("#box").load("cc.html .url");	

//-----加载时用GET方式传送数据以便验证
 	原理：在调用cc.php页面时，向其发送一条GET数据键值对url="ycku1" ,当cc.php页面接收到该信息时会作出一个判断，如果GET接收的数据url==ycku1则回应一个数据内容，否则会回应另一个数据内容。  
	$("#box").load("cc.php?url=ycku1");	

//-----第二个参数data 是以POST提交数据的，它以对象键值对的形式来操作
	$("#box").load("cc.php",{
		url:"ycku"
	});
*/

//-----第三个参数 回调函数的使用
	$("#box").load("cc.php",{
		url:"ycku"
	},function(response,status,xhr){
//-----函数参数response 表示从服务器端返回的内容
		//alert(response);
//-----编辑返回的内容
		//$("#box").html(response+123);

//-----函数参数status 表示返回的状态，success 代表成功，error代表失败
		if(status=="success"){
		//	alert("成功");
		}else{
		//	alert("失败，没有返回内容");
		}

//-----函数参数xhr 表示xml,http,requert的对象 它有四个属性
//-----xhr属性responseText	作为响应主体被返回的文本内容 等同于上面的response方法。
		//alert(xhr.responseText);
//-----xhr属性responseXML  返回包含响应数据的XML DOM文档
	//如果响应主体内容类型是”text/xml“”application/xml“
	//,则返回包含响应数据的XML DOM文档
		//alert(xhr.responseXML);	
//-----xhr属性status  响应的HTTP状态
		//alert(xhr.status);
//-----xhr属性statusText  HTTP状态的说明
		alert(xhr.statusText);	
	});
  });
});


c.html页面
<span class="title">百度首页</span>
<span class="url">www.baidu.com</span>


cc.php页面
<?php
/*
//-----用GET数据验证
	if($_GET["url"]=="ycku"){
		echo "动态php页面内容";
	}else{
		echo "木有！";
  	}
*/
//-----用POST数据验证
	if($_POST["url"]=="ycku"){
		echo "POST方式验证成功";
	}else{
		echo "数据不对";
	}
?>











--------------------------------------------------------
	




		第27课 ajax 中
学习重点：
	3：get(),post()
	4：$.getScript()和$.getJSON()


$(function(){

/*
//-----$.get()和$.post()
  	.load()方法是局部方法，因为他需要一个包含元素的jquery对象作为前缀，而$.get()和$.post()是全局方法，无须指定某个元素，对于用途而言，.load()适合做静态文件的异步获取，而对于需要传递参数到服务器页面的，$.get()和$.post()更加合适。
	$.get()方法有四个参数，前面三个参数和.load()一样，多了一个第四个参数type,即服务器返回的内容格式：包括xml,html,script,json,jsonp和text,第一个参数为必选参数，后面三个为可选参数。
	
 	$.get()和$.post()方法的使用基本上一致，他们之间的区别也比较隐晦，基本都是背后的不同，在用户使用上体现不出，具体区别如下：
	1.GET请求是通过URL提交的，而POST请求则是HTTP消息实体提交的。
	2.GET提交有大小限制(2KB),而POST方式不受限制 。
	3.GET方式会被缓存下来，可能有安全性问题，POST没有这个问题
	4.GET方式通过$_GET[]获取，POST方式通过$_POST[]获取

//-----$.get()的使用方法一：$.get("url?a=b",fn) url带问号和函数两个参数的形式
$(":button").click(function(){
  $.get("c.php?url=ycku",function(response,status,xhr){
	$("#box").html(response);
  })
});
//-----$.post("url?a=b",fn) url带问号和函数两个参数的形式是不可用的
$(":button").click(function(){
  $.get("c.php?url=ycku",function(response,status,xhr){
	$("#box").html(response);
  })
});

//-----$.get()的使用方法二：$.get("url","a=b",fn) 三个参数的形式
//通过DATA参数字串键值对的形式传参，其自动转换为问号紧跟传参
//注意在c.php文件中对get和post的设置要正确
$(":button").click(function(){
  $.get("c.php","url=ycku",function(response,status,xhr){
	$("#box").html(response);
  });
});
//-----$.post()的使用方法一：$.post("url","a=b",fn) 三个参数的形式
//通过DATA参数字串键值对的形式传参，其自动转换为问号紧跟传参
//注意在c.php文件中对get和post的设置要正确
$(":button").click(function(){
  $.post("c.php","url=ycku",function(response,status,xhr){
	$("#box").html(response+"post方式");
  });
});


//-----$.get()的使用方法三：$.get("url",{a:"b"},fn) 三个参数的形式
//通过DATA参数对象键值对的形式传参
$(":button").click(function(){
   $.get("c.php",{url:"ycku"},function(response,status,xhr){
	$("#box").html(response+123);
   });
});

//-----$.post()的使用方法二：$.get("url",{a:"b"},fn) 三个参数的形式
//通过DATA参数对象键值对的形式传参
$(":button").click(function(){
  $.post("c.php",{
	url:"ycku"
  },function(response,status,xhr){
	$("#box").html(response+"post对象键值对方式");
});
});


//-----$.get()和$.post()的第四个参数type
//返回的内容格式包括：xml,html,script,json,jsonp和text
//type参数对于php文件返回的数据是纯文本，默认是html或text，所以当响应内容为html和text时可以不用在尾部加html参数。
$(":button").click(function(){
  $.post("c.php",{
	url:"ycku"	
  },function(response,status,xhr){
	$("#box").html(response);
},"html");
//这里加不加html其结果的文本内容都一样
});



//-----get(),post()的参数type会自动识别响应返回的内容格式
//不要强制设置与其不同的格式，如把html,text格式设置为xml或json
$(":button").click(function(){
  $.post("c.php",{
	url:"ycku"	
  },function(response,status,xhr){
	$("#box").html(response);
},"xml");
});


//-----获取xml中指定元素的内容
//-----xml响应体会返回一个DOM对象
//-----响应体为xml时，设置type为html会把xml中连标签所有内容当作纯文本
$(":button").click(function(){
  $.post("ccc.xml",function(response,status,xhr){
  	//获取xml中指定元素的内容
	alert($(response).find("rool").find("url").text());
  //当响应体为xml，而设置type为html是，返回内容将会把xml连带标签的所有内容当作文本来一起返回
  //},"html");
  //当响应体为xml或其它格式时，type不用真写也会自动识别响应体，xml响应体会返回一个DOM对象
  });


//-----json响应体返回一个对象 
//-----获取json响应体的内容
$(":button").click(function(){
  $.post("ccc.json",function(response,status,xhr){
	//json响应体返回一个对象 
	alert(response);
	//获取json响应体的内容
	alert(response[0].url);
  })
});

*/
//-----$.getScript()和$.getJSON()
/*	jquery提供了一组用于特定异步加载的方法：$.getScript(),用于加载特定的JS文件；$.getJSON(),用于专门加载JSON文件.
	有时我们希望能够特定的情况再加载JS文件，而不是一开始把所有JS或JSON文件都加载了，这时候使用$.getScript()方法或$.getJSON()Y方法。
//-----$.getJSON()的使用方法	
$(":button").click(function(){
  $.getJSON("ccc.json",function(response,status,xhr){
	alert(response);
	alert(response[0].url);
  });
});

*/
//-----$.getScript()方法的使用

$(":button").click(function(){
  $.getScript("ccc.js");
});

});




ccc.js页面
alert("只有在被招呼的时候才会加载！");


ccc.json页面
[
	{
		"url":"www.baidu.comssss"
		"a":"aaaa",		
		"b":"bbbb",
		"c":"cccc",
		"d":"dddd",
		"e":"eeee",
		"f":"ffff"
	},
	{
		"a":"aaaa",		
		"b":"bbbb",
		"c":"cccc",
		"d":"dddd",
		"e":"eeee",
		"f":"ffff"
	}
]


ccc.xml页面
<?xml version="1.0"?>
<rool>
	<url>www.baidu.com</url>
</rool>



ccc.php
<?php
/*
	if($_GET["url"]=="ycku"){
		echo "php动态内容页面";
	}else{
		echo "get版木有！";
	}
*/
	if($_POST['url']=="ycku"){
		echo "php页面POST";
	}else{
		echo "post版木有";
	}
?>











































		第28课 ajax (下)
学习要点：
	5：$.ajax()方法
	6：表单序列化

	
//-----$.ajax()方法的使用
$("form input[type=button]").click(function(){
  $.ajax({
    type:"post",
    url:"c.php",
    data:{
	url:"ycku"
    },
    success:function(response,status,xhr){
	$("#box").html(response+"=ajax方法实现");
    }
  });
});

//-----表单序列化 （文本）
	ajax用的最多的地主莫过于表单操作，而传统的表单操作是通过submit提交将数据传输到服务器端，如果使用ajax异步处理的话，我们需要将每个表单元素逐个获取才方能提交，这样工作效率就大大降低。
	使用表单序列化方法serialize(),会智能的获取指定表单内的所有元素，这样，在面对大量表单元素时，会把表单元素内容序列化为字符串，然后再使用ajax请求。 

//-----ajax 针对表单提交的普通方式
表单元素特别多的情况下，写起来非常麻烦，容易出错
复制提交的JS内容时，data属性需要修改的非常多。


$("form input[type=button]").click(function(){
  $.ajax({
    type:"post",
    url:"e.php",
    data:{
	user:$("form input[name=user]").val(),
	email:$("form input[name=email]").val(),
    },
    success:function(response,status,xhr){
	  $("#box").html(response);
        }
  });
});
//-----表单序列化 $("").serialize()
$("form input[type=button]").click(function(){
  
  $.ajax({
    type:"post",
    url:"e.php",
    data:$("form").serialize(),
    success:function(response,status,xhr){
	$("#box").html(response);
    }
  });
});

//-----序列化serialize()会得到字符串形式的键值对，并且对URL进行编码
alert($("form").serialize());



//-----.serialize()方法可以直接获取单选复选和下拉列表等内容
//-----使用序列化得到单选或多选中的元素内容
//-----解码序列化后被编码的内容
$("form input[name=sex]").click(function(){
  //serialize()后的数据会被编码，需要解码
  $("#box").html($(this).serialize());
 
  //解码序列化的内容
  $("#box").html(decodeURIComponent($(this).serialize()));  
});


//-----.serialize()序列化方法可以把数据生成键值对的json对象
//-----转换JSON数据，并将其数据显示在页面上	
//-----接收任何数据的方法

$("form input[name=sex]").click(function(){
  //接收任何数据的方法
  //console.log($(this).serializeArray());

  //转换JSON数据，并将其数据显示在页面上
  var json = $(this).serializeArray();
  $("#box").html(json[0].name+"="+json[0].value);
});


//-----初始化重复的属性

$("form input[type=button]").click(function(){
  $.ajaxSetup({
    type:"post",
    url:"e.php",
    data:{
	user:$("form input[name=user]").val(),
	email:$("form input[name=email]").val()
    },
  });

  $.ajax({
    success:function(response,status,xhr){
	$("#box").html(response+2);
    }
  });
});

//-----使用$.param()将对象形式的键值对转为URL地址的字符串键值对
	注意：使用$.param()将对象形式的键值对转为URL地址的字符串键值对，可以更加稳定准确的传递表单内容，因为有时程序对于复杂的序列化解析能力有限，所以直接传递object对象要谨慎。



//-----对像方式的键值对返回的是一个对象
alert({
  user:$("form input[name=user]").val(),
  email:$("form input[name=email]").val()
});

//-----$.param()解析对象的键值对，转为数据
alert($.param({
  user:$("form input[name=user]").val(),
  email:$("form input[name=email]").val()
}));


$("form input[type=button]").click(function(){
  $.ajax({
    type:"post",
    url:"e.php",
    data:$.param({
	user:$("form input[name=user]").val(),
	email:$("form input[name=email]").val()
    }),
    success:function(response,status,xhr){
	$("#box").html(response+111);
    }
  });
});

























		第29课 ajax 进阶

$(function(){

/*
学习要点：
	1，加载请求
	2，错误处理
	3，请求全局事件
	4，JSON 和 JSONP


//-----加载请求：（文本）
	在ajax异步发送请求时，遇到网速较慢的情况，就会出现请求时间较长的问题。而超过一定时间的请求，用户就会变得不再耐烦而关闭页面。而如果在请求期间能给用户一些提示，比如：“正在努力加载中。。。”，那么相同的请求时间会让用户体验更加的好一些，
	jquery提供了两个全局事件，ajaxStart()和ajaxStop().这两个全局事件，只要用户触发了ajax,请求开始时（未完成其它请求时）激活ajaxStart(),请求结束时(所有请求都结束了)激活ajaxStop().

//-----显示和隐藏请求加载的提示信息ajaxStart() ajaxStop()
//-----设置请求超时 timeout:500
//-----取消全局事件 global:false


$("form input[type=button]").click(function(){
  $.ajax({
	type:"post",
	url:"http://www.facebwer23oosdsdfsdk.com/f.php",
	data:$("form").serialize(),
	success:function(response,status,xhr){
		$("#box").html(response);
	}
	timeout:3000;
	global:false;
  });
});

$(document).ajaxStart(function(){
	$(".loading").show();
}).ajaxStop(function(){
	$(".loading").hide();
  });


//-----请求加载的错误处理：（文本）
	ajax 异步提交时，不可能所有情况都是成功完成的，也有因为代码异步文件错误，网络错误导致提交失败的，这时，我们应该把错误报告出来，提醒用户重新提交或提示开始者进行修补。
	在之前高层封装中是没有回调错误处理的，比如$.get(),$.post()和.load()。所以，早期的方法通过全局ajaxError()事件方法以来返回错误信息。 而在jquery1.5之后，可以通过连缀处理使用局部error()方法即可，而对于$.ajax()方法，不但可以用这两种方法，还有自己的属性方法error:function(){}.

//-----第一种错误处理方式 
$("form input[type=button]").click(function(){
  $.ajax({
	type:"post",
	url:"f1.php",
	data:$("form").serialize(),
	success:function(response,status,xhr){
	  $("#box").html(response);
	},
	//timeout:1000
	//global:false
	error:function(xhr,errorText,errorType){
		//alert("错误！");
		//alert(errorText+"="+errorType);
		//alert(xhr.status+":"+xhr.statusText);

	}
  });
//-----第二种错误处理方法-连缀方式
  $.post("f1.php").error(function(xhr,errorText,errorType){
	alert("第二种错误处理方法-连缀");
	alert(errorText+"="+errorType);
	alert(xhr.status+":"+xhr.statusText);
  });
});
$(document).ajaxStart(function(){
	$(".loading").show();
}).ajaxStop(function(){
	$(".loading").hide();
});


//-----第三种错误处理方式.ajaxError()全局事件提示错误
$(":button").click(function(){
	$.post("f1.php");
});
$(document).ajaxError(function(event,xhr,settings,info){
//-----获取事件的类型
	//alert(event.type);
//-----事件当前的目标对象
	//alert(event.target);
//-----查看事件对象都有哪些属性
	for(var i in event){
	//	document.write(i+"<br/>");
	}

//------settings 得到的是对象及查看其所有属性
	alert(settings);
	for(var s in settings){
		//document.write(s+"<br/>");
	}
	
//------获取当前发生错误的路径 
	alert(settings.url);
//------获取当前传输用的是什么类型（post,get）
	alert(settings.type);
//-----获取错误类型 （not found）
	alert(info);
});

//-----	六个全局的请求事件（文本）
	jquery对于ajax操作提供了很多全局事件方法，ajaxStart() , ajaxStop() , ajaxError()等事件方法。他们都属于请求时触发的全局事件，除了这些，还有一些其他全局事件；
	.ajaxSuccess(),对应一个局部方法： .success() ,请求成功完成时执行
	.ajaxComplete(),对应一个局部方法：.complete(),请求完成后注册一个回调函数。
	.ajaxSend(),没有对应的局部方法，只有属性beforeSend,请求发送之前要绑定的函数。

//-----请求事件的全局形式
$(":button").click(function(){
  //当请求发生错误时，下面的顺序就会不同
  $.post("f1.php",$("form").serialize());
});
$(document).ajaxSend(function(){
  alert("发送请求之前执行");
}).ajaxComplete(function(){
  alert("不管成功与否，请求完成后执行");
}).ajaxSuccess(function(){
  alert("请求成功后执行");
}).ajaxError(function(){
  alert("请求失败后执行");
});


//-----请求事件的连缀方式
$(":button").click(function(){
  $.post("f1.php",$("form").serialize()).success(function(){
	alert("请求成功后执行");
  }).complete(function(){
	alert("不论成功与否，请求完成后执行");
  }).error(function(){
	alert("请求失败后执行");	
  });
});
*/


//-----请求事件的属方式
$(":button").click(function(){
  $.ajax({
	type:"post",
	url:"f1.php",
	data:$("form").serialize(),
	success:function(){
	  alert("请求成功后执行");
	},
	complete:function(){
	  alert("请求完成后执行");
	},
	beforeSend:function(){
	  alert("请求前执行");
	},
	error:function(){
	  alert("错误时执行");
	}
	
  });
});


});



cc.php页面
<?php
	echo $_POST["user"]."-".$_POST["email"];
?>

















$(function(){
/*
		//第30课 ajax 进阶
学习要点：
	4，JSON 和 JSONP
	5，jqXHR对象


//-----dataType设置会影响xml,json的response结果类型是纯文本还是对象
$("form input[type=button]").click(function(){
 $.ajax({
	type:"post",
	url:"a.json",
	dataType:"html",//当文件类型是XML,JSAON时，如果把数据类型强制设置成为HTML，那么下面的response结果将会把XML,JSON文件中容包括节点标签的全部内容以纯文本的形式显示。否则response返回的则是xml,json的对象 。
	success:function(response,status,xhr){
		alert(response);
	}
 });
});


//-----如何获取php文件中包含转码后的json数据及dataType 设置数据类型

$(":button").click(function(){
  $.ajax({
	type:"post",
	url:"jsonp.php",//此PHP文件中以把数组数据编码成为josn数据	
	dataType:"json",//将数据类型设置为json类型
	success:function(response,status,xhr){
		alert(response.c);
	}
	//总结：当文件类型是php时，response结果调取的却是php文件中被转码的json数据时。显示出来的就是纯文本形式，（因为url文件为php，则默认数据类型为html或text）,如果想把php文件中的json数据以json对象方式显示出来，那么就需要把数据类型设置为json类型-dataType:"json".

  });
});



//-----JSON 和 JSONP (文本)
	如果在同一个域下，$.sjax()方法只要设置dataType属性即可加载JSON文件。而在非同域下，可以使用JSONP,但也是有条件的。
	如果想跨域操作的话，我们就必须使用JSONP,JSONP(JSON with Padding)是一个非官方协议，它允许在服务器端集成Script tsgs 返回至客户端,通过javascript callback的形式实现跨域的访问（这仅仅是JSONP简单的实现 形式）。




//普通方法无法获取跨域的JSON数据
$(":button").click(function(){
  $.ajax({
	type:"post",
	url:"http://172.21.216.3/jsonp.php", //跨域获取
	dataType:"json",
	success:function(response,status,xhr){
		alert(response);
		alert(response.a);
	}
  });
});


//-----本地获取php文件中JSON数据的两种方式	

	//ajax方式获取本地php文件内的JSON数据
$(":button").click(function(){
  $.ajax({
	type:"post",
	url:"jsonp.php",
	dataType:"json",
	success:function(response,status,xhr){
		alert(response);
		alert(response.a);
	}
  });
});

	//getJSON方式获取本地文件内的JSON数据
$(":button").click(function(){
	$.getJSON("jsonp2.php?callback=?",function(response){
		alert(response.a);
		console.log(response);
	});
});

//-----跨域获取php文件中JSON数据的两种方式
	//$.getJSON()方式
$(":button").click(function(){
        //注意！远程和本地调取时的路径是完全不同的，远程要从要目录调用，本地如果同级的话可直接调用。
	$.getJSON("http://172.21.216.3/jquery/jsonp2.php?callback=?",function(response){
		alert(response.a);
		console.log(response);
	});
});
	

	//ajax()方式
$(":button").click(function(){
	$.ajax({
		type:"get",
		url:"jsonp2.php?callback=?",	
		dataType:"json",
		success:function(response){
			alert(response.a);
			console.log(response);
		}
	});
});





//-----跨域获取json数据的简便方式 jsonp


$(":button").click(function(){
	$.ajax({
		type:"get",
		url:"jsonp2.php?",
		dataType:"jsonp",
		success:function(response){
			alert(response.a);
			console.log(response);
		}
	});
});
	


//-----jqXHR 和 done() 的用法及优点。
	jqXHR 代表 $.ajax()返回的对象：
	使用jqXHR的连缀方式比$.ajax()的属性方式有三大好处；
	1，可连缀操作，可读性大大提高
	2，可以多次执行同一个回调函数 
	3，为多个操作指定回调函数。

//ajax中普通方法的response 无法扩展编辑
$(":button").click(function(){
	$.ajax({
		type:"post",
		url:"a.php",
		data:$("form").serialize(),
		success:function(response,status,xhr){
			alert(response+"aaa");
		},
		success:function(response,status,xhr){
			alert(response+"bbb");
		}
	});
});




$(":button").click(function(){
	$.jqXHR = $.ajax({
			type:"post",
			url:"a.php",
			data:$("form").serialize()	
		});
//-----done等同于success 的功能
	//$.jqXHR.success(function(response){
	$.jqXHR.done(function(response){
		alert(response+1);	
//-----done可以连缀
	}).done(function(response){
		alert(response+2);
	});	
//-----done在编辑response时的扩展性好，不会覆盖以前的内容。
	$.jqXHR.done(function(response){
		alert(response+3);
	});
});




//-----同时处理多个jqXHR对象数据（普，简两种方式）
//普通方式 
$(":button").click(function(){
	$.jqXHR = $.ajax({url:"t1.php"});
	$.jqXHR2 = $.ajax({url:"t2.php"});
	
	$.jqXHR.done(function(response){
		alert(response);
	});
	$.jqXHR2.done(function(response){
		alert(response);
	});
});


*/
//简便方式
$(":button").click(function(){
	var jqXHR = $.ajax({url:"t1.php"});
	var jqXHR2 = $.ajax({url:"t2.php"});
	
	$.when(jqXHR,jqXHR2).done(function(t1,t2){
		alert(t1[0]);
		alert(t2[0]);
	});

});


});



json.php页面
<?php
	$a = array('a'=>1,"b"=>2,"c"=>3);
	$_result=json_encode($a);
	echo $_result;
?>


json2.php页面
<?php
	//这个文件是远程端：
	$arr=array("a"=>1,"b"=>2,"c"=>3);
	$_result=json_encode($arr);
	$_callback=$_GET["callback"];
	echo $_callback."($_result)";
?>

t1.php页面
<?php
	echo "test1.php";
?>

t2.php页面
<?php
	echo "test2.php";
?>

a.json页面
[
	{
		"a":"aaa",
		"b":"bbb",
		"c":"ccc"
	}
]

a.php页面
<?php 
	echo $_POST["user"]."====".$_POST['email'];
?>


































$(function(){
		//第31课工具函数
/*
	学习要点：
		1，字符操作
		2，数组和对象操作
		3，测试操作
		4，URL操作
		5，浏览器检测
		6，其他操作
//-----字符串操作,去除字串左右的空格 $.trim()
	在jquery中，字符串的工具函数只有一个，就是去除字符串左右空格的工具函数：$.trim()

$(document).click(function(){
	var str= "             jquery               ";
	alert(str);
	alert($.trim(str));
});

//-----数组和对象操作
	//jquery 为处理数组和对象提供了一些工具函数 ，这些函数可以便利的给数组或对象进行遍历，筛选，搜索等操作。 
//-----$.each()遍历数组
$(document).click(function(){
	var arr = ["张三","李四","王五","马六"];
	$.each(arr,function(index,value){
		$("#box").html($("#box").html()+(index+1)+"=="+value+"<br>");
	}); 
});

//-----$.each()遍历对象
//遍历window对象
$.each(window,function(name,fn){
	$("#box").html($("#box").html()+name+"<br>")
});



//遍历ajax()对象
$.each($.ajax(),function(name,fn){
	$("#box").html($("#box").html()+name+"<br>");
});

//遍历ajax()对象的fn
$.each($.ajax(),function(name,fn){
	$("#box").html($("#box").html()+fn+"<br><br>");
});

//-----$.grep 数组的筛选
var arr=[4,2,6,9,11,25,38,59];
var greparr = $.grep(arr,function(element,index){
	return index < 7 && element < 22;
	//注释：返回下标小于7 ，与 值小于22的、这里按理应返回一个bool值，但是这里返回的是一个数组。
});
alert(greparr);


//-----$.map()修改数据 
var arr=[4,2,6,9,11,25,38,59];
var maparr= $.map(arr,function(element,index){
	if(index <5 && element < 9){
		return element+1;
	}
});
alert(maparr);



//-----$.inArray()获取指定元素的下标
var arr=[4,2,6,9,11,25,38,59];
alert($.inArray(11,arr));
alert($.inArray(38,arr));



//-----$.merge()合并两个数组
var arr1=[2,4,6,7,32,83];
var arr2=[299,388];
alert($.merge(arr1,arr2));




//-----$.unique()删除重复的DOM元素
//-----获取所有的指定元素将其放进一个数组
var arr1=[2,4,6,45,234,64,234];
var arr2=[2,4,6,83,787,3324];
var arr3=$.merge(arr1,arr2);
alert(arr3);
alert($.unique(arr3));
//这里注意，在删除相同数值时因为浏览器的不同，效果会不同，有的浏览器去除不了。


//获取所有的指定元素将其放进一个数组
var divs=$("div").get();
divs=divs.concat($(".box").get());//将.box的所有元素加入到divs数组里。
alert(divs.length); //获取数组divs的长度个数。
alert($(divs).size());//size()是jquery的方法，所以要以$(divs),的方式才有效。
//删除数组中相同的DOM元素
$.unique(divs);
alert($(divs).size());
*/

//-----$.toArray()合并多个DOM组成元素

alert($("li").toArray().length);
alert($($("li").toArray()).size()); //以jquery对象的方式


});



html页面
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title>ajax</title>
	<script src='jquery-1.11.1.js'></script>
	<script src='a.js'></script>
	<style>
	</style>
</head>
<body>
	<div></div>
	<div></div>
	<div class="box"></div>
	<div class="box"></div>
	<div class="box"></div>
	<div></div>
<ul>
	<li>1</li>
	<li>2</li>
	<li>3</li>
</ul>
</body>
</html>


























$(function(){
		//第32课 工具函数 (下)
/*
	学习要点：
		3，测试操作
		4，URL操作
		5，浏览器检测
		6，其它操作

//=====测试操作（文本）
	在jquery中，数据有着各种类型和状态。有时，我们希望能通过判断数据的类型和状态做相就的操作。jquery提供了五级测试用的工具函数。

   函数名			说明 
$.isArray(obj)			判断是否为数组对象，是返回true
$.isFunction(obj)		判断是否为函数，是返回true
$.isEmptyObject(obj)		判断是否为空对象，是返回true
$.isPlainObject(obj)		判断是否为纯粹对象，是返回true
$.contains(obj)			判断DOM节点是否含有另一个DOM节点，是返回true
$.type(data)			判断数据类型
$.isNumeric(data)		判断数据是否为数值
$.isWindow(data)		判断数据是否为window对象







//-----$.isArray() 判断目标是否为一个数组
var arr=[1,2,3];
var arr2="123";
alert($.isArray(arr));
alert($.isArray(arr2));



//-----$.isFunction() 判断是否为一个函数
var fn=function(){};
alert($.isFunction(fn));


//-----$.isEmptyObject() 判断对象是否为空
var obj1={};
var obj2={name:"lee"};
alert($.isEmptyObject(obj1));
alert($.isEmptyObject(obj2));




//-----$.isPlainObject() 判断是否为一个纯粹的对象
//纯粹对象就是用{}或new object 不能传参的对象 

var obj={}; //纯粹的对象 
obj = new Object();  //纯粹的对象
alert(obj);  //显示为object object 是一个对象
alert($.isPlainObject(obj));

obj=window; //
obj=new Object('name');  //传参后会变成一个字串
alert(obj);
alert($.isPlainObject(obj));



//-----$.contains() 判断DOM节点是否包含另一个DOM节点
//注意对象后要有get(0)
alert($.contains($("#box").get(0),$("#pox").get(0)));




//----$.type() 判断数据的类型
var arr=[1,2,3];
var obj={};
var str="1,2,3";
alert($.type(arr));
alert($.type(obj));
alert($.type(str));




//-----$.isNumeric() 判断是否为数值
var num=1.23;
alert($.isNumeric(num));



//-----$.isWindow() 判断是否为window对象
var win=window;
alert($.isWindow(win));






//=====URL操作（文本）
	//URL地址操作，在之前的Ajax章节其实已经讲到过，只有一个方法： $.param(),将对像的键值对转化为URL键值对字符串形式。

//-----$.param()将对象的键值对转换为URL中GET形式的字符串键值对
var obj={
	name:"Lee",
	age:100
}	
alert($.param(obj)); //结果为 name=Lee&age=100  






//=====浏览器测试
	由于在早期的浏览器中，分IE和W3C浏览器，而IE678使用的覆盖率还很高，所以，早期的jquery提供了$.browser工具对象。而现在的jquery以经废弃删除了这个工具对象 ，如果还想使用这个对象来获取浏览器版本型号的信息，可以使用兼容插件。

   属性		$.browser对象属性
webkit		判断webkit浏览器，如果是则为true
mozilla		判断mozilla浏览器，是为true
safari		判断safari浏览器 , 是为true
opera		判断opera浏览器，是为true
msie		判断IE浏览器，是为true
version		获取浏览器版本号


//-----获取IE浏览器版本号。
alert($.browser.msie+":"+$.browser.version);

//-----获取火狐浏览器版本号
//alert($.browser.mozilla+":"+$.browser.version);

//注意：火狐采用的是mozilla引擎，一般就是指火狐；而谷歌Chrome采用的引擎是webkit,一般验证Chrome就用webkit,
//还有一种浏览器检测 ，是对浏览器内容 的检测 。比如，W3C的透明 度为opacity,而IE的透明度为alpha.这个对象是$.support.



//注意：由于jquery越来越放弃低端的浏览器，所以检测功能在未来使用频率也越来越低。所以，$.browser以被废弃删除，而$.support .boxModel检测 W3C或IE盒子也被删除。并且，http://api.jquery.com/jQuery.support/官网也不提供属性列表和解释，给出一个Modemizr第三方小工具来辅佐检测。


//-----$.support.ajax 判断是否能创建ajax
alert($.support.ajax);


//-----$.support.opacity 设置不同浏览器的透明度
//-----通过$.support.opacity 来检测浏览器是IE类还是W3C类

if($.support.opacity==true){  //true为支持W3C
	$("#box").css("opacity",0.5);
}else{
	$("#box").css("filter","alpha(opacity=10)");
}




//-----$.proxy()解决this指向问题
//=====其它操作（文本）
	//jquery提供了一个预备绑定函数上下文工具函数：$.proxy(),这个方法，可以解决诸如外部事件触发调用对象方法时this的指向问题。

//问题原型
var obj={
	name:"Lee",
	test:function(){
		alert(this.name);
	}
};
//obj.test();  //如此直接调用上面的对象中的函数，this不会混乱
//$("#box").click(obj.test); //但是在对象之前加上一个事件触发对象，那么this指向就混乱了

//解决方法一（不推荐）

var obj={
	name:"Wang",
	test:function(){
		var _this=obj;  //如此这样锁定this this指向就不会混乱。
		alert(_this.name);
	}
}
obj.test();
$("#box").click(obj.test);

*/
//解决方法二（推荐）
//-----$.proxy() 调整this指向
var obj={
	name:"Zhang",
	test:function(){
		alert(this.name);
	}
};
obj.test();
$("#box").click($.proxy(obj,"test"));

});
































		第33课 插件
-----插件的使用和案例

jquery 插件官网 jquery.com 可下载相关插件

学习要点：
1，插件概述
2，验证插件
3，自动完成插件
4，自定义插件

-----插件概述：
    插件是以jquery的核心代码为基础，编写出复合一定规范的应用程序，也就是说，插件也是jquery代码，通过js文件引入的方式 植入即可。
    插件的种类很多，主要大致可以分为：UI类，表单及验证类，输入类，特效类，ajax类，滑动类，图形图像类，导航类，综合 工具类，动画类等待。
    引入插件是需要一定步骤，基本如下；
1，必须先引入jquery.js文件，而且在所有插件之前引入。
2，引入插件。
3，引入插件的周边，比如皮肤，中文包等。

-----验证插件：
	validate.js是jquery比较优秀的表单验证插件之一，这个插件有两个js文件，一个是主文件，一个是中文包文件。使用的时候，可以使用min版本，在这里，为了教学，我们未压缩版本。


-----插件使用流程：
第一步：在html页面中引入jquery.js文件
第二步：在html页面中引入validate.js文件
	<script src="jquery-1.11.1.js"></script>
	<script src="jquery.validate.js"></script>
	<script src="messages_zh.js"></script>
	<script src="a.js"></script>
第三步：加载validate
    $("form").validate();  如此即可
第四步：启用插件相关功能 如下：
  必选项	在表单设置 	class="required"
  不小于两位 	在表单设置	minlength="2"	
  以邮箱格式	在表单中设置	class="email"
  以网址格式	在表单中设置 	class="url"
例：
<p>用户名：<input type="text" name="user" class="required" minlength="3" /></p>
<p>邮 箱：<input type="text" name="email" class="required email" /></p>
<p>网 址；<input type="text" name="url" class="url" /></p>
	
第五步：可引用各语言包设置界面语言
    在html页面中引入messages_zh.js中文语言包，并可以进行二次更改封装。

第六步：如引入老版本的功能插件，当前jquery不支持的时候，需要引用老版本migrate.js即可以使用老插件的功能。
	

a.js页面；
$(function(){
	$("form").validate();
});



a.html页面
<html>
<head>
	<script src="jquery-1.11.1.js"></script>
	<script src="jquery.validate.js"></script>
	<script src="messages_zh.js"></script>
	<script src="a.js"></script>
</head>
<body>
<form action="12.html">
	<p>用户名：<input type="text" name="user" class="required" minlength="3" /></p>
	<p>邮 箱：<input type="text" name="email" class="required email" /></p>
	<p>网 址；<input type="text" name="url" class="url" /></p>
	<p><input type="submit" value="提交"/></p>
</form>
</body>
</html>








	












		第34课 插件


-----自定义插件：
	前面我们使用了别人提供好的插件，使用起来非常方便。如果市面上找不到自己满意的插件，并且想自己封装一个插件提供给别人使用，那么就需要自己编写一个jquery插件了。


-----插件的种类：-----全局插件与局部插件
	按照功能分类，插件的形式可以分为三类
	1，封装对象方法的插件：（基于某个DOM元素的jquery对象，局部性）
	2，封装全局函数的插件。（全局性的封装）
	3，选择器插件。（类似与find()）

基本要点：
	经过日积月累的插件开发，开发者逐步约定了一些基本要点，以解决各种因为插件导致的冲突，错误等问题，包括如下。
	1，插件名推荐使用jquery.[插件名].js  , 以免和其他js文件或者库相冲突。
	2，局部对象附加jquery.fn对象上，全局函数附加在jquery上。
	3，插件内部，this指向是当前的局部对象.
	4，可以通过this.each来遍历所有元素。
	5，所有的方法或插件，必须用分号结尾，避免出现问题。
	6，插件应该返回的是jquery 对象，以保证可链式连缀。
	7，避免插件内部使用$,如果要使用，请传递jQuery进去。



html页面：

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title>自定义插件</title>
	<script type="text/javascript" src='jquery-1.11.1.js'></script>
	<script type="text/javascript" src="jquery.nav.js"></script>
	<script src='a.js'></script>
	<style>
		.list{
			list-style:none;
			padding:0;
			font-size:13px;
			margin:50px auto;
			color:#fff;
			width:550px;
		}	
		.list li{
			float:left;
			width:100px;
			line-height:30px;
			text-align:center;
			background:#333;
			cursor:pointer;
		}

		
	</style>
</head>
<body>
<ul class="list">
	<li>导航列表
		<ul class="nav">导航列表1</ul>
		<ul class="nav">导航列表1</ul>
		<ul class="nav">导航列表1</ul>
		<ul class="nav">导航列表1</ul>
		<ul class="nav">导航列表1</ul>
	</li>
	<li>导航列表
		<ul class="nav">导航列表2</ul>
		<ul class="nav">导航列表2</ul>
		<ul class="nav">导航列表2</ul>
		<ul class="nav">导航列表2</ul>
		<ul class="nav">导航列表2</ul>
	</li>

</ul>
<p>1</p><p>1</p>
<ul class="list">
	<li>导航列表
		<ul class="nav">导航列表1</ul>
		<ul class="nav">导航列表1</ul>
		<ul class="nav">导航列表1</ul>
		<ul class="nav">导航列表1</ul>
		<ul class="nav">导航列表1</ul>
	</li>
	<li>导航列表
		<ul class="nav">导航列表2</ul>
		<ul class="nav">导航列表2</ul>
		<ul class="nav">导航列表2</ul>
		<ul class="nav">导航列表2</ul>
		<ul class="nav">导航列表2</ul>
	</li>
</ul>
</body>
</html>

==========================


js页面

$(function(){
	//全局插件
	$.nav();
	//局部插件
	$(".list").eq(0).nav("blue");
	//插件返回的是一个对象
	alert($(".list").eq(0).nav("blue"));
});

============================
-----全局插件与局部插件

jquery.nav.js页面

(function($){
/*
//全局性插件： $.extend()
  $.extend({
    "nav":function(){
	$(".nav").css('display','none');

	$(".nav").parent().hover(function(){
		$(this).find(".nav").slideDown("normal");
	},function(){
		$(this).find(".nav").stop(true).slideUp("normal");
	});
    }
  });


//局部性插件：$.fn.extend()
  $.fn.extend({
    "nav":function(){
	$(this).find(".nav").css('display','none');

	$(this).find(".nav").parent().hover(function(){
		$(this).find(".nav").slideDown("normal");
	},function(){
		$(this).find(".nav").stop(true).slideUp("normal");
	});
    }
  });

*/

//给插件传颜色参数color
  $.fn.extend({
    "nav":function(color){
	$(this).find(".nav").css({
			'display':'none',
			"color":color
		});

	$(this).find(".nav").parent().hover(function(){
		$(this).find(".nav").slideDown("normal");
	},function(){
		$(this).find(".nav").stop(true).slideUp("normal");
	});
	return this;
    }
  });

})(jQuery);



-----this在插件里的区别

  $.fn.extend({
    "nav":function(color){
	//这是的this是插件的方法
	//在插件里的this,经过了一些封装处理，this就是表示jquery对象。
	//而不需要再次使用$()包装
	this.find(".nav").css({
			'display':'none',
			"color":color
		});

	this.find(".nav").parent().hover(function(){
		//这里的$(this)是普通的匿名函数，代表的是DOM对象。
		$(this).find(".nav").slideDown("normal");
	},function(){
		$(this).find(".nav").stop(true).slideUp("normal");
	});
	return this;
    }
  });



















		第35课 知问前端-概述及jquery UI
-----jqueryUI 
jquery UI 的官网是： http://jqueryui.com ,可以下载最新版本。
	
学习要点：
	1，项目介绍
	2，jQuery UI
	3，UI 主题

	知问系统，是一个问答系统，主要功能，即会员提出问题，会员回答问题。目前比较热门的此类网站有：知乎 http://www.zhihu.com , 百度知道 http://zhidao.baidu.com/等。这里我们重点参考“知乎”，来学习一下它采用的前端效果。

-----项目介绍：
-----jQueryUI 
	 我们重点依照“知乎”的架构模式来搭建界面和布局，以及大部分前端功能，而“百度知道”作为辅助功能来确定我们这个项目需要的前端功能。
	以上知名问答站点中，我们可以确认最主要的前端功能：1，弹出对话框；2，前端按钮；3，折叠菜单；4，选项卡切换；5，滑动块；6，日历；7，自动补全；8，拖放；等一系列前端模块。

-----jQueryUI 
	jQuery UI 是以jquery 为基础的开源javascript网页用户界面代码库，包含底层用户交互，动画，特效和可更换主题的可视控件，我们可以直接用它来构建具有很好交互性的WEB应用程序。
	jquery ui 的官网是:http://jqueryui.com/ ,我们下载最新版本的即可，目前本课采用最新版本为：jquery-ui-1.10.3.custom.zip，里面目录如下：
	1，css,包含与jQuery UI相关的CSS文件。
	2，js, 包含jQuery UI相关的javascript文件
	3，Development-bundle,包含多个不同的子目录；demos(jQuery UI示例文件)，docs(jQuery UI 的文档文件)，themes(CSS 主题文件)和ui(jQuery ui 的 javascript文件).

















		第36课 知问前端--创建header区 2

学习要点：
	1，创建界面
	2，引入UI

-----jQueryUI 下载官网 jqueryui.com

-----ico的引用（就是title上的图标）

<link rel="shortcut icon" type="image/x-icon" href="img/a.ico" />


-----dialog(对话框)
在引入相关的jqueryUI和CSS文件后，即可调用dialog.
如点击注册会员后弹出一个注册的对话框

$(".reg_a").click(function(){
	$(".red").dialog(); //引入dialog
});

















		第37课 知问前端-对话框UI 上 3


js页面：

$(function(){
//-----使用UI插件变换按键的样式
	$(".search_button").button();
/*
//-----同时打开两个对话框
	$(".reg").dialog();
	$(".login").dialog();




//-----更改dialog的title和标题背景图片
想修改dialog的哪个样式，就找到相关元素的CSS操作名，然后进行重写冲突后即可。
先利用审查元素等查找元素相关的类名然后对其进行重写，如下：
$(".reg").dialog();
.ui-dialog-title{
	color:red;	重写了字体颜色，
}
		重写了背景图片
.ui-widget-header{
	background:url(bj.png);
}


//-----dialog外观选项(文本)
属性	默认值/类型		说明
title	无/字串		对话框的标题，可以直接设置在DOM元素上
buttons 无/对象 	以对象键值对方式，给dialog添加按钮，键是按钮的名，值是用户点击后调用 的回调函数。



//-----设置dialog标题内容的方法
//-----给dialog中加入按钮的方法
//-----给dialog中加入取消按键
$(".reg").dialog({
//这个优先级要大于html 中的title
    title:"知问注册",  //设置标题
    buttons:{
        "确定":function(){
	    alert("ajax正在提交中.....");
	},
	"取消":function(){
	    $(this).dialog("close");
    }
  },



//-----dialog页面位置选项，设置对话框的坐标
属性		默认值/类型		说明
position	center/字串	设置一个对话框窗口的坐标位置，默认为center,其他设置值为：left top , right top , left bottom  , right bottom (四个角)， top , bottom , left , right (上下时，左右居中，左右时，上下居中),center
 
 
  position:"left top"


//-----dialog大小选项：（文本）
属性		默认值/类型		说明
width		300/数值	对话框的宽度，默认为300，单位是像素
height		auto		对话框的高度，默认为auto
minWidth	150		对话框的最小宽度，默认150
minHeight	150		对话框的最小高度
maxWidth	auto		对话框的最大宽度
maxHeight	auto		对话框的最大高度

//-----设置对话框的高和宽（大小）这里不用带px 默认是像素。
  width:500,
  height:300,
  
//-----框体大小变化最小值
  minWidth:200,
  minHeight:200,

//-----框体大小变化最大值
  maxWidth:700,
  maxHeight:500,



//-----dialog视觉选项，显示或消失的形式
属性		默认值/类型		说明
show		false/布尔值	显示对话框时，默认采用淡入效果。
hide		false/布尔值	关闭对话框时，默认采用淡出效果。


  //show,hide默认为淡入淡出形式
  //	show:true,
  //	hide:true


//-----show()和hide可选特效
特效名	: 说明
blind	: 对话框从顶部显示或消失。
bounce	: 对话框断断续续地显示或消失，垂直运动。
clip	: 对话框从中心垂直地显示或消失。
slide	: 对话框从左边显示或消失。
drop	: 对话框从左边显示或消失，有透明度变化。
fold	: 对话框从左上角显示或消失。
highlight : 对话框显示或消失，伴随着透明度和背景色的变化。
puff	: 对话框从中心开始缩放，显示时“收缩”，消失时“生长”。
scale	: 对话框从中心开始缩放，显示时“生长”，消失时“收缩”。	
pulsate : 对话框以闪烁形式显示或消失。
	//下显，上隐
  //	show:"blind",
  //	hide:"blind",
	
	//颤动显示
//	show:"bounce",
//	hide:"bounce",

	//从中心横轴垂直上下显示消失
//	show:"clip",
//	hide:"clip",

	//从左侧显示消失
//	show:"slide",
//	hide:"slide",

	//左侧显示消失，有透明度变化
//	show:"drop",
//	hide:"drop",

	//以左上角开始显示消失
//	show:"fold",
//	hide:"fold",

	//显示消失，带有透明度和背景色的变化
//	show:"highlight",
//	hide:"highlight",

	//四周向中心显示消失
//	show:"puff",
//	hide:"puff",
	
	//四周向中心显示消失，与puff正好相反
//	show:"scale",
//	hide:"scale",

	//以闪烁形式显示和消失
//	show:"pulsate",
//	hide:"pulsate",
	
/*



//-----dialog行为选项（文本）

autoOpen	true/布尔值 	默认为true,调用dialog()方法时就会打开对话框；如果为false,对话框不可见，但对话框已创建，可以通过dialog("open")才能看见。

draggable	true/布尔值	默认为true,可以移动对话框，false无法移动。

resizeable	true/布尔值	默认为true,可以调整对话框大小，false无法调整。

modal		false/布尔值	默认为false,对话框外可操作，true对话框会遮罩一层灰纱无法操作

closeText	无/字符串	设置关闭按键的title文字

*/

//-----设置关闭X图标的title显示信息
  closeText:"关闭对话框",

//-----设置dialog对话框外是否可以操作。会蒙有一层纱
  modal:true,

//-----设置dialog是否可以调整大小 
  resizable:false,

//-----设置dialog是否可以移动
  draggable:false,

//-----隐藏dialog对话框
 //autoOpen:false,
});

//-----显示隐藏后的dialog对话框
	$("#reg_a").click(function(){
		$(".reg").dialog("open");
	});

});










css页面：
body{
	margin:51px 0 0 0;
	padding:0;
	font-size:12px;
	background:#fff;
}
#header{
	width:100%;
	height:51px;
	background:url(../img/bj2.png);
	position:absolute;
	top:0;
}
#header .header_main{
	width:800px;
	height:51px;
	margin:0px auto;
}

#header .header_main h1{
	font-size:20px;
	margin:0;
	padding:0 10px;
	color:blue;
	height:40px;
	line-height:40px;
	float:left;
}

#header .header_search{
	padding:6px 0 0 0;
	float:left;
}
#header .header_search .search{
	width:300px;
	height:24px;
	border:1px solid #ccc;
	background:white;
	color:#666;
	font-size:14px;
	text-indent:5px;
}

#header .header_button{
	padding:3px;
	float:left;
}

#header .header_member{
	float:right;
	color:#555;
	height:51px;
	line-height:51px;
	font-size:16px;
}

#header .header_member a{
	text-decoration:none;
	color:#555;
	font-size:14px;
}
.ui-dialog-title{
	color:red;
}
.ui-widget-header{
	background:url(bj.png);
}








html页面

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title>自定义插件</title>
	<script type="text/javascript" src='js/jquery.js'></script>
	<script type="text/javascript" src="js/jquery.ui.js"></script>
	<script type="text/javascript" src="js/index.js"></script>
	<link rel="shortcut icon" type="image/x-icon" href="img/1.jpg" />
	<link type="text/css" rel="stylesheet" href="css/uistyle/jquery.ui.css" />
	<link type="text/css" rel="stylesheet" href="css/style.css"/>
	<style>

	</style>
</head>
<body>
<div id="header">
	<div class="header_main">
		<h1>知问</h1>
		<div class="header_search">
			<input type="text" name="search" class="search"/>
		</div>
		<div class="header_button">
			<input type="button" value="查询" class="search_button" />
		</div>
		<div class="header_member">
			<a href="#" id="reg_a">注册</a>|<a href="#" id="login_a">登陆</a>
		</div>
	</div>
</div>
<div class="reg" title="会员注册">
	注册区
</div>
<div class="login">
	登陆区
</div>
</body>
</html>




















		第38课 知问前端-对话框UI 下 4

其它页面延用37课

$(function(){

/*
//-----dialog()方法的事件
	除了属性设置外，dialog()方法也提供了大量的事件，这些事件可以给各种不同状态时提供回调函数，这些回调函数中的this值等于对话框内容的DIV对象，不是整个对话框的div.
事件名		说明



	
$(".search_button").button();


//-----对话框获得焦点事件
	//focus  :  当对话框被激活时（首次显示以及每次在上面点击）会调用focus方法，该方法有两个	参数（event,ui），此事件中的ui参数为空。
$(".reg").dialog({
  focus:function(event,ui){
	alert("注册获得了焦点");
  }
});
$(".login").dialog({
  focus:function(event,ui){
	alert("登陆获得了焦点");
  }
});



//-----对话框创建事件
	//create  :  当对话框被创建时会调用create方法，该方法有两个参数（event,ui）,此事件中的ui参数为空。
$(".reg").dialog({
  autoOpen:false, //只要对话框被创建，即便不显示也会触发创建事件。
  create:function(event,ui){
	alert("创建了对话框");
  }
});


//-----对话框显示事件
	//open  :  当对话框被显示时（首次显示或调用dialog("open")方法）会调用open方法，该方法有	两个参数（event,ui）,此事件中的ui参数为空。
$(".reg").dialog({
  autoOpen:false, //对话框隐藏时，不会触发事件。
  open:function(event,ui){
    alert("对话框显示才触发事件");
  }
});

//-----对话框关闭事件
	//close  :  当对话框关闭时（当单击关闭按钮或调用dialog("close")方法），会调用close方法，关闭的对话框可以用dialog("open")重新打开，该方法有两个参数(event,ui),此事件中的ui参数为空。
$(".reg").dialog({
  close:function(event,ui){
    alert("对话框关闭触发事件");
  }
});



//-----对话框将要关闭事件
	//beforeClose  :  当对话框将要关闭时（当单击关闭按钮或调用dialog("close")方法），会调用beforeclose方法，如果该函数返回false,对话框将不会被关闭，关闭的对话框可以用dialog('open')重新打开，该方法有两个参数（event,ui）,此事件中的ui参数为空。
	//这个事件可以做一些关闭确认的工作
$(".reg").dialog({
  beforeClose:function(event,ui){
	alert("将要关闭事件");
	return false;
  //如果返回false,将取消关对话框。
  }
});


//-----对话框移动事件
$(".reg").dialog({
  drag:function(){
    alert("对话框每次移动都会触发事件")
  }
});

//-----对话框移动事件中ui的坐标属性
   //--每次移动都触发事件
$(".reg").dialog({
  drag:function(event,ui){
    alert("top"+ui.position.top+"\n"
	+"left"+ui.position.left);
  }
});

    //--只开始移动时触发事件
$(".reg").dialog({
  dragStart:function(event,ui){
    alert("top"+ui.position.top+"\n"
     	+"left"+ui.position.left);
  }
});


    //--只移动结束时触发事件
$(".reg").dialog({
  dragStop:function(event,ui){
    alert("top"+ui.position.top+"\n"
	+"left"+ui.position.left);
  }
});


//-----调整对话框大小事件
	//resize,resizeStart,resizeStop都有两个参数（event,ui）,事件中的ui有四个属性对象：1：size,得到对话框的大小，下面又有两个属性：width和height. 2: position,得到对话框的坐标，有两个子属性：top和left。 3：originalSize,得到对话框原始的大小，有两个属性width和height。 4：originalPosition,得到对话框原始的坐标，有两个子属性top和left
  //--每次改变大小都触发事件
$(".reg").dialog({
  resize:function(){
    alert("改变对话框大小触发事件");
  }
});

  //--调整大小事件并显示宽度和高度
$(".reg").dialog({
  resize:function(event,ui){
    alert("width"+ui.size.width+"\n"
	+"height"+ui.size.height);
  }
});

  //--调整大小事件并显示坐标
$(".reg").dialog({
  resize:function(event,ui){
    alert("top"+ui.position.top+"\n"
	+"left"+ui.position.left);
  }
});

  //--调整对话框大小开始时触发事件
$(".reg").dialog({
  resizeStart:function(event,ui){
    alert("调整对话框大小开始时触发事件");
  }
});


  //--调整对话框大小结束时触发事件
$(".reg").dialog({
  resizeStop:function(event,ui){
    alert("调整对话框大小结束时触发事件");
  }
});

dialog("action",param)方法
方法		    返回值 		  说明
dialog("open")	  jquery对象	 	打开对话框
dialog("close")   jquery对象		关闭对话框
dialog("destroy") jquery对象		删除对话框，直接阻断了dialog
dialog("isOpen")  布尔值		判断对话框是否打开状态
dialog("widget")  jquery对象		获取对话框的jquery对象
dialog("option",param)  一般值		获取option属性的值
dialog("option",param,value) jquery对象   设置option属性的值


//-----显示与关闭对话框
$(".reg").dialog({
  autoOpen:false
});
$("#reg_a").click(function(){
  
  $(".reg").dialog("open");
});
$(".reg").click(function(){
  $(".reg").dialog("close");
});



//-----删除对话框
$("#reg_a").click(function(){
  $(".reg").dialog();
});
$(".reg").click(function(){
  $(".reg").dialog("destroy");
});




//-----判断对话框是否以显示
$(".reg").dialog({
 // autoOpen:false
});

  alert($(".reg").dialog("isOpen"));



//-----widget得到的是对话框整体的对象
//对话框中所有的方法对应的对象基本都不包括标题头部区域。而widget则包含，它针对的是对话框整体的区域对象。
$(".reg").dialog();
//$(".reg").dialog().css("fontSize","50px");
$(".reg").dialog("widget").css("fontSize","50px");




//-----获取对话框的title值
$(".reg").dialog();
//alert($(".reg").dialog("option","title"));

//-----设置对话框的title值
$(".reg").dialog("option","title","111");


//-----获取对话框的autoOpen值
//alert($(".reg").dialog("option","autoOpen"));



//-----将指定对话框置前
$(".reg").dialog();
$(".login").dialog();
$("#reg_a").click(function(){
	$(".reg").dialog("moveToTop");
});
$("#login_a").click(function(){
	$(".login").dialog("moveToTop");
});



//-----on()方法触发的对话框事件
特效名称		说明
dialogfocus		得到焦点时触发
dialogopen		显示时解
dialogbeforeclose	将要关闭时触发
dialogclose		关闭时触发
dialogdrag		每一次移动时触发
dialogdragstart		开始移动时触发
dialogdragstop		移动结束时触发
dialogresize		每次调整大小时触发
dialogresizestart	开始调整大小时触发
dialogresizestop	结束调整大小时触发



//-----on方法触发的对话框事件实例（关闭）
$(".reg").dialog();
$(".reg").on("dialogclose",function(){
	alert("对话框以关闭");
});
*/


});





























		第39课 知问前端--按键UI 5
$(function(){

学习要点：
	1，使用button按钮
	2，修改button样式
	3，button()方法的属性
	4，button("action",param)
	5，单选，复选按钮
一，使用button按钮：
	使用button按钮UI的时候，不一定必须是input按钮形式，普通的文本也可以设置成button按钮
		如： $("#search_button").button();

二，修改button样式：
	在弹出的button对话框中，在火狐浏览器中打开firebug或者右击-》查看元素，这样，我们可以看看button 的样式，根据样式进行修改，我们为了和网站主题符合，对dialog的标题背景进行修改。无须修改UI里的CSS,直接用style.css替代掉即可。

三，button()方法的属性
	按钮方法有两种形式：1，button(options),options是以对象键值对的形式传参，每个键值对表示一个选项；2，button("action",param),action是操作对话框方法的字符串，param则是option的某个选项。




//-----引入UI按钮样式的方式
$(".search_button").button();
$(".reg").dialog({
	buttons:{
		"确定":function(){}
	}
});



//-----修改全局和局部按钮的样式(普通，悬停，点击及局部和全局)

	//通过审查元素找到相关按钮的元素的类名,并在style.css中重写其背景图片,如下：

	//--修改全局性按钮的样式
.ui-state-default, .ui-widget-content .ui-state-default, .ui-widget-header .ui-state-default{
	background:url(../img/bj.png);
}

	//--修改局部性按钮的样式
.ui-state-default{
	background:url(../img/bj.png);
}


	//--修改局部按钮hover样式（将上面CSS的首default改成hover）
.ui-state-hover, .ui-widget-content .ui-state-default, .ui-widget-header .ui-state-default{
	background:url(../img/bj.png);
}

	//--修改全局按钮hover样式（将上面CSS的default全改成hover）
.ui-state-hover, .ui-widget-content .ui-state-hover, .ui-widget-header .ui-state-default{
	background:url(../img/bj.png);
}

	//--修改局部按钮的点击后的样式（将首个default改为active）
.ui-state-active, .ui-widget-content .ui-state-active, .ui-widget-header .ui-state-default{
	background:url(../img/bj2.png);
}

	//--修改全局按钮的点击后的样式（将全部default改为active）
.ui-state-active, .ui-widget-content .ui-state-active, .ui-widget-header .ui-state-active{
	background:url(../img/bj2.png);
}







//-----设置按钮的（非）激活状态
//disabled	false/布尔值	  默认为false,设置为true时，按钮是非激活的。
$(".search_button").button({
	disabled:true
});
$(".search_button").click(function(){
	alert("激活状态");
});
//当按钮为非激活状态时，是无法点击的。
	


//-----设置按钮上显示的文字
//label		无/字符串	对应按钮上的文字，如果没有，HTML内容将被作为按钮的文字。

$(".search_button").button({
	label:"aaaaa"
});




//-----给按钮上加图标
//icons		无、字符串	  对应按钮上的图标，在按钮文字前面和后面都 可以放置一个图标，通过对象键值对的方式完成{ 
			primary:"ui-icon-search,    //在文字前面加图标
			secondary:"ui-icon-search"  //在文字后面加图标
			}
//查找图标代码进入jquery.com官网，选择
APIDocumentation -> widgets -> button Widget -> icons -> an icon class name
//注意! 按钮上加图标时不能使用HTML原生的input元素，要在HTML中使用<button>元素。如下

$(".button_search, .search_button").button({
//这里input按钮就无效，而button按钮就有效
   icons:{
	primary:"ui-icon-search",	//文字前加图标
	secondary:"ui-icon-triangle-1-s" //文字后加图标
   }
});


//-----隐藏按钮上的文字
text		true/布尔值	  当时设置为false时，不会显示文字，但必须指定一个图标。
$(".button_search").button({
	text:false
	//当按钮上有图标时才可以隐藏文字
});



//-----按钮的创建事件
$(".button_search").button({
	create:function(){
		alert("按钮创建事件");
	}
});



//-----按钮操作之禁用和启用按钮
//button("disable")	jquery对象	禁用按钮
//button("enable")	jquery对象	启用按钮
//注意！此方法要使用在按钮UI以经初始化之后，

$(".button_search, .search_button").button(); //按钮始初化
$(".search_button, .button_search").button("disable");
$(".search_button, .button_search").button("enable")



//-----删除按钮
//button("destroy")	jquery对象	删除按钮，直接阻断了button
$(".button_search, .search_button").button(); //按钮始初化
$(".button_search, .search_button").button("destroy");



//-----更新按钮，刷新按钮
//button("refresh")	jquery对象	更新按钮布局
$(".button_search, .search_button").button(); //按钮始初化
$(".button_search, .search_button").button("refresh");



//-----得到button的jquery对象
//button("widget")	jquery对象	获取按钮的jquery对象
$(".button_search, .search_button").button(); //按钮始初化
$(".button_search, .search_button").button("widget");


//-----得到button的options值
//button("option",param)   一般值		获取option属性的值

$(".button_search, .search_button").button(); //按钮始初化
$(".button_search, .search_button").button("option"，"label");

//-----设置button的options值
//button("option",param,value) jquery对象		设置options属性的值
$(".button_search, .search_button").button(); //按钮始初化
$(".button_search, .search_button").button("option","label","搜索");




//-----获取对话框中按钮的个数
$(".reg").dialog({
	buttons:{
		"提交":function(){}
	}
});
//alert($(".reg").parent().find("button").length);

//-----查看对话框中第一个按钮的相关信息
$(".reg").dialog({
	buttons:{
		"提交":function(){}
	}
});
//alert($(".reg").parent().find("button").eq(0).html());


//-----删除对话框中的按钮(两种方法)
$(".reg").dialog({
	buttons:{
		"提交":function(){}
	}
});
 	//方法一
//$(".reg").parent().find("button").eq(1).button("disable");
	//方法二
//$(".reg").dialog("widget").find("button").button("disable");




//-----设置对话框中的单选按钮(两种方法)
$(".reg").dialog({
	buttons:{
		"提交":function(){}
	}
});
	//方法一
//$(".reg input[name=sex]").button();
	//方法二
$(".reg").buttonset();
//如果不想多选之间有间隙，就在HTML页面中删除多选之间的空格和换行。

*/


//-----设置对话框中的多选按钮(两种方法)
//可以把input元素连接在一起，去除空格和换行，或设置浮动，达到消除按钮的间隙
$(".reg").dialog({
	buttons:{
		"提交":function(){}
	}
});
	//方法一
$(".reg input[type=checkbox]").button();
	//方法二
//$(".reg").buttonset();


});




====================================================

CSS页面：
body{
	margin:51px 0 0 0;
	padding:0;
	font-size:12px;
	background:#fff;
}
#header{
	width:100%;
	height:51px;
	background:url(../img/bj2.png);
	position:absolute;
	top:0;
}
#header .header_main{
	width:800px;
	height:51px;
	margin:0px auto;
}

#header .header_main h1{
	font-size:20px;
	margin:0;
	padding:0 10px;
	color:blue;
	height:40px;
	line-height:40px;
	float:left;
}

#header .header_search{
	padding:6px 0 0 0;
	float:left;
}
#header .header_search .search{
	width:300px;
	height:24px;
	border:1px solid #ccc;
	background:white;
	color:#666;
	font-size:14px;
	text-indent:5px;
}

#header .header_button{
	padding:3px;
	float:left;
}

#header .header_member{
	float:right;
	color:#555;
	height:51px;
	line-height:51px;
	font-size:16px;
}

#header .header_member a{
	text-decoration:none;
	color:#555;
	font-size:14px;
}

.ui-widget-header{
	background:url(../img/bj2.png);
}
.ui-dialog-title{
	color:blue;
}

.ui-state-default, .ui-widget-content .ui-state-default, .ui-widget-header .ui-state-default{
	background:url(../img/bj.png);
}

.ui-state-active, .ui-widget-content .ui-state-active, .ui-widget-header .ui-state-active{
	background:url(../img/bj2.png);
}



===============================================
html页面


<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title>自定义插件</title>
	<script type="text/javascript" src='js/jquery.js'></script>
	<script type="text/javascript" src="js/jquery.ui.js"></script>
	<script type="text/javascript" src="js/index.js"></script>
	<link rel="shortcut icon" type="image/x-icon" href="img/1.jpg" />
	<link type="text/css" rel="stylesheet" href="css/uistyle/jquery.ui.css" />
	<link type="text/css" rel="stylesheet" href="css/style.css"/>
	<style>

	</style>
</head>
<body>
<div id="header">
	<div class="header_main">
		<h1>知问</h1>
		<div class="header_search">
			<input type="text" name="search" class="search"/>
		</div>
		<div class="header_button">
			<input type="button" value="input版查询" class="search_button" />
			<button class="button_search">but版查询</button>
		</div>
		<div class="header_member">
			<a href="#" id="reg_a">注册</a>|<a href="#" id="login_a">登陆</a>
		</div>
	</div>
</div>
<div class="reg" title="会员注册">
<!--
<input type="radio" name="sex" id="male"><label for="male">男</label></input>
<input type="radio" name="sex" id="female"><label for="female">女</label></input>
-->
<input type="checkbox" name="red" id="red"><label for="red">红</label></input>
<input type="checkbox" name="red" id="yellow"><label for="yellow">黄</label></input>
<input type="checkbox" name="red" id="blue"><label for="blue">蓝</label></input>
<input type="checkbox" name="red" id="green"><label for="green">棕</label></input>
</div>
<div class="login" title="会员登陆">
	登陆区
</div>
</body>
</html>


























		第40课 知问前端-创建注册表单 6


//-----文本框点击后弹出日历
//-----将title提示信息用框的形式显示

学习要点：
	1，HTML部分
	2，CSS部分
	3，jQuery部分

======================================
js页面
$(function(){
$(".search_button").button({
	icons:{
		primary:"ui-icon-search",
	}
});
$("#reg").dialog({
	title:"会员注册",
	autoOpen:true,
	modal:true,
	resizable:false,
	width:320,
	height:340,
	buttons:{
		"提交":function(){},
		"取消":function(){
			$(this).dialog("close");
		}
	}
});

$("#reg").buttonset();

//-----文本框点击后弹出日历
$("#date").datepicker();

//-----将title提示信息用框的形式显示
$("#reg input[title]").tooltip();

});

























		第41课 知问前端-工具提示UI 7
学习要点：
	1，调用tooltip()方法
	2，修改tooltip()样式
	3，tooltip()方法的属性
	4，tooltip()方法的事件
	5，tooltip()中使用on()


//-----课件内容（文本）
一，调用tooltip()方法
<input type="text" name="user" class="text" id="user" title="输入账号"/>
$("#user").tooltip();



二，修改tooltip()样式
	在弹出的tooltip提示框后，在火狐浏览器中打开firebug或者审查元素，这样我们可以看看tooltip的样式，根据样式进行修改。无须修改UI里的CSS,直接用自建的CSS替代即可。
	.ui-tooltip{
		color:red
	}
	其它属性修改方案类似。



三，tooltip()方法的属性
	对话框方法有两种形式：1，tooltip(options) , options是以对象键值对的形式传参，每个键值对表示一个选项；	2，tooltip("action",param),action是操作对话框方法的字符串，param则是options的某个选项。

1, 	tooltip外观选项
属性		默认值/类型		说明
disabled	false/布尔值		设置为true,将禁止显示工具提示
content		无/字符串		设置title内容
items		无/字符串		设置选择器以限定范围（过滤功能）
tooltipClass	无/字符串		引入class形式的CSS样式

$("[title]").tooltip({
	disabled:false,
	content:"改变title内容",
	items:"input", //限制只有input类型的元素才会显示title信息。
	tooltipClass:"reg_tooltip"  //给元素赋与一个名为reg_tooltip的样式
});



2,	tooltip页面位置选项
属性		默认值/类型		说明
position	无/对象		使用对象的键值对赋值，有两个属性；my和at 表示坐标，my 是以目标点左下角为基准的，at以my 为基准。分别有left,right,center,top,bottom值。另外还可以额外为距离添加数值

$("#user").tooltip({
	position:{
		my:"left center",
		at:"right+5 center"   //+5 是为距离额外添加的数值，
	}
});



3，	tooltip 视觉选项
属性		默认值/类型		说明
show		false/布尔值		显示对话框时，默认采用淡入淡出效果，
hide		false/布尔值		关闭对话框时，默认采用淡入淡出效果。

$("#user").tooltip({
	show:false,
	hide:false
});
	注意：设置true后，默认为淡入淡出，如果想使用另的特效，可以使用以下字串参数。

特效名称		说明 
blind		工具提示从顶部显示或消失 
bounce		工具提示断断续续地显示或消失，垂直运动。
clip		工具提示从中心同时向上下垂直显示或消失 
slide		工具提示从左边显示或消失 
drop		工具提示从左边显示或消失，有透明度变化 
fold		工具提示从左上角开始显示或消失
highlight	工具提示显示或消失，伴随透明度和背景色的变化。
puff		工具提示从中心缩放，显示时收缩，消失时扩散
scale		工具提示从中心缩放，显示时扩散，消失时收缩。
pulsate		工具提示以闪烁形式显示或消失。

$("#user").tooltip({
	show:"blind",
	hide:"blind"
});




4,	tooltip 行为选项
属性		默认值/类型		说明
track		fals/布尔值		设置为true,能跟随鼠标移动。
$("#user").tooltip({
	track:true
});




四，tooltip()方法的事件
	除了属性设置外，tooltip()方法也提供了大量的事件，这些事件可以给各种不同状态时提供回调函数，这些回调函数中的this值等于对话框内容的div对象，不是整个对话框的div.


1，	tooltip事件选项
事件名		说明
create		当工具提示被创建时会调用create方法，该方法有两个参数（event,ui）,此事件中的UI参数为空。

open		当工具提示被显示时，会调用open方法，该方法有两个参数（event,ui）,此事件中的ui有一个参数tooltip,返回是工具提示的jQuery对象。

close		当工具提示关闭时，会调用close方法。关闭的工具提示可以用tooltip("open")重新打开。该方法有两个参数（event,ui）.此事件中的ui有一个参数tooltip,返回是工具提示的jquery对象。

//当工具提示创建时
$("#user").tooltip({
	create:function(){
		alert("创建触发");
	}
});


//当工具提示关闭时
$("#user").tooltip({
	close:function(){
		alert("关闭触发");
	}
});

//当工具提示打开时
$("#user").tooltip({
	open:function(){
		alert("打开触发");
	}
});


2，tooltip("action",param)方法
方法		 	返回值		说明 
tooltip("open")		jQuery对象	打开工具提示
tooltip("close")	jQuery对象	关闭工具提示
tooltip("disable")	jQuery对象	禁用工具提示
tooltip("enable")	jQuery对象	启用工具提示
tooltip("destroy")	jQuery对象	删除工具提示，直接阻断了tooltip
tooltip("widget")	jQuery对象	获取工具提示jquery对象
tooltip("option",param) 一般值		获取option属性值（内容）
tooltip("option",param,value)  jquery对象	设置option属性值（内容）

$("#user").tooltip("open");
$("#user").tooltip("close");
$("#user").tooltip("disable");
$("#user").tooltip("enable");
$("#user").tooltip("destroy");
$("#user").tooltip("widget");
//获取某个options的param选项值（内容）
var title=$("#user").tooltip("option","content")
alert(title);
//设置某个options的param选项值（内容）
$("#reg").dialog("option","content","提示内容");




五，tooltip()中使用on()
	在tooltip的事件中，提供了使用on()方法处理的事件方法
1，	on()方法触发的对话框事件
特效名称		说明
dialogopen		显示时触发
tooltipclose		关闭时触发

$("#reg").on("dialogopen",function(){
	alert("打开时触发");
});

$("#");


=====================================

html页面


<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title>自定义插件</title>
	<script type="text/javascript" src='js/jquery.js'></script>
	<script type="text/javascript" src="js/jquery.ui.js"></script>
	<script type="text/javascript" src="js/index.js"></script>
	<link rel="shortcut icon" type="image/x-icon" href="img/1.jpg" />
	<link type="text/css" rel="stylesheet" href="css/uistyle/jquery.ui.css" />
	<link type="text/css" rel="stylesheet" href="css/style.css"/>
	<style>

	</style>
</head>
<body>
<div id="header">
	<div class="header_main">
		<h1>知问</h1>
		<div class="header_search">
			<input type="text" name="search" class="search"/>
		</div>
		<div class="header_button">
			<button class="search_button">but版查询</button>
		</div>
		<div class="header_member">
			<a href="#" id="reg_a">注册</a>|<a href="#" id="login_a">登陆</a>
		</div>
	</div>
</div>
<div id="reg">
<p>
	<label for="user">用户名：</label>
	<input type="text" name="user" class="text" id="user" title="请输入用户名" />
	<span class="star"> * </span>
	
</p>

<p>
	<label for="pass">密　码：</label>
	<input type="password" name="pass" class="text" id="pass" title="请输入密码" />
	<span class="star">*</span>
</p>

<p>
	<label for="email">邮　箱：</label>
	<input type="text" name="email" class="text" id="email" title="请输入邮箱" />
</p>
<p>
	<label>性　别：</label>
	<input type="radio" name="sex" value="male" id="male" checked="checked">
	<label for="male">男</label></input>	
   	
	<input type="radio" name="sex" value="female" id="female">
	<label for="female">女</label></input>
</p>
<p>
	<label for="date">生　日：</label>
	<input type="text" name="date" class="text" id="date" readonly="readonly" title="请输入日期"/>
</p>

</div>

</body>
</html>
===========================================
css页面
body{
	margin:51px 0 0 0;
	padding:0;
	font-size:12px;
	background:#fff;
}
#header{
	width:100%;
	height:51px;
	background:url(../img/bj2.png);
	position:absolute;
	top:0;
}
#header .header_main{
	width:800px;
	height:51px;
	margin:0px auto;
}

#header .header_main h1{
	font-size:20px;
	margin:0;
	padding:0 10px;
	color:blue;
	height:40px;
	line-height:40px;
	float:left;
}

#header .header_search{
	padding:6px 0 0 0;
	float:left;
}
#header .header_search .search{
	width:300px;
	height:24px;
	border:1px solid #ccc;
	background:white;
	color:#666;
	font-size:14px;
	text-indent:5px;
}

#header .header_button{
	padding:3px;
	float:left;
}

#header .header_member{
	float:right;
	color:#555;
	height:51px;
	line-height:51px;
	font-size:16px;
}

#header .header_member a{
	text-decoration:none;
	color:#555;
	font-size:14px;
}

.ui-widget-header{
	background:url(../img/bj2.png);
}
.ui-dialog-title{
	color:blue;
}



#reg{
	padding:15px 0 0 15px;
}

#reg p{
	margin:10px 0;
	padding:0;
}

#reg p label{
	font:normal bold 14px normal;
	color:#666;
}

#reg .star{
	font-sie:20px;
	color:red;
}


#reg .text{
	border-radius:5px;
	border:1px solid #ccc;
	background:#fff;
	width:200px;
	height:25px;
	line-height:25px;
	text-indent:5px;
	font-size:13px;
	color:#666;
}

/*设置对话框中title提示信息的tooltip样式*/
.ui-tooltip{
	color:red;
}

/*为tooltip引入class形式的CSS样式*/
.a{
	color:blue;
}

=========================================


js页面

$(function(){
$(".search_button").button({
	icons:{
		primary:"ui-icon-search",
	}
});
$("#reg").dialog({
	title:"会员注册",
	autoOpen:true,
	modal:true,
	resizable:false,
	width:320,
	height:340,
	buttons:{
		"提交":function(){},
		"取消":function(){
			$(this).dialog("close");
		}
	}
});

$("#date").datepicker();
$("#reg").buttonset();
/*
//-----调用tooltip()方法给title提示信息添加效果
$("#user").tooltip({
	//position:"top left"
	//position:"right top"
});


//-----修改对话框中title提示信息的tooltip样式
//找到元素的类名，在CSS中重写
.ui-tooltip{
	color:red;
}

//-----禁用tooltip样式
$("#user").tooltip({
	disabled:true
});



//-----tooltip中修改title提示信息内容
$("#user").tooltip({
	content:"这是被修改的内容"
});


//-----tooltip中限制过滤要提示的title信息的范围
$("[title]").tooltip({
	items:"#pass"  
//带有title的很多元素中只有id为pass的title提示信息是tooltip风格。
});


//-----为tooltip引入class形式的CSS样式
//先在CSS中设置好CSS样式 .a 然后在这里引用 。
$("#user").tooltip({
	tooltipClass:"a"
});

//-----tooltip()中设置title提示信息的位置
//可设置的值有：left,right,center,top,bottom 这些值针对的是title信息的四边， 基准点文本框的左下点（不变），
$("#user").tooltip({
  position:{
    my:"left bottom", // title信息框左侧和底部与基准点重叠，
    at:"right+15 bottom"  //还可以通过加减数值来偏移位置
  }
});


//-----title信息的显示与消失的效果默认为淡入淡出
blind		工具提示从顶部显示或消失 
bounce		工具提示断断续续地显示或消失，垂直运动。
clip		工具提示从中心同时向上下垂直显示或消失 
slide		工具提示从左边显示或消失 
drop		工具提示从左边显示或消失，有透明度变化 
fold		工具提示从左上角开始显示或消失
highlight	工具提示显示或消失，伴随透明度和背景色的变化。
puff		工具提示从中心缩放，显示时收缩，消失时扩散
scale		工具提示从中心缩放，显示时扩散，消失时收缩。
pulsate		工具提示以闪烁形式显示或消失。

$("[title]").tooltip({
//true为淡入淡出，false为极速显示
	//show:true,
	//hide:true
	show:"drop",
	hide:"drop"
});

//-----title信息与鼠标一起移动
$("#user").tooltip({
	track:true
});

//-----tooltip的创建，打开，关闭事件
$("#user").tooltip({
	create:function(){
	//	alert("创建触发");
	},
	open:function(e,ui){
	//	alert("打开触发");
	//	alert(ui.tooltip.length);
	},
	close:function(e,ui){
		alert("关闭触发");
		alert(ui.tooltip.length);
	}
});


//-----tooltip("option",param)非初始化的各操作行为
$("[title]").tooltip();
$("#pass").tooltip("open");
//--关闭tooltip效果
$("#user").tooltip("close");
//--禁用tooltip效果
$("#user").tooltip("disable");
//--启用tooltip效果
$("#user").tooltip("enable");
//--删除tooltip效果
$("#user").tooltip("destroy");
//--获取tooltip对象
$("#user").tooltip("widget");
//--获取某个options的param选项值（内容）
var title=$("#user").tooltip("option","content")
alert(title);
//--设置某个options的param选项值（内容）
$("#reg").dialog("option","content","提示内容");

*/


//-----tooltip 结合on的打开 ，关闭事件
$("#user").tooltip();
$("#user").on("tooltipopen",function(){
	alert("打开触发");
});
$("#user").on("tooltipclose",function(){
	alert("关闭触发");
});


});

















		第42课 知问前端-自动补全UI 8

//-----课件笔记

学习要点：
	1，调用autocomplete()方法
	2，修改autocomplete()样式
	3，autocomplete()方法的属性
	4，autocomplete()方法的事件
	5，autocomplete中使用on()


一：调用 autocomplete()方法
$("#email").autocomplete({
	source:["aaa","bbb","ccc"]
});


二：修改autocomplete()样式
	由于autocomplete()方法是弹窗，然后鼠标悬停的样式，我们通过firebug或审查元素想获取到悬停时背景样式，可以直接通过jquery.ui.css里面找相应的CSS.无须修改ui里的CSS，直接用style.css替代掉。

.ui-menu-item a.ui-state-focue{
	background:url(../img/ui_header_bg.png);
}
注意：其它修改方案类似。



三：autocomplete()方法的属性
	自动补全方法有两种形式:1, autocomplete(options),options是以以象键值对的形式传参，每个键值对表示一个选项： 2， autocomplete("action",param), action是操作对话框方法的字符串，param则是options的某个选项。

1，	autocomplete外观选项
属性		默认值/类型		说明 
disabled	false/布尔值		设置为true,将禁止显示自动补全。
source		无/数值			指定数据源，可以是本地的，也可以是远程的。
minLength	1/数值 			默认为1，触发补全列表最少输入字符数。
delay		300毫秒/数值		默认为300毫秒，延迟显示设置。
autoFocus	false/布尔值		设置为true时，第一个项目会自动被选定。

$("#email").autocomplete({
	source:["aaa","bbb","ccc"],
	disabled:false,
	minLength:2,
	delay:50,
	aotuFocus:true,
});


2,	autocomplete页面位置选项
属性		默认值/类型		说明
position	无/对象		使用对象的键值对赋值，有两个属性：my和at 表示坐标。my 是以目标的左上角为基准，at 以目标点右下角为基准。

$("#email").autocomplete({
	position:{
		my:"left center",
		at:"right center"
	}
});







四：autocomplete()方法的事件
	除了属性设置外，autocomplete()方法也提供了大量的事件。这些事件可以给各种不同状态时提供回调函数，这些回调函数中的this值等于对话框内容的div对象，不是整个对话框的div

事件名		说明 
create		当自动补全被创建时会调用create方法，该方法有两个参数(event,ui),此事件中的ui参数为空。

open		当自动补全被显示时，会调用open方法，该方法有两个参数（event,ui）,此事件中的ui参数为空。

close		当自动补全被关闭时，会调用close方法，该方法有两个参数(event,ui),此事件中的ui参数为空。

focus		当自动补全获取焦点时，会调用focus方法，该方法有两个参数(event,ui)，此事件中的ui有一个子属性对象item,分别有两个属性：label,补全列表显示的文本：value,将要输入框的值，一般label和value值相同，如果是键值对的话，label相当于key,value就是val。

select 		当自动补全被选定时，会调用select方法,该方法有两个参数(event,ui),此事件中的ui有一个子属性对象item,分别有两个属性：label,补全列表显示的文本：value,将要输入框的值，一般lable和value值相同。如果是键值对的话，label相当于key,value就是val。

change		当自动补全失去焦点且内容发生改变时，会调用change方法，该方法有两个参数（event,ui）.此事件中的ui参数为空。

search		当自动补全搜索完成后，会调用search方法，该方法有两个参数（event,ui）.此事件中的ui参数为空。

response	当自动补全搜索完成后，在菜单显示之前，会调用response方法，该方法有两个参数(event,ui),此事件中的ui 参数有一个子对象content,他会返回label和value值，可通过遍历了解。

$("#email").autocomplete({
	source:["aaa","bbb","ccc"],
	disabled:false,
	minLength:1,
	delay:0,
	focus:function(e,ui){
		ui.item.valu="123"
	},
	select:function(e,ui){
		ui.item.value="123"
	},
	change:function(e.ui){
		alert("");
	},
	search:function(e,ui){
		alert("");
	}
});


1,	autocomplete("action",param)方法
方法				返回		说明 
autocomplete("close")		jquery对象	关闭自动补齐
autocomplete("disable")		jquery对象	禁用自动补齐
autocomplete("enabel")		jquery对象	启用自动补齐
autocomplete("destory")		jquery对象	删除自动补齐，直接阻断
autocomplete("widget")		jquery对象	获取工具提示的jquery对象
autocomplete("search",value)	jquery对象	按指定值自动触发自动补全
autocomplete("option",param)	 一般值		获取options属性的值(内容)
autocomplete("option",param,value)  jquery对象   设置options属性的值(内容)


//关闭自动补全
$("#email").autocomplete("close");

//禁用自动补全
$("#email").autocomplete("disable");

//启用自动补全
$("#email").autocomplete("enable");

//删除自动实例
$("#email").autocomplete("destroy");

//获取自动补全jquery对象
$("#email").autocomplete("widget");

//按指定值自动触发自动补全
$("#email").autocomplete("search","a"); //为空时，再加上minLength=0 进就会显示全部菜单内容。

//获取某个options的param选项的值
var delay=$("#email").autocomplete("option","delay");
alert(delay);

//设置某个options的param选项的值
$("#email").dialog("option","delay",0);





五： autocomplete 中使用 on()
	在autocomplete的事件中，提供了使用on()方法处理的事件方法
1，	on()方法触发的对话框事件
事件名称		说明
autocompleteopen	显示时触发
autocompleteclose	关闭时触发
autocompletesearch	查找时触发
autocompletefocus	获得焦点时触发
autocompletechange	改变时触 发
autocompleteselect	选定时触发
autocompleteresponse	搜索完毕后，显示之前

$("#reg").on("autocompleteopen",function(){
	alert("打开自动补全时触发事件");
});


=======================================
html页面


<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title>自定义插件</title>
	<script type="text/javascript" src='js/jquery.js'></script>
	<script type="text/javascript" src="js/jquery.ui.js"></script>
	<script type="text/javascript" src="js/index.js"></script>
	<link rel="shortcut icon" type="image/x-icon" href="img/1.jpg" />
	<link type="text/css" rel="stylesheet" href="css/uistyle/jquery.ui.css" />
	<link type="text/css" rel="stylesheet" href="css/style.css"/>
	<style>

	</style>
</head>
<body>
<div id="header">
	<div class="header_main">
		<h1>知问</h1>
		<div class="header_search">
			<input type="text" name="search" class="search"/>
		</div>
		<div class="header_button">
			<button class="search_button">but版查询</button>
		</div>
		<div class="header_member">
			<a href="#" id="reg_a">注册</a>|<a href="#" id="login_a">登陆</a>
		</div>
	</div>
</div>
<div id="reg">
<p>
	<label for="user">用户名：</label>
	<input type="text" name="user" class="text" id="user" title="请输入用户名" />
	<span class="star"> * </span>
	
</p>

<p>
	<label for="pass">密　码：</label>
	<input type="password" name="pass" class="text" id="pass" title="请输入密码" />
	<span class="star">*</span>
</p>

<p>
	<label for="email">邮　箱：</label>
	<input type="text" name="email" class="text" id="email" title="请输入邮箱" />
</p>
<p>
	<label>性　别：</label>
	<input type="radio" name="sex" value="male" id="male" checked="checked">
	<label for="male">男</label></input>	
   	
	<input type="radio" name="sex" value="female" id="female">
	<label for="female">女</label></input>
</p>
<p>
	<label for="date">生　日：</label>
	<input type="text" name="date" class="text" id="date" readonly="readonly" title="请输入日期"/>
</p>

</div>

</body>
</html>



======================================


js页面


$(function(){
$(".search_button").button({
	icons:{
		primary:"ui-icon-search",
	}
});
$("#reg").dialog({
	title:"会员注册",
	autoOpen:true,
	modal:true,
	resizable:false,
	width:320,
	height:340,
	buttons:{
		"提交":function(){},
		"取消":function(){
			$(this).dialog("close");
		}
	}
});
$("#date").datepicker();
$("#reg").buttonset()


//-----调用自动补全
arr=['a','aaa','aaaaa','bbb'];
$("#email").autocomplete({
	source:arr,
});

/*
//-----修改自动补全鼠标悬停背景样式

//首先通过审查元素查看相关元素的类名，然后在jquery.ui.css中找到其名下对应的focus(悬停),active(点击)，然后进行重写冲突。如下：
//重写自动补全鼠标悬停的背景图片
.ui-menu .ui-menu-item a.ui-state-focus{
	background:blue;
}
.ui-menu .ui-menu-item a.ui-state-active{
	background:red;
}
//-----修改自动补全字体颜色的样式
.ui-menu .ui-menu-item a{
	color:red;
}


//-----自动补全的外观选项
//-----禁用自动补全
$("#email").autocomplete({
	//disabled:true
});

disabled	false/布尔值		设置为true,将禁止显示自动补全。
source		无/数值			指定数据源，可以是本地的，也可以是远程的。
minLength	1/数值 			默认为1，触发补全列表最少输入字符数。
delay		300毫秒/数值		默认为300毫秒，延迟显示设置。
autoFocus	false/布尔值		设置为true时，第一个项目会自动被选定。


//-----设置触发自动补全至少要输入的字数。
$("#email").autocomplete({
	//minLength:2
	//minLength:0  至少输入0时，需要先输入后删除时才会全部显示。
});

//-----设置触发自动补全后显示内容的时间，默认300毫秒
$("#email").autocomplete({
	delay:1000
	delay:0
});


//-----设置自动补全触发后自动选择第一条内容
$("#email").autocomplete({
	autoFocus:true
});


//-----设置自动补全提示内容的位置
$("#email").autocomplete({
	position:{
		my:"left center",
		at:"right center"
	}
});


//-----自动补全创建触发事件
var user=['b','bbb','bbbbb'];
$("#user").autocomplete({
	source:user,
	create:function(){
		alert("自动补全创建后触发");
	}	
});

//-----自动补全打开触发事件
$("#email").autocomplete({
	open:function(){
		alert("自动补全打开后触发");
	}
});


//-----自动补全关闭触发事件
$("#email").autocomplete({
	close:function(){
		alert("自动补全关闭后触发");
	}
});


//-----补全菜单获得焦点触发事件
//-----获取补全菜单的值
//-----设置补全菜单要显示的内容
//ui有一个子属性对象item,分别有两个属性：label,补全列表显示的文本：value,将要输入框的值，一般label和value值相同，
$("#email").autocomplete({
	focus:function(e,ui){
		//alert("补全菜单获得焦点触发");
		//获取补全菜单的值
		//alert(ui.item.label);	
		//设置补全菜单要显示的内容
		//ui.item.value=123;
		ui.item.value=ui.item.label+"新加内容";
	}
});



//-----选定自动补全菜单内容触发事件
$("#email").autocomplete({
	select:function(){
		alert("选定补全菜单内容触发");
	}
});


//-----光标离开前后，文本框内容发生改变触发事件
$("#email").autocomplete({
	change:function(){
		alert("光标离开后，内容发生改变事件");
	}
});


//-----自动补全菜单搜索完毕触发事件
$("#email").autocomplete({
	search:function(){
		alert("搜索完毕触发事件");
	}
});


//-----自动菜单搜索完事件，并返回菜单内容值
$("#email").autocomplete({
	response:function(e,ui){
		alert("搜索完毕触发事件");
		alert(ui.content[0].label);
		alert(ui.content[1].value);
		alert(ui.content[2].value);
	}
});


//-----按指定字符自动触发自动补全菜单
//$("#email").autocomplete("search","b");

//自动触发设置为空时，只有配合最小字数才会显示全部内容
$("#email").autocomplete({
	minLength:0
});
$("#email").autocomplete("search","");


//-----关闭自动补全
$("#email").autocomplete("close");

//-----禁用自动补全
$("#email").autocomplete("disable");

//-----启用自动补全
$("#email").autocomplete("enable");

//-----删除自动实例
$("#email").autocomplete("destroy");

//-----获取自动补全jquery对象
$("#email").autocomplete("widget");

//-----获取某个options的param选项的值
var delay=$("#email").autocomplete("option","delay");
alert(delay);

//-----设置某个options的param选项的值
$("#email").dialog("option","delay",0);






//-----自动补全打开on事件
$("#email").on("autocompleteopen",function(){
	alert("自动补全打开触发事件");
});

//-----自动补全关闭时触发
$("#email").on("autocompleteclose",function(){
	alert("补全关闭触发事件");
});

//-----自动补全查找时触发
$("#email").on("autocompletesearch",function(){
	alert("自动补全搜索时触发事件");
});

//------自动补全获得焦点时触发事件
$("#email").on("autocompletefocus",function(){
	alert("自动补全获得焦点时触发事件");
});


//-----光标离开后文本框内容改变触发事件
$("#email").on("autocompletechange",function(){
	alert("光标离开后文本框内容改变触发事件");
});


//-----自动补全选择内容后触发事件

$("#email").on("autocompleteselect",function(){
	alert("自动补全选择内容触后发事件");
});


//-----自动补全搜索完毕后显示之前触发事件并可返回值。

$("#email").on("autocompleteresponse",function(e,ui){
	alert("搜索后，显示前触发事件");
	alert(ui.content[0].value);
	alert(ui.content[1].value);
	alert(ui.content[2].value);
});

*/
});






















		第43课 知问前端-邮箱自动补全 ui 9
学习要点：
	1，数据源function
	2，邮箱自动补全



js页面：
$(function(){
	$(".search_button").button({
		icons:{
			primary:"ui-icon-search",
			secondary:"ui-icon-bottom"
		}
	});
	
	$("#reg").dialog({
		title:"会员注册",
		buttons:{
			"确定":function(){},
			"取消":function(){}
		}
	});


	var hosts=["qq.com","163.com","263.com","sina.com.cn","gmail.com"];
	$("#email").autocomplete({
		delay:0,		//设置补全信息显示的延迟时间
		autoFocus:true,		//设置自动选择第一条补全内容
		source:function(value,response){
		    var term=value.term,	//获取文本框内容
			name=term,		//将获取的内容当作邮箱前缀
			host="",		//邮箱后缀
			ix=term.indexOf("@");	//获取@的下标

			var resultall=[];	//预设一个总结果的变量。
			resultall.push(term); 	//将输入的内容放入总结果
			
			if(ix >=0){	//如果下标大于-1表示输入内容中包括@
			//当有@时前在获取的内容中截取前缀和后缀
				name=term.slice(0,ix);
				host=term.slice(ix+1);
			}	
			if(name){	//如果前缀和后缀都存在时
				if(host){
				//在hosts数组中筛选出host后缀名相同的内容
					var findhosts=$.grep(hosts,function(value,index){
						return value.indexOf(host)>-1;
					});
				}else{
				//如果没筛选出来则显示全部。
					findhosts=hosts;
				}
				//将动态前缀和每个后缀结合
				var result = $.map(findhosts,function(value,index){
					return name+"@"+value;
				});
				//将结合后的结果放入到总结果中， 另一种效果是当结合上面的push时，将会把未收录的的后缀直接显示在补全菜单中。
				resultall=resultall.concat(result);
			}
			response(resultall);

		}
	});
});



===========================================
css页面


body{
	margin:51px 0 0 0;
	padding:0;
	font-size:12px;
	background:#fff;
}
#header{
	width:100%;
	height:51px;
	background:url(../img/bj2.png);
	position:absolute;
	top:0;
}
#header .header_main{
	width:800px;
	height:51px;
	margin:0px auto;
}


#header .header_main h1{
	font-size:20px;
	margin:0;
	padding:0 10px;
	color:blue;
	height:40px;
	line-height:40px;
	float:left;
}

#header .header_search{
	padding:6px 0 0 0;
	float:left;
}
#header .header_search .search{
	width:300px;
	height:24px;
	border:1px solid #ccc;
	background:white;
	color:#666;
	font-size:14px;
	text-indent:5px;
}

#header .header_button{
	padding:3px;
	float:left;
}

#header .header_member{
	float:right;
	color:#555;
	height:51px;
	line-height:51px;
	font-size:16px;
}

#header .header_member a{
	text-decoration:none;
	color:#555;
	font-size:14px;
}

.ui-widget-header{
	background:url(../img/bj2.png);
}
.ui-dialog-title{
	color:blue;
}

.ui-state-default, .ui-widget-content .ui-state-default, .ui-widget-header .ui-state-default{
	background:url(../img/bj.png);
}
.ui-state-active, .ui-widget-content .ui-state-active, .ui-widget-header .ui-state-default{
	background:url(../img/bj2.png);
}

p .text{
	border-radius:5px;
	width:180px;
	height:25px;
	align:center;
}

.ui-menu .ui-menu-item a.ui-state-focus{
	background:#999;
}
.ui-menu .ui-menu-item a{
	color:blue;
}


====================================

html页面:


<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title>自定义插件</title>
	<script type="text/javascript" src='js/jquery.js'></script>
	<script type="text/javascript" src="js/jquery.ui.js"></script>
	<script type="text/javascript" src="js/index.js"></script>
	<link rel="shortcut icon" type="image/x-icon" href="img/1.jpg" />
	<link type="text/css" rel="stylesheet" href="css/uistyle/jquery.ui.css" />
	<link type="text/css" rel="stylesheet" href="css/style.css"/>
	<style>

	</style>
</head>
<body>
<div id="header">
	<div class="header_main">
		<h1>知问</h1>
		<div class="header_search">
			<input type="text" name="search" class="search"/>
		</div>
		<div class="header_button">
			<button class="search_button">but版查询</button>
		</div>
		<div class="header_member">
			<a href="#" id="reg_a">注册</a>|<a href="#" id="login_a">登陆</a>
		</div>
	</div>
</div>
<div id="reg">
<p>
	<label for="user">用户名：</label>
	<input type="text" name="user" class="text" id="user" title="请输入用户名" />
	<span class="star"> * </span>
	
</p>

<p>
	<label for="pass">密　码：</label>
	<input type="password" name="pass" class="text" id="pass" title="请输入密码" />
	<span class="star">*</span>
</p>

<p>
	<label for="email">邮　箱：</label>
	<input type="text" name="email" class="text" id="email" title="请输入邮箱" />
</p>
<p>
	<label>性　别：</label>
	<input type="radio" name="sex" value="male" id="male" checked="checked">
	<label for="male">男</label></input>	
   	
	<input type="radio" name="sex" value="female" id="female">
	<label for="female">女</label></input>
</p>
<p>
	<label for="date">生　日：</label>
	<input type="text" name="date" class="text" id="date" readonly="readonly" title="请输入日期"/>
</p>

</div>

</body>
</html>










































		//第44课 知问前端-日历UI 上 10

学习要点：
	1，日历的调用datepicker()方法
	2，修改datepicker()样式
	3，datepicker()方法的属性
	4，datepicker()方法的事件
	日历（datepicker）UI，可以让用户更加直观的，更加方便的输入日期，并且还考虑不同国家的语言限制，包括汉语等。
		
=========================================
js页面：

$(function(){
$(".search_button").button({
	icons:{
		primary:"ui-icon-search",
	}
});
$("#reg").dialog({
	title:"会员注册",
	autoOpen:true,
	modal:true,
	resizable:false,
	width:320,
	height:340,
	buttons:{
		"提交":function(){},
		"取消":function(){
			$(this).dialog("close");
		}
	}
});

//-----1，日历 datepicker()方法的调用
//$("#date").datepicker();




//-----2，修改datepicker()样式。


//-----修改日历标题域的背景
	//日历UI的header(标题)背景和对话框UI的背景采用的是同一个class,所以，在此之前已经被修改，所以，这里无须再修改了。    以下内容需要在CSS中设置。
	//.ui-widget-header{
	//	background:url(../img/bj.png);
	//}

	

//-----修改当天日期的样式
	//注意修改当天的样式时要记得限制是某个区域的，预防此类名也许会与其它域中的类名相同。
	/*日历UI的今天单元格样式
	/*这里的.ui-datepicker-today是父元素的类名，.ui-stat-highlight是当前元素的类名
	.ui-datepicker-today .ui-state-highlight{
	
		border:1px solid blue;
		color:red;
	}*/

	
//-----修改选定日期的样式
	/*日历UI的日期选定单元格样式
	选定是指选完后再次点击出现时显示的样式
	.ui-datepicker-current-day .ui-state-active{
		border:1px solid black;
		color:black;
	}*/
	




//-----3，datepicker()方法的属性
	//日历方法有两种形式：1，datepicker(options),options是以对象键值对的形式传参，每个键值对表示一个选项：2:datepicker("option",param),action是操作对话框方法的字符串，param则是option的某个选项。
	
//-----把日历改成中文版
	//注意：默认情况下，日历显示为英文，如果你想使用中文日历，直接引入中文语言包即可，或者把中文语言包的几行代码整合到某个js文件里即可。 各种语言包存放在：jquery-ui-1.10.4.custom\development-bundle\ui\i18n 中。中文包名为jquery.ui.datepicker-zh-CN.js  、将包中的内容全部复制到jquery.ui.js中，然后再把jquery.ui.js文件的类型改为utf-8，即可得到中文版的日历。

//-----日期格式代码
/*
	d	月份中的天，从1到31
	dd	月份中的天，从01到31
	o	年份中的天，从1到366
	oo	年份中的天，从01到366
	D	星期中的天的缩写名称（Mon,Tue等）
	DD	星期中的天的全写名称（Monday,Tuesday等）
	m	月份，人1到12
	mm	月份，从01到12
	M	月份的缩写名称(Jan,Feb等)
	MM	月份的值全写名称(January,February等)
	y	两位数字的年份（14表示2014）
	yy	四位数字的年份(2014)
	@	从01/01/1997至今的毫秒数
	

//-----指定日历返回的日期格式 dateFormat mm/dd/yy(时间)
$("#date").datepicker({
	//dateFormat:"yy-mm-dd",	//年，月，日
	//dateFormat:"d-m-y"		//日，月，年
	dateFormat:"mm-dd-yy"
});



//-----指定星期中的天的长格式。dayNames(英文日期/数组)
	//比如：Sunday,Monday等，中文，星期日  长格式就是全名的意思。
	//中文的长格式（全名）因为太长，放不下，所以在日历中不会显现出效果，
$("#date").datepicker({
	dayNames:["星期一","星期二","星期三","星期四","星期五","星期六","星期日"],
});


//-----指定星期中的天的短格式。 dayNamesShort(英文日期/数组)
	//比如：Sun, Mon等。
	//中文的短格式和长格式一样在日历中不会显现出效果，
$("#date").datepicker({
	dayNamesShort:["星期一","星期二","星期三","星期四","星期五","星期六","星期日"],
});



//-----指定星期中天的最小格式。 dayNamesMin(英文日期/数组)
	//比如： Su, Mo 等。
$("#date").datepicker({
	dayNamesMin:["日","一","二","三","四","五","六"]
});


//-----指定月份的长格式 。 monthNames(英文月分/数组)
//-----指定月份的短格式。 monthNamesShort(英文月份/数组)
//-----让日期显示到指定的input域。altField（无/字符串）
//-----设置显示在其它input域中的日期格式
//-----在日期的<input>域后面附加文本。 appendText(无、字符串)
//-----显示周。 showWeek(false、布尔值)	
//-----显示周的标题。 weekHeader("WK"/字符串)
//-----设置日历面板以星期几开头。firstDay(0/数值)
	//如：January,February等,数组必须从January开始。
$("#date").datepicker({
	monthNames:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"]
});



//-----指定月份的短格式。 monthNamesShort(英文月份/数组)
	//如: Jan, Feb等，数组必须从January开始。
	//注： 中文的月份短格式在日历中没有效果。
$("#date").datepicker({
	monthNamesShort:["一","二","三","四","五","六","七","八","九","十","十一","十二"]
});

//-----让日期显示到指定的input域。altField（无/字符串）
$("#date").datepicker({
	altField:"#abc"
});



//-----设置显示在其它input域中的日期格式
$("#date").datepicker({
	altFormat:"dd-mm-yy",
});


//-----在日期的<input>域后面附加文本。 appendText(无、字符串)
$("#date").datepicker({
	appendText:"日历",
});


//-----显示周。 showWeek(false、布尔值)	
$("#date").datepicker({
	showWeek:true,	
});


//-----显示周的标题。 weekHeader("WK"/字符串)
$("#date").datepicker({
	weekHeader:"周",
});


//-----设置日历面板以星期几开头。firstDay(0/数值)
$("#date").datepicker({
	firstDay:1, //1就是星期一
});
------------------------------------------

*/

	//汇总

$("#date").datepicker({
	//指定日历返回的日期格式 dateFormat mm/dd/yy(时间)
	dateFormat:"yy-mm-dd",
	//星期中天的长格式
	//dayNames:["星期一","星期二","星期三","星期四","星期五","星期六","星期日"],

  	//星期中的天的短格式。 dayNamesShort(英文日期/数组)
	//dayNamesShort:["星期一","星期二","星期三","星期四","星期五","星期六","星期日"],

	//指定星期中天的最小格式。 dayNamesMin(英文日期/数组)
	dayNamesMin:["日","一","二","三","四","五","六"],

	//指定月份的长格式 。 monthNames(英文月分/数组)
	monthNames:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],

	//指定月份的短格式
	//monthNamesShort:["一","二","三","四","五","六","七","八","九","十","十一","十二"]

	//让日期显示到指定的input域
	altField:"#abc",

	//设置显示在其它input域中的日期格式
	altFormat:"dd-mm-yy",

	//在日期的<input>域后面附加文本
	appendText:"日历",

	//显示周。 showWeek(false、布尔值)
	showWeek:true,		

	//显示周的标题。 weekHeader("WK"/字符串)
	weekHeader:"周",

	//设置日历面板以星期几开头。firstDay(0/数值)
	firstDay:1, //1就是星期一
});

});


===============================================

CSS页面：
body{
	margin:51px 0 0 0;
	padding:0;
	font-size:12px;
	background:#fff;
}
#header{
	width:100%;
	height:51px;
	background:url(../img/bj2.png);
	position:absolute;
	top:0;
}
#header .header_main{
	width:800px;
	height:51px;
	margin:0px auto;
}

#header .header_main h1{
	font-size:20px;
	margin:0;
	padding:0 10px;
	color:blue;
	height:40px;
	line-height:40px;
	float:left;
}

#header .header_search{
	padding:6px 0 0 0;
	float:left;
}
#header .header_search .search{
	width:300px;
	height:24px;
	border:1px solid #ccc;
	background:white;
	color:#666;
	font-size:14px;
	text-indent:5px;
}

#header .header_button{
	padding:3px;
	float:left;
}

#header .header_member{
	float:right;
	color:#555;
	height:51px;
	line-height:51px;
	font-size:16px;
}

#header .header_member a{
	text-decoration:none;
	color:#555;
	font-size:14px;
}


#reg{
	padding:15px 0 0 15px;
}

#reg p{
	margin:10px 0;
	padding:0;
}

#reg p label{
	font:normal bold 14px normal;
	color:#666;
}

#reg .star{
	font-sie:20px;
	color:red;
}


#reg .text{
	border-radius:5px;
	border:1px solid #ccc;
	background:#fff;
	width:200px;
	height:25px;
	line-height:25px;
	text-indent:5px;
	font-size:13px;
	color:#666;
}


/*设置对话框标题域与对话框中日历的标题域的背景*/
.ui-widget-header{
	background:url(../img/bj.png);
}


/*日历UI的今天单元格样式*/
/*这里的.ui-datepicker-today是父元素的类名，.ui-stat-highlight是当前元素的类名*/
.ui-datepicker-today .ui-state-highlight{
	border:1px solid blue;
	color:red;
}


/*日历UI的日期选定单元格样式*/
/*选定是指选完后再次点击出现时显示的样式*/
.ui-datepicker-current-day .ui-state-active{
	border:1px solid black;
	color:black;
}


=============================================


html页面


<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title>自定义插件</title>
	<script type="text/javascript" src='js/jquery.js'></script>
	<script type="text/javascript" src="js/jquery.ui.js"></script>
	<script type="text/javascript" src="js/index.js"></script>
	<link rel="shortcut icon" type="image/x-icon" href="img/1.jpg" />
	<link type="text/css" rel="stylesheet" href="css/uistyle/jquery.ui.css" />
	<link type="text/css" rel="stylesheet" href="css/style.css"/>
	<style>

	</style>
</head>
<body>
<div id="header">
	<div class="header_main">
		<h1>知问</h1>
		<div class="header_search">
			<input type="text" name="search" class="search"/>
		</div>
		<div class="header_button">
			<button class="search_button">but版查询</button>
		</div>
		<div class="header_member">
			<a href="#" id="reg_a">注册</a>|<a href="#" id="login_a">登陆</a>
		</div>
	</div>
</div>
<div id="reg">
<p>
	<label for="user">用户名：</label>
	<input type="text" name="user" class="text" id="user" title="请输入用户名" />
	<span class="star"> * </span>
	
</p>

<p>
	<label for="pass">密　码：</label>
	<input type="password" name="pass" class="text" id="pass" title="请输入密码" />
	<span class="star">*</span>
</p>

<p>
	<label for="email">邮　箱：</label>
	<input type="text" name="email" class="text" id="email" title="请输入邮箱" />
</p>
<p>
	<label>性　别：</label>
	<input type="radio" name="sex" value="male" id="male" checked="checked">
	<label for="male">男</label></input>	
   	
	<input type="radio" name="sex" value="female" id="female">
	<label for="female">女</label></input>
</p>
<p>
	<label for="date">生　日：</label>
	<input type="text" name="date" class="text" id="date" readonly="readonly" title="请输入日期"/>
</p>

</div>
<input type="text" id="abc"/>
</body>
</html>
































		第45课 知问前端-日历UI 中 11

学习要点：
	1，日历的调用datepicker()方法
	2，修改datepicker()样式
	3，datepicker()方法的属性
	4，datepicker()方法的事件
	日历（datepicker）UI，可以让用户更加直观的，更加方便的输入日期，并且还考虑不同国家的语言限制，包括汉语等。
		

$(function(){
$(".search_button").button({
	icons:{
		primary:"ui-icon-search",
	}
});
$("#reg").dialog({
	title:"会员注册",
	autoOpen:true,
	modal:true,
	resizable:false,
	width:320,
	height:340,
	buttons:{
		"提交":function(){},
		"取消":function(){
			$(this).dialog("close");
		}
	}
});


$("#date").datepicker({
	//指定日历返回的日期格式 dateFormat mm/dd/yy(时间)
	dateFormat:"yy-mm-dd",

	//指定星期中天的最小格式。 dayNamesMin(英文日期/数组)
	dayNamesMin:["日","一","二","三","四","五","六"],

	//指定月份的长格式 。 monthNames(英文月分/数组)
	monthNames:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],

	//让日期显示到指定的input域
	altField:"#abc",

	//设置显示在其它input域中的日期格式
	altFormat:"dd-mm-yy",

	//在日期的<input>域后面附加文本
	//appendText:"日历",

	//显示周。 showWeek(false、布尔值)
	showWeek:true,		

	//显示周的标题。 weekHeader("WK"/字符串)
	weekHeader:"周",

	//设置日历面板以星期几开头。firstDay(0/数值)
	firstDay:1, //1就是星期一
//-----禁用日历 disabled 
	//disabled:true,  //默认false 

//-----日历同时显示多个月分的面板 numberOfMonths
	//日历中同时显示的月分个数。默认为1,如果设置3，就同时显示3个月分。也可以设置数组：[3,2],就是3行2列共6个。
	//numberOfMonths:3,		同时显示三个月份的内容。
	//numberOfMonths:[2,3],  	同时显示两行三列共六个月的内容
	//numberOfMonths:1,		只显示一个月分的内容
	

//-----显示其它月份内容，但无法选择 showOtherMonths
	//默认为false ，如果设置为true,当月中没有使用的单元格会显示填充，但无法使用，设置为false时，会隐藏本月以外的其它日期单元格。
	//showOtherMonths:true,


//-----显示并可选择其它月份内容 selectOtherMonths
	//默认值为false.如果设置为true,表示可以选择其它月份的日期。前提是showOtherMonths设置为ture.
	//showOtherMonths:true,
	//selectOtherMonths:true,


//-----显示月份下拉列表  changeMonth
	//默认false,如果设置为true,显示快速选择月份的下拉列表，
	//下拉列表时就可以应用到中文的月份短格式了。	
	monthNamesShort:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],
	//changeMonth:true,



//----显示年份下拉列表  changeYear
	//默认false,  如果设置为true,显示快速选择年份下拉列表
	//changeYear:true,



//-----变换日历的显示顺序是从左还是从右开始  isRTL
	//isRTL:true,



//-----是否自动调整日历输入的文本框以适应日期格式的大小，
	//默认值为false,是否自动调整控件大小以适应当前的日期格式的输入。此方法在没有对文本框进行CSS设置时有效。
	//autoSize:true,



//-----以按钮形式及获取焦点的形式触发日历的显示 showOn
	//默认值为focus , 获取焦点触发。还有button 点击按钮触发和both任一事件触发。
	//showOn:"button",  //注：当以按钮形式时，默认的获取焦点形式就失效了。
	//showOn:"both",   //获取焦点和点击按钮都可触发显示日历。


//-----设置触发日历按钮上的文本	buttonText
	//showOn:"button",
	//buttonText:"按钮",


//-----设置触发日历按钮上的图片（能看到按钮） buttonImage
	//showOn:"button",
	//buttonImage:"../img/1.jpg",
//-----设置用图片代替按钮（看不到按钮） buttonImageOnly
	//设置为true则会使图片代替按钮。
	//showOn:"button",
	//buttonImageOnly:true,


//-----日历面板上显示“今天和关闭”按钮  showButtonPanel
	//默认值 false,开户显示按键面板。
	//showButtonPanel:true,
//-----设置“今天”按钮上的的文本
	//showButtonPanel:true,
	//currentText:"今天",
	//closeText:"关闭",


//-----设置鼠标悬停在上月下月的时的提示信息
	//nextText:"下月",
	//prevText:"上月",

	
//-----让上月，下月和今天的按钮上显示当前的日期。  navigationAsDateFormat
	//默认false,设置prev,next 和current的文字可以是format的日期格式。
	showButtonPanel:true,
	currentText:"今天dd",
	close:"关闭",
	nextText:"下月mm",
	prevText:"上月mm",
	navigationAsDateFormat:true,	



//-----在日历面板上的年后面加上文本  yearSuffix
	yearSuffix:"年",



//-----将日历中的月份放在年的后面  showMonthAfterYear
	showMonthAfterYear:true,
});

});


========================================

css页面

body{
	margin:51px 0 0 0;
	padding:0;
	font-size:12px;
	background:#fff;
}
#header{
	width:100%;
	height:51px;
	background:url(../img/bj2.png);
	position:absolute;
	top:0;
}
#header .header_main{
	width:800px;
	height:51px;
	margin:0px auto;
}

#header .header_main h1{
	font-size:20px;
	margin:0;
	padding:0 10px;
	color:blue;
	height:40px;
	line-height:40px;
	float:left;
}

#header .header_search{
	padding:6px 0 0 0;
	float:left;
}
#header .header_search .search{
	width:300px;
	height:24px;
	border:1px solid #ccc;
	background:white;
	color:#666;
	font-size:14px;
	text-indent:5px;
}

#header .header_button{
	padding:3px;
	float:left;
}

#header .header_member{
	float:right;
	color:#555;
	height:51px;
	line-height:51px;
	font-size:16px;
}

#header .header_member a{
	text-decoration:none;
	color:#555;
	font-size:14px;
}


#reg{
	padding:15px 0 0 15px;
}

#reg p{
	margin:10px 0;
	padding:0;
}

#reg p label{
	font:normal bold 14px normal;
	color:#666;
}

#reg .star{
	font-sie:20px;
	color:red;
}


#reg .text{
	border-radius:5px;
	border:1px solid #ccc;
	background:#fff;
	width:180px;
	height:25px;
	line-height:25px;
	text-indent:5px;
	font-size:13px;
	color:#666;
}


/*设置对话框标题域与对话框中日历的标题域的背景*/
.ui-widget-header{
	background:url(../img/bj.png);
}


/*日历UI的今天单元格样式*/
/*这里的.ui-datepicker-today是父元素的类名，.ui-stat-highlight是当前元素的类名*/
.ui-datepicker-today .ui-state-highlight{
	border:1px solid blue;
	color:red;
}


/*日历UI的日期选定单元格样式*/
/*选定是指选完后再次点击出现时显示的样式*/
.ui-datepicker-current-day .ui-state-active{
	border:1px solid black;
	color:black;
}


=================================================
html页面

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title>自定义插件</title>
	<script type="text/javascript" src='js/jquery.js'></script>
	<script type="text/javascript" src="js/jquery.ui.js"></script>
	<script type="text/javascript" src="js/index.js"></script>
	<link rel="shortcut icon" type="image/x-icon" href="img/1.jpg" />
	<link type="text/css" rel="stylesheet" href="css/uistyle/jquery.ui.css" />
	<link type="text/css" rel="stylesheet" href="css/style.css"/>
	<style>

	</style>
</head>
<body>
<div id="header">
	<div class="header_main">
		<h1>知问</h1>
		<div class="header_search">
			<input type="text" name="search" class="search"/>
		</div>
		<div class="header_button">
			<button class="search_button">but版查询</button>
		</div>
		<div class="header_member">
			<a href="#" id="reg_a">注册</a>|<a href="#" id="login_a">登陆</a>
		</div>
	</div>
</div>
<div id="reg">
<p>
	<label for="user">用户名：</label>
	<input type="text" name="user" class="text" id="user" title="请输入用户名" />
	<span class="star"> * </span>
	
</p>

<p>
	<label for="pass">密　码：</label>
	<input type="password" name="pass" class="text" id="pass" title="请输入密码" />
	<span class="star">*</span>
</p>

<p>
	<label for="email">邮　箱：</label>
	<input type="text" name="email" class="text" id="email" title="请输入邮箱" />
</p>
<p>
	<label>性　别：</label>
	<input type="radio" name="sex" value="male" id="male" checked="checked">
	<label for="male">男</label></input>	
   	
	<input type="radio" name="sex" value="female" id="female">
	<label for="female">女</label></input>
</p>
<p>
	<label for="date">生　日：</label>
	<input type="text" name="date" class="text" id="date" readonly="readonly" title="请输入日期"/>
</p>

</div>
<input type="text" id="abc"/>
</body>
</html>

================================

CSS页面：
同下面45课CSS页面

=================================
html页面
同下面45html页面























		第46课 知问前端-日历UI 下 12

学习要点：
	1，日历的调用datepicker()方法
	2，修改datepicker()样式
	3，datepicker()方法的属性
	4，datepicker()方法的事件
	日历（datepicker）UI，可以让用户更加直观的，更加方便的输入日期，并且还考虑不同国家的语言限制，包括汉语等。


$(function(){
$(".search_button").button({
	icons:{
		primary:"ui-icon-search",
	}
});
$("#reg").dialog({
	title:"会员注册",
	autoOpen:true,
	modal:true,
	resizable:false,
	width:320,
	height:340,
	buttons:{
		"提交":function(){},
		"取消":function(){
			$(this).dialog("close");
		}
	}
});

$("#date").datepicker({

//-----选择日期范围的代码
/*
x	当前日期后的X天（其中x范围从1到n）比如：1,2
-x	当前日期之前的X天（其中x范围从1到n）比如：-1，-2
xm	当前日期之后的x个月（其中x范围从1到n）比如：1m，2m
-xm	当前日期之前的x个月（其中范围从1到n）比如：-1m，-2m
xw	当前日期之后的x周（其中x范围从1到n）比如：1w，2w
-xw	当前日期之前的x周（其中x范围从1到n）比如：-1w，-2w
*/
	//指定日历返回的日期格式 dateFormat mm/dd/yy(时间)
	dateFormat:"yy-mm-dd",
	//指定星期中天的最小格式。 dayNamesMin(英文日期/数组)
	dayNamesMin:["日","一","二","三","四","五","六"],
	//让日期显示到指定的input域
	altField:"#abc",
	//设置显示在其它input域中的日期格式
	altFormat:"dd-mm-yy",
	monthNamesShort:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],
	changeMonth:true,
		
	//显示周的标题。 weekHeader("WK"/字符串)
	weekHeader:"周",
	//设置日历面板以星期几开头。firstDay(0/数值)
	firstDay:1, //1就是星期一
	//让上月，下月和今天的按钮上显示当前的日期。  navigationAsDateFormat
	//默认false,设置prev,next 和current的文字可以是format的日期格式。
	//showButtonPanel:true,
	//currentText:"今天dd",
	//close:"关闭",
	nextText:"下月mm",
	prevText:"上月mm",
	navigationAsDateFormat:true,
//-----设置年分的后缀“年”	
	//在日历面板上的年后面加上文本  yearSuffix
	yearSuffix:"年",

//-----设置日期显示的范围（天，周，月）
	//日历中可以选择的最大日期
	//在设置日期时maxDate,minDate,yearRange会相互牵制，要配合使用。
	//maxDate:2,   //显示并可选择后2天的日期
	//minDate:-2,  //显示并可选择前2天的日期，
	//maxDate:"1w",	//显示并可选择后1周的日期，
	//minDate:"-1w",//显示并可选择前1周的日期。
	//maxDate:"1m",	//显示并可选择后一个月的日期。
	//minDate:"-1m",	//显示并可选择前一个月的日期。



//-----隐藏不存在的上月或下月	hideIfNoPrevNext
	//在设置日期时maxDate,minDate,yearRange会相互牵制，要配合使用。
	//设置为true,如果上月或下月不存在。则隐藏prev或next按钮。
	//maxDate:0,
	//minDate:-8000,	//显示之前的8000天
	hideIfNoPrevNext:true,

//-----设置日历显示年份的范围
	changeMonth:true,
	changeYear:true,
	//在设置日期时maxDate,minDate,yearRange会相互牵制，要配合使用。
	yearRange:"1950:2020",


//-----预设默认选定日期，没有指定，则是当天。
	//当触发日历后直接点回国，就会返回预设的日期。
	//defaultDate:"-2", //这里预设日期为前第二天。



//-----设置“今天”按钮指向的是实际的今天还是选定的当天 gotoCurrent
	//设置为true时，“今天”按键会指向选定的当天，而不是指向实际的今天。
	showButtonPanel:true,
	currentText:"今天dd",
	close:"关闭",
	gotoCurrent:true,


//-----设置日历弹出时的效果 showAnim
	//false效果为fideIn淡入淡出
	//showAnim:false,
//-----设置日历弹出及隐藏时延迟时间  duration
	//默认为300毫秒
	//showAnim:false,
	//duration:1000,


//-----设置日历弹出隐藏的各种效果
	showAnim:"slide",
/*
bind	日历从顶部显示或消失
bounce	日历断断续续地显示或消失，垂直运动。
clip	日历从中心垂直地向上下伸展显示或消失。
slide	日历从左边显示或消失。
drop	日历从左边显示或消失，有透明度的变化。
fold	日历从左上角显示或消失。
highlight	日历显示或消失，伴随透明度和背景色的变化。
puff	日历从中心开始绽放，显示时“收缩”，消失时“生长”。
scale	日历从中心开始缩放，显示时“生长”，消失时“收缩”。
pulsate	日历以闪烁形式显示或消失。
fadeIn	日历以淡入淡出形式显示消失。
*/



//-----日历显示时触发事件	beforeShow
	//beforeShow:function(){
	//	alert("日历显示之前被调用");
	//}


//-----日期的筛选或限制	beforeShowDay
	//可以用来限制每个月的某天无法选择等。
	// beforeShowDay()方法在显示日历中的每个日期时会被调用（date参数是一个Date类对象），该方法必须返回一个数组来指定每个日期的信息。
	//参数一:该日期是否可以被选择（true：可选，false:不可选）
	//参数二：该日期单元格上使用的CSS类。
	//参数三：该日期单元格上显示的字符串提示信息。
//-----限制日历每月的1号为不可选状态 (beforeShowDay)
/*	beforeShowDay:function(date){
		if(date.getDate()==1){
			return [false];
		}else{
			return [true];
		}
	}
//-----限制日历每个周一为不可选状态  (beforeShowDay)
	beforeShowDay:function(date){
		if(date.getDay()==1){
			return [false];
		}else{
			return [true];
		}
	}

//-----同时限制日历的多种情况的日期为不可状态。(beforeShowDay)
	beforeShowDay:function(date){
		if(date.getDay()==1 || date.getDay()==2 || date.getDate()==12 ||date.getDate()==21){
			return [false];
		}else{
			return [true];
		}
	}


//-----设置日历中每月1号的字体都是大号字体
//-----日历筛选限制beforeShowDay的第二个参数“指定类名”
//-----日历筛选限制beforeShowDay的第三个参数，为筛选的对象设置悬停的提示文本
	//这里为日历对象生成了一个名为“a”的样式。在CSS中可以对其进行设置
	beforeShowDay:function(date){
		if(date.getDate()==1){
			//beforeShowDayr的三个参数如下
			return [false,"a","不能选择1号"]; 
		}else{
			return [true];
		}
	}


//-----日历中年份或月份改变时触发 onChangeMonthYear
	//onChangeMonthYear(year,month,inst)方法在日历中显示的月份或年份改变时会被调用，或者changMonth或changeYear为true时，下拉改变时也会触发。Year-当前的年，month-当年的月，inst是一个对象，可以调用一些属性获取值。

	onChangeMonthYear:function(year,month,inst){
		//alert("当前的年份是："+year);
		//alert("当前的月份是："+month);
		//for(var i in inst){
		//	document.write(i+"<br>");
		//} 
		alert(inst.currentDay);
	}
*/
/*
inst对象中包含的属性：
id 		//日历的ID名
input		//对象
selectedDay	//当前被选择的是几号
selectedMonth	//当前被选择的月份
selectedYear	//当前被选择的年份
drawMonth	//当前被选择月份的下标值。注：1月是0 ，2月是1，，，
drawYear	//当前被选择年份的下标值。（与年份相同）
inline
dpDiv		//对象
settings
append
trigger
lastVal
currentDay
currentMonth
currentYear
yearshtml
_keyEvent


//-----得到日历当前选择的日期   onSelect
	//onSelect(dateText,inst)方法在日历被关闭的时候调用，dateText是当时选中的日期字符串，inst是一个对象，可以调用一些属性获取值。
	onSelect:function(dateText,inst){
		alert("当前选择的日期是："+dateText);
	}



//-----得到日历关闭后所选择日期  onClose
	//onClose(dateText,inst)方法日历被关闭的时候调用，dateText是当时选中的日期字符串，inst是一个对象，可以调用一些属性获取值。
	onClose:function(dateText,inst){
		alert(dateText);
	}
*/



});

//-----获得日历的日期的用外部方法（当前的年份）
$("#date").click(function(){
	//alert($("#date").datepicker("getDate").getFullYear());
});


//-----设置日历的日期的外部方法
//$("#date").datepicker("setDate","2011-1-1");


//-----日历隐藏与显示的外部方法-
//没试为：show  隐藏，hide 显示   
//$("#date").datepicker("hide");


//-----删除日历的外法方法
//$("#date").datepicker("destroy");

//-----获取日历的jQuery对象的外部方法
//alert($("#date").datepicker("widget"));


//-----刷新日历的外部方法
//$("#date").datepicker("refresh");


//-----获取是否禁用日历的外部方法
//alert($("#date").datepicker("isDisabled"));


//-----设置属性的值的外部方法
//$("#date").datepicker("option","disabled",true);

//-----获取属性的值的外部方法
//alert($("#date").datepicker("option","disabled"));


});






=======================================

CSS页面

body{
	margin:51px 0 0 0;
	padding:0;
	font-size:12px;
	background:#fff;
}
#header{
	width:100%;
	height:51px;
	background:url(../img/bj2.png);
	position:absolute;
	top:0;
}
#header .header_main{
	width:800px;
	height:51px;
	margin:0px auto;
}

#header .header_main h1{
	font-size:20px;
	margin:0;
	padding:0 10px;
	color:blue;
	height:40px;
	line-height:40px;
	float:left;
}

#header .header_search{
	padding:6px 0 0 0;
	float:left;
}
#header .header_search .search{
	width:300px;
	height:24px;
	border:1px solid #ccc;
	background:white;
	color:#666;
	font-size:14px;
	text-indent:5px;
}

#header .header_button{
	padding:3px;
	float:left;
}

#header .header_member{
	float:right;
	color:#555;
	height:51px;
	line-height:51px;
	font-size:16px;
}

#header .header_member a{
	text-decoration:none;
	color:#555;
	font-size:14px;
}


#reg{
	padding:15px 0 0 15px;
}

#reg p{
	margin:10px 0;
	padding:0;
}

#reg p label{
	font:normal bold 14px normal;
	color:#666;
}

#reg .star{
	font-sie:20px;
	color:red;
}


#reg .text{
	border-radius:5px;
	border:1px solid #ccc;
	background:#fff;
	width:180px;
	height:25px;
	line-height:25px;
	text-indent:5px;
	font-size:13px;
	color:#666;
}


/*设置对话框标题域与对话框中日历的标题域的背景*/
.ui-widget-header{
	background:url(../img/bj.png);
}


/*日历UI的今天单元格样式*/
/*这里的.ui-datepicker-today是父元素的类名，.ui-stat-highlight是当前元素的类名*/
.ui-datepicker-today .ui-state-highlight{
	border:1px solid blue;
	color:red;
}


/*日历UI的日期选定单元格样式*/
/*选定是指选完后再次点击出现时显示的样式*/
.ui-datepicker-current-day .ui-state-active{
	border:1px solid black;
	color:black;
}



/*beforeShowDay日历筛选限制的第二个参数赋予的类*/
.a{
	font:italic bold 30px normal;
}


===========================================

html页面：

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title>自定义插件</title>
	<script type="text/javascript" src='js/jquery.js'></script>
	<script type="text/javascript" src="js/jquery.ui.js"></script>
	<script type="text/javascript" src="js/index.js"></script>
	<link rel="shortcut icon" type="image/x-icon" href="img/1.jpg" />
	<link type="text/css" rel="stylesheet" href="css/uistyle/jquery.ui.css" />
	<link type="text/css" rel="stylesheet" href="css/style.css"/>
	<style>

	</style>
</head>
<body>
<div id="header">
	<div class="header_main">
		<h1>知问</h1>
		<div class="header_search">
			<input type="text" name="search" class="search"/>
		</div>
		<div class="header_button">
			<button class="search_button">but版查询</button>
		</div>
		<div class="header_member">
			<a href="#" id="reg_a">注册</a>|<a href="#" id="login_a">登陆</a>
		</div>
	</div>
</div>
<div id="reg">
<p>
	<label for="user">用户名：</label>
	<input type="text" name="user" class="text" id="user" title="请输入用户名" />
	<span class="star"> * </span>
	
</p>

<p>
	<label for="pass">密　码：</label>
	<input type="password" name="pass" class="text" id="pass" title="请输入密码" />
	<span class="star">*</span>
</p>

<p>
	<label for="email">邮　箱：</label>
	<input type="text" name="email" class="text" id="email" title="请输入邮箱" />
</p>
<p>
	<label>性　别：</label>
	<input type="radio" name="sex" value="male" id="male" checked="checked">
	<label for="male">男</label></input>	
   	
	<input type="radio" name="sex" value="female" id="female">
	<label for="female">女</label></input>
</p>
<p>
	<label for="date">生　日：</label>
	<input type="text" name="date" class="text" id="date" readonly="readonly" title="请输入日期"/>
</p>

</div>
<input type="text" id="abc"/>
</body>
</html>

































		第47课 知问前端--验证插件 上 13
学习要点：
	1，使用validate.js插件
	2，默认验证规则
	3，validate()方法和选项



//-----课程笔记（文本）
	
一：使用valudate.js插件
	官网下载：http://bassistance.de/jquery-plugins/jquery-plugin-validation
	最重要的文件是validate.js,还有两个可选的辅助文件：additional-methods.js(控件 class方式)和message_zh.js(提示汉化)文件(实际使用，请使用min压缩版)。
	
//第一步：引入validate.js
	<script type="text/javascript" src="js/jquery.validate.js"></script>
	
//第二步：在JS文件中执行
	$("#reg").validate();


//验证规则的两种方式 
	validate.js的默认验证规则的写法有两种形式： 1，控件属性方式。 2，JS键值对传参方式。



//常用的验证规则
required:true		必须输入字段
email:true		必须输入正确格式的电子邮件
url:true		必须输入正确格式的网址。
data:true		必须输入正确格式的日期（IE6验证出错）
dateSO:true		必须输入正确格式的日期（ISO）(只验证格式，不验证有效)
number:true		必须输入合法的数字（负数，小数）。
digits:true		必须输入正整数 。
creditcard:true		必须输入合法的信用卡号，
equalTo:"#id"		输入值必须和#id的值 相同，用来“验证两次相同密码”
minlength:5		输入长度最小是5个字符 （汉字算一个字符）
maxlength:10		输入长度最大是10 个字符（汉字算一个字符）
rangelength:[5,10]	输入长度介于5到10 个字符之间（汉字算一个字符）
range:[5,10]		输入的数值必须介于5和10之间。
min:5			输入值不能小于5.
max:10			输入值不能大于10.
remot:"check.php"	使用ajax方法调用check.php验证输入值。


//使用控件方式验证“必填和不得小于两位”
<input type="text" class="required" minlength="2" name="user" id="user"/>

	注意：默认规则里设置布尔值的，直接写到class里即可实现。如果是数字或数组区间，直接使用属性=值的方式即可。而对于错误提示信息，可以引入中文汉化文件，或直接换即可。




//使用JS对象键值对传参方式设置
$("#reg").validate({
	rules:{
		user:{
			required:true,	//只有一个规则的话，直接user:"required"
			minlength:2,
		}
		messages:{
			required:"账号不能为空",
			minlength:"账号不得小于2位",
		}
	}
});

	注意：由于第一种形式不能设置指定的错误提示信息。我们推荐使用第二种形式，第二种形式也避免HTML的污染。


//所有规则演示
	$("#reg").validate({
		rules:{
			email:{
				email:true,
			},
			url:{
				url:true,
			}
			date:{
				date:true,
			},
			dateIOS:{
				dateIOS:true,
			},
			number:{
				number:true,
			},
			digits:{
				digits:true,
			},
			creditcard:{
				creditcard:true,
			},
			min:{
				min:5,
			},
			range:{
				range:[5,10],
			},
			rangelength:{
				rangelength:[5,10],
			},
			notpass:{
				equalTo:"#pass",	//这里的To是大写的T 
			}
		}
	});


============================================


html页面


<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title>自定义插件</title>
	<script type="text/javascript" src='js/jquery.js'></script>
	<script type="text/javascript" src="js/jquery.ui.js"></script>
	<script type="text/javascript" src="js/jquery.validate.js"></script>
	<script type="text/javascript" src="js/b.js"></script>
	<link rel="shortcut icon" type="image/x-icon" href="img/1.jpg" />
	<link type="text/css" rel="stylesheet" href="css/uistyle/jquery.ui.css" />
	<link type="text/css" rel="stylesheet" href="css/b.css"/>
	<style>
		*{
			margin:0;
			padding:0;
		}
	</style>
</head>

<body>
<form id="reg" action="123.html">
	<p>用户名：<input type="text" name="user" /></p>
	<p>email：<input type="text" name="email" /></p>
	<p>网址：<input type="text" name="url" /></p>
	<p>日期：<input type="text" name="date" /></p>
	<p>日期ISO：<input type="text" name="dateISO" /></p>
	<p>数字：<input type="text" name="number" /></p>
	<p>信用卡：<input type="text" name="creditcard" /></p>
	<p>正整数：<input type="text" name="digits" id="integer"/></p>
	<p>验证正整数：<input type="text" name="equalTo" /></p>
	<p>最小长度：<input type="text" name="minlength"/></p>
	<p>最大长度：<input type="text" name="maxlength"/></p>
	<p>长度范围：<input type="text" name="rangelength"/></p>
	<p>值范围：<input type="text" name="range"/></p>
	<p>最小值：<input type="text" name="min"/></p>
	<p>最大值：<input type="text" name="max"/></p>
	<p><input type="submit" value="提交" /></p>
</form>
</body>
</html>



=======================================================

js页面


$(function(){
/*
//-----启用validate表单验证插件
	$("#reg").validate();


//-----使用控件方式验证“必填”和“不得小于两位”
 在html文本中直接加入代码 
<input type="text" class="required" minlength="2" name="user" id="user"/> 


//-----汉化validate验证插件的错误提示信息

在jquery.validation插件包中找到dist\localization中的汉化文件：messages_zh.js 然后，将其中的错误提示内容替换正在使用的jquery.validate.js 中的messages: {下的错误提示信息 即可。



//-----使用插件键值对的方式验证 一项属性”必填“。
$("#reg").validate({
	rules:{
		user:"required",
	}
});



//-----使用插件键值对方式同时验证多项属性 "必填"和"不得小于两位"
//-----修改验证的错误提示信息
$("#reg").validate({
	rules:{
		user:{
			required:true,
			minlength:2,
		}
	},
	//修改验证的错误提示信息
	messages:{
		user:{
			required:"a账号不能为空",
			minlength:"b至少要输入2个字符",
		}
	}

});
*/

//-----常见的验证规则
$("#reg").validate({
	rules:{
//-----验证字段不能为空
		user:{
			required:true,	
		},
//-----验证输入正确邮箱格式
		email:{
			email:true,	
		},
//-----验证输入正确网址
		url:{
			url:true,	
		},
//-----验证输入正确日期
		date:{
			date:true,	
		},
//-----验证输入正确日期格式
		dateISO:{
			dateISO:true,	
		},
//-----验证输入正确数字
		number:{
			number:true,	
		},
//-----验证正确的信用卡号
		creditcard:{
			creditcard:true,  
		},
//-----验证必须为正整数
		digits:{
			digits:true,	
		},
//-----验证两次(密码)输入是否一致
		equalTo:{
			equalTo:"#integer", 
		},
//-----验证最小长度
		minlength:{
			minlength:3,	
		},
//-----验证最大长度
		maxlength:{
			maxlength:5,	
		},
//-----验证长度的范围
		rangelength:{
			rangelength: [3,5],	
		},
//-----验证值的范围
		range:{
			range:[5,10],	
		},
//-----验证最小值
		min:{
			min:5,		
		},
//-----验证最大值
		max:{
			max:5,		
		}
		
	},
     //修改错误提示信息
	messages:{
		user:{
			required:"required-不能为空",
		},

	},
});



});






































		第48课 知问前端--验证插件 中 14


//-----验证长度时提示信息自动匹配设置的长度 {0}{1}
//-----调试模式，会阻止自动提交 debug
//-----全局默认行为设置并为全局设置debug模式。
//-----代替默认提交的方式 submitHandler
//-----忽略某个字段验证 ignore
//-----群组提示group
//-----群组提示第二种方法(推荐使用这种方法)
//-----设置错误提示的class名
//-----设置错误提示的标签名
//-----统一包裹错误提示
//-----设置成功后加载的class
//-----输入验证正确后在文本框内加入图标
//-----设置验证错误时边框变色，正确时恢复
//-----获取验证到的错误个数。并随个数改变而改变提示信息。
//-----获取错误提示句柄，不用提交及时获取值。
//-----课程笔记 

==============================

js页面：

$(function(){
/*
//-----验证长度时提示信息自动匹配设置的长度 {0}{1}
$("#reg").validate({
	rules:{
		user:{
			required:true,
			//匹配一个值
			//minlength:4,
			//匹配两个值
			rangelength:[3,5],
		}
	},
	//修改验证的错误提示信息
	messages:{
		user:{
			required:"a账号不能为空",
			//匹配一个值
			//minlength:jQuery.format("b至少要输入{0}个字符"), 教学如此，但测试无效
			//minlength:$.format("b至少要输入{0}个字符"),  教学如此，但测试无效
			//minlength:"b至少要输入{0}个字符",  此方法有效。
			//匹配两个值
			rangelength:"b至少要输入{0}-{1}个字符！", 
		}
	}
});

//-----调试模式，会阻止自动提交 debug
$("#reg").validate({
	//调试模式，会阻止自动提交
	debug:true,
	rules:{
		user:{
			required:true,
			minlength:2,
		}
	},
	messages:{
		user:{
			required:"不能为空",
			minlength:"到少要输入{0}个字符",
		}
	}
});



//-----全局默认行为设置并为全局设置debug模式。
$.validator.setDefaults({
	debug:true
});
$("#reg").validate({
	rules:{
		user:{
			required:true,
			minlength:2,
		},
	},
	messages:{
		user:{
			required:"不能是空的",
			minlength:"至少需要{0}个字符",
		}
	}
});

//-----代替默认提交的方式 submitHandler
$("#reg").validate({
	//当验证成功后执行，而且阻止了默认提交
	//一秀用于ajax的异步提交使用。
	submitHandler:function(form){
		//alert(form);
		alert("验证成功，准备提交");
	},
	rules:{
		user:{
			required:true,
			minlength:3,
		}
	},
	messages:{
		user:{
			required:"不能为空！",
			minlength:"至少要{0}个字符"
		}
	}
});




//-----忽略某个字段验证 ignore

$("#reg").validate({
	ignore:"#pass",
	rules:{
		user:{
			required:true,
			minlength:2,
		},
		pass:{
			required:true,
			minlength:6,
		}

	},
	messages:{
		user:{
			required:"不能是空的！",
			minlength:"到少要输入{0}个字符",
		},
		pass:{
			required:"不可以空",
			minlength:"到少要{0}个字符"
		}

	},
});





//-----群组提示group

$("#reg").validate({
	groups:{
		myerror:"user pass",
	},
	focusInvalid:false,
	errorPlacement:function(error,element){
		//alert(element[0]);   //input 元素
		//alert(error);  	//错误元素对象 
		$.each(error,function(index,value){
			//alert(index+" "+$(value).html()); //遍历了两个错误
			$(".myerror").html($(".myerror").html()+$(value).html());
		});
	},
	rules:{
		user:{
			required:true,
			minlength:2,
		},
		pass:{
			required:true,
			minlength:6,
		}

	},
	messages:{
		user:{
			required:"不能是空的！",
			minlength:"到少要输入{0}个字符",
		},
		pass:{
			required:"不可以空",
			minlength:"到少要{0}个字符"
		}

	},
});




//-----群组提示第二种方法(推荐使用这种方法)

$("#reg").validate({
	groups:{
		error_user:"user",
		error_pass:"pass",
	},  		//其实这时的 groups{}的内容可以去掉，直接用下面的Placement原生直接获取错误
	errorPlacement:function(error,element){
		error.appendTo(".myerror");  //自动将获取的错误添加到类名为.myerror的元素中。
	},

	rules:{
		user:{
			required:true,
			minlength:2,
		},
		pass:{
			required:true,
			minlength:6,
		}

	},
	messages:{
		user:{
			required:"不能是空的！",
			minlength:"到少要输入{0}个字符",
		},
		pass:{
			required:"不可以空",
			minlength:"到少要{0}个字符"
		}

	},
});


$("#reg").validate({
	
	errorPlacement:function(error,element){
		error.appendTo(".myerror");  //自动将获取的错误添加到类名为.myerror的元素中。
	},

//-----设置错误提示的class名
	errorClass:"abc",

//-----设置错误提示的标签名
	errorElement:"p",
	rules:{
		user:{
			required:true,
			minlength:2,
		},
		pass:{
			required:true,
			minlength:6,
		}

	},
	messages:{
		user:{
			required:"不能是空的！",
			minlength:"到少要输入{0}个字符",
		},
		pass:{
			required:"不可以空",
			minlength:"到少要{0}个字符"
		}

	},
});



*/


$("#reg").validate({

//-----统一包裹错误提示
	//errorLabelContainer:"ol.myerror",
	//wrapper:"li",

//-----设置成功后加载的class
	success:"abc", 	//验证成功后添加了一个类
/*  在CSS中设置这个类的样式。
.abc{
	border:5px solid green;
}


//-----输入验证正确后在文本框内加入图标
在CSS中直接设置valid样式即可 （valid是内置的元素）
.valid{
	background:url(../img/a.ico) no-repeat right;
}


//-----设置验证错误时边框变色，正确时恢复
	highlight:function(element,errorClass){
		$(element).css("border","1px solid red");
	},
	unhighlight:function(element,errorClass){
		$(element).css("border","1px solid black");
	},



	invalidHandler:function(event,validator){
//-----获取验证到的错误个数。并随个数改变而改变提示信息。
		var error= validator.numberOfInvalids();
		if(error){
			$("p.myerror").html("您有"+error+"个错误");
		}
	},
	submitHandler:function(form){
		//if(error==0) $("p.myerror").hide();
		//因为到这时是以经没有错误了，所可以以直接
		$(".myerror").hied();
	},

*/

//-----获取错误提示句柄，不用提交及时获取值。
	//即在输入的同时提示信息会随验证的对错而自动显示或消失。
	showErrors:function(errorMap,errorList){
		//$.each(errorMap,function(index,value){
			//alert(index+" "+value);
		//});
		//alert(errorMap.user);
		//alert(errorList[0].element);
		//alert(errorList[0].message);
	
		var error = this.numberOfInvalids();
		if(error){
			$(".myerror").html("您有"+error+"条错误信息");
		}else{
			$(".myerror").hide();
		}
		this.defaultShowErrors();
	},

	rules:{
		user:{
			required:true,
			minlength:2,
		},
		pass:{
			required:true,
			minlength:6,
		}

	},
	messages:{
		user:{
			required:"不能是空的！",
			minlength:"到少要输入{0}个字符",
		},
		pass:{
			required:"不可以空",
			minlength:"到少要{0}个字符"
		}

	},
});

});



=======================================


//-----课程笔记



三：validate()的方法和选项
	除了默认的验证规则外，validate.js还提供了大量的其他属性和方法供开发者使用。比如，调试属性，错误提示位置一系列比较有用的选项。

//jquery.format 格式化错误提示
$("#reg").validate({
	rules:{
		user:{
			required:true,
			minlength:5,
			rangelength:[5,10],
		}
	},
	messages:{
		user:{
			required:"账号不能为空",
			minlength:jQuery.format("账号悄得小于{0}位"),
			rangelength:jQuery.format("账号限制在{0}-{1}位"),
		}
	}
});



//开启调试模式禁止提交
	$("#reg").validate({
		debug:true,
	});


//设置调试模式为默认，可以禁止多个表单提交
	$.validator.setDefaults({
		debug:true,
	});


//使用其他方式代替默认提交
	submitHandler:function(form){
		//可以执行ajax提交，并且无须debugtrue阻止提交了
	}


//忽略某个字段验证
	ignore:"#pass",


//群组错误提示
	groups:{
		myerror:"user pass",
	}


//显示群组的错误提示
	focusInvalid:false,
	errorPlacement:function(error,element){
		$.each(error,function(index,value){
			$(".myerror").html($(".myerror").html()+$(value).html());
		});
	}

//群组错误提示，分开
	groups:{
		error_user:"user",
		error_pass:"pass",
	},  		//其实这时的 groups{}的内容可以去掉，直接用下面的Placement原生直接获取错误

//将群组的错误指定存放位置
	errorPlacement:function(error,element){
		error.appendTo(".myerror");  //自动将获取合并错误添加到类名为.myerror的元素中。
	},



//设置错误提示的class名
	errorClass:"error_list",



//设置错误提示的标签
	errorElement:"p",


//统一包裹错误提示
	errorLabelContainer:"o1.error",
	wrapper:"li",



//设置成功后加载的class
	success:"success",


//使用方法加载class并添加文本
	success:function(label){
		label.addClass("success").text("ok");
	}


//高亮显示有错误的元素，变色式
	highlight:function(element,errorClass){
		$(element).fadeOut(function(){
			$(element).fadeIn();
		});
	}

	highlight:function(element,errorClass){
		$(element).css("border","1px solid red");
	}


//成功的元素移出错误高亮
	unhighlight:function(element,errorClass){
		$(element),css("border","solid #ccc");
	}



//表单提交时获取信息
	invalidHandler:function(event,validator){
		var errors=validator.numberOfInvalis();
		if(errors){
			$(".myerror").html("您有"+errors+"个表单错误");
		}
	}





//获取错误提示句柄，不用提交及时获取值。
	showErrors:function(errorMap,errorList){
		var errors=this.numberOfInvalis();
		if(errors){
			$(".myerror").html("您有"+errors+"个错误");
		}else{
			$(".myerror").hide();
		}
		this.defaultShowErrors();
	}			//执行默认错误
	



==========================================

CSS面页
.valid{
	background:url(../img/1.jpg) no-repeat right;
}
.abc{
	border:5px solid green;
}


==========================================
html页面

.valid{
	background:url(../img/1.jpg) no-repeat right;
}
.abc{
	border:5px solid green;
}







































		第49课 知问前端--验证插件 下 15


//-----验证用户名是否被占用
/*
$(function(){

	submitHandler:function(form){
		alert("验证成功");
	}

	$("#reg").validate({
		submitHandler:function(form){
			alert("成功后提交");
		},
		rules:{
			user:{
				required:true,
				minlength:2,
//验证用户是否被占用
				//remote:"user.php",
			},
			pass:{
				required:true,
				minlength:6,
			}
		},
		messages:{
			user:{
				required:"账号不能为空",
				minlength: ("至少需要{0}个字符"),
//验证用户是否被占用
				//remote:"用户名被占用",
			},
			pass:{
				required:"密码不能为空",
				minlength:"至少需要{0}个字符",
			},
		}
	});
});



//-----同时传递多个值到远程端（同时验证用户名和密码）
$(function(){
	$("#reg").validate({
		submitHandler:function(form){
			alert("成功后提交");
		},
		rules:{
			user:{
				required:true,
				minlength:2,
			},
			pass:{
				required:true,
				minlength:6,
//同时传递多个值到远程端
				remote:{
					url:"user.php",
					type:"post",  //不加这条，默认为GET方式。
					dataType:"json", //默认传递数据类型
					data:{
						user:function(){
							return $("#user").val();
						},
					},
				}, 

			},
		},
		messages:{
			user:{
				required:"账号不能为空",
				minlength: ("至少需要{0}个字符"),
			},
			pass:{
				required:"密码不能为空",
				minlength:"至少需要{0}个字符",
				remote:"账号或密码不正确!",
			},
		}
	});
});


//-----validate验证相关操作
	//取消提交验证
	//设置鼠标离开不触发验证,点击提交时才验证
	//设置键盘按下弹起不触发验证
	//设置点击 checkbox和radio点击不触发验证
	//不让错误提示元素获得焦点
	//隐藏验证错误提示
	//屏蔽验证时提示title信息

$(function(){
	$("#reg").validate({
	//--取消提交验证
	//onsubmit:false,		//默认是true
	//注意：设置为false会导致直接传统提交，不会实现验证功能，一般是用于keyup/click/blur验证提交


	//--设置鼠标离开不触发验证,点击提交时才验证
	//onfocusout:false,	//默认为true


	//--设置键盘按下弹起不触发验证
	//onkeyup:false,		//默认为true
	//注意：只要设置了，在测试的浏览器不管是false还是true都不触发

	//--设置点击 checkbox和radio点击不触发验证
	//onclick:false,		//默认为true

	//--不让错误提示元素获得焦点

	//--隐藏验证错误提示
	//--屏蔽验证时提示title信息
	//当点击提交时，如果获取到错误，默认会把焦点放置在第一条错误元素上，当设置了focusInvalid，那么提交后焦点就不会放在错误元素上。
	//focusInvalid:false,	//默认为true


	//--隐藏验证错误提示
	//提示错误时，隐藏错误提示，不能和focusInvalid一起用，冲突。
	//focusCleanup:true,	//默认为false


	//--屏蔽验证时提示title信息
	//--如果表单元素设置了title值，且messages为默认，就会读取title值的错误信息，我们可以通过ignoreTitle:true,设置为true,屏蔽这一个功能 。
	//ignoreTitle:true,	//默认为false

		submitHandler:function(form){
			alert("成功后提交");
		},
		rules:{
			user:{
				required:true,
				minlength:2,
			},
			pass:{
				required:true,
				minlength:6,
				remote:{
					url:"user.php",
					type:"post",  
					dataType:"json", 
					data:{
						user:function(){
							return $("#user").val();
						},
					},
				}, 

			},
		},
		messages:{
			user:{
				required:"账号不能为空",
				minlength: ("至少需要{0}个字符"),
			},
			pass:{
				required:"密码不能为空",
				minlength:"至少需要{0}个字符",
				remote:"账号或密码不正确!",
			},
		}
	});
//-----判断表单所验证的元素是否全部有效
	//alert($("#reg").valid());	//全部有效返回true

});
*/

//-----单独验证表单项。
$(function(){
	$("#reg").validate();
	$("#user").rules("add",{
		required:true,
		minlength:2,
		messages:{
			required:"不可以空",
			minlength:"2个以上",
		}
	});


//-----删除所有验证规则
	//$("#user").rules("remove");

//-----删除指定验证规则
	//$("#user").rules("remove","required min max");


//-----自定义验证规则
	$("#code").rules("add",{
		required:true,
		code:true,
		messages:{
			required:"邮编不能为空",
		}
	});

	//--定义规则
	$.validator.addMethod("code",function(value,element){
		//首尾限制在0到9的6位数字。
		var tel=/^[0-9]{6}$/; 
		return this.optional(element) || (tel.test(value));
	},"请输入正确的邮编");

});






=========================================
//-----课程笔记




四:validate.js其他功能
	使用remote:url,可以对表单进行ajax验证，默认会提交当前验证的值到远程地址。如果需要提交其他的值，可以使用data选项。
	//使用ajax验证
	rules:{
		user:{
			required:true,
			minlength:2,
			remote:"user.php",
		},
	},
	
	//user.php内容
	<?php
		if($_GET["user"]=="bnbbs"){
			echo "false";
		}else{
			echo "true";
		}
	?>
	注意：远程地址只能输出"true"或"false",不能输出其他值。




	//同时传递多个值到远程端
	pass:{
		required:true,
		minlength:6,
		remote:{
			url:"user.php",
			type:"POST",
			dataType:"json",
			data:{
				user:function(){
					return $("#user").val();
				},
			},
		},
	},


	

	//user.php内容
	<?php
		if($_POST["user"]!="bnbbs" || $_POST["pass"]!="123456"){
			echo "false";
		}else{
			ehco "true",	
		}
	?>







	validate.js 提供了一些事件触发的默认值，这些值呢？，大部分建议是不用更改的。
	//--取消提交验证
	onsubmit:false,		//默认是true
	注意：设置为false会导致直接传统提交，不会实现验证功能，一般是用于keyup/click/blur验证提交


	//--设置鼠标离开不触发验证
	onfocusout:false,	//默认为true


	//--设置键盘按下弹起不触发验证
	onkeyup:false,		//默认为true
	注意：只要设置了，在测试的浏览器不管是false还是true都不触发

	//--设置点击 checkbox和radio点击不触发验证
	onclick:false,		//默认为true

	//--设置错误提示后，无法获得焦点
	focusInvalid:false,	//默认为true


	//--提示错误时，隐藏错误提示，不能和focusInvalid一起用，冲突。
	focusCleanup:true,	//默认为false


	//--如果表单元素设置了title值，且messages为默认，就会读取title值的错误信息，我们可以通过ignoreTitle:true,设置为true,屏蔽这一个功能 。
	ignoreTitle:true,	//默认为false

	
	//--判断表单所验证的元素是否全部有效
	alert($("#reg").valid());	//全部有效返回true

	validate.js提供了可以单独验证每个表单元素的rules方法，不但提供了add增加验证，还提供了remove删除验证的功能 。
	//--给user增加一个表单验证
	$("#user").rules("add",{
		required:true,
		minlength:2,
		messages:{
			required:"账号不能为空"，
			minlength:jQuery.format("账号不得小于{0}位！"),
		}
	});

	
	//--删除user的所有验证规则
	$("#user").rules("remove");


	//--删除user的指定验证规则
	$("#user").rules("remove","minlength min max");

	//--添加自定义验证
	$.validator.addMethod("code",function(value,element){
		var te1=/^[0-9]{6}$/;
		return this.optional(element) || (te1.test(value));
	},"请正确填写您的邮政编码");

	//--调用自定义验证
	rules:{
		code:{
			required:true,
			code:true,
		}
	}





======================================================

html页面


<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title>自定义插件</title>
	<script type="text/javascript" src='js/jquery.js'></script>
	<script type="text/javascript" src="js/jquery.ui.js"></script>
	<script type="text/javascript" src="js/jquery.validate.js"></script>
	<script type="text/javascript" src="js/b.js"></script>
	<link rel="shortcut icon" type="image/x-icon" href="img/1.jpg" />
	<link type="text/css" rel="stylesheet" href="css/uistyle/jquery.ui.css" />
	<link type="text/css" rel="stylesheet" href="css/b.css"/>
	<style>
		*{
			margin:0;
			padding:0;
		}
	</style>
</head>

<body>
<form id="reg" action="123.html">
	<p class="myerror"></p>
	<ol class="myerror"></ol>
	<p>用户名：<input type="text" name="user" id="user" title="title信息"/></p>
	<p>密码：<input type="password" name="pass" id="pass" /></p>
	<p>邮编：<input type="text" name="code" id="code" /></p>
	<p><input type="submit" value="提交" /></p>
</form>
</body>
</html>

































		第50课 知问前端-验证注册表单 16
//-----课程笔记

学习要点：
	1，HTML部分
	2，CSS部分
	3，jquery部分

//-----获取验证到错误的个数
//-----随错误个数变换对话框的高度
//-----输入框获得焦点高亮失去焦点恢复（变化样式）
	//--获取焦点时变亮
	//--失去焦点时恢复
//-----验证正确后星号变换成图标或其它文字
//-----为元素添加一个类样式。
//-----将获取到的验证错误存放到指定的元素中

$(function(){
	$("#reg").dialog({
		autoOpen:true,
		modal:true,
		resizable:false,
		width:320,
		height:360,
		buttons:{
			"提交":function(){
				$(this).submit();
			}
		}
	}).buttonset().validate({
		suis.numberOfInvalids();


//-----随错误个数变换对话框的高度
			if(errors >0){
				$("#reg").dialog("option","height",errors*20+340);
			}else{
				$("#reg").dialog("option","height",340);
			}
	
			this.defaultShowErrors();
		},

//-----输入框获得焦点高亮失去焦点恢复（变化样式）
		highlight:function(element,errorClass){
			//element得到的是当前操作的input元素
	//--获取焦点时变亮
			$(element).css("border","1px solid #630");
		},
	//--失去焦点时恢复
		unhighlight:function(element,errorClass){
			$(element).css("border","1px solid #ccc");
//-----验证正确后星号变换成图标或其它文字
			//$(element).parent().find("span").html("ok");
//-----为元素添加一个类样式。
			$(element).parent().find("span").html("&nbsp").addClass("succ");
		},
//-----将获取到的验证错误存放到指定的元素中
		errorLabelContainer:"ol.reg_error",
		wrapper:"li",
		rules:{
			user:{
				required:true,
				minlength:2,
			},
			pass:{
				required:true,
				minlength:6,
			},
			email:{
				required:true,
				email:true,
			},
			date:{
				date:true,
			},
		},
		messages:{
			user:{
				required:"账号不能为空",
				minlength:"至少要{0}个字符",
			},
			pass:{
				required:"密码不能为空",
				minlength:"密码至少要{0}个字符",
			},
			email:{
				required:"邮箱不能为空",
				email:"请输入正确的邮箱格式",
			}
		}
	});
});




======================================================

html页面


<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title>自定义插件</title>
	<script type="text/javascript" src='js/jquery.js'></script>
	<script type="text/javascript" src="js/jquery.ui.js"></script>
	<script type="text/javascript" src="js/jquery.validate.js"></script>
	<script type="text/javascript" src="js/b.js"></script>
	<link rel="shortcut icon" type="image/x-icon" href="img/1.jpg" />
	<link type="text/css" rel="stylesheet" href="css/uistyle/jquery.ui.css" />
	<link type="text/css" rel="stylesheet" href="css/b.css"/>
	<style>

	</style>
</head>
<body>
<div id="header">
	<div class="header_main">
		<h1>知问</h1>
		<div class="header_search">
			<input type="text" name="search" class="search"/>
		</div>
		<div class="header_button">
			<button class="search_button">but版查询</button>
		</div>
		<div class="header_member">
			<a href="#" id="reg_a">注册</a>|<a href="#" id="login_a">登陆</a>
		</div>
	</div>
</div>
<form action="123.html" id="reg" title="会员注册">

<ol class="reg_error"></ol>

<p>
	<label for="user">用户名：</label>
	<input type="text" name="user" class="text" id="user" />
	<span class="star"> * </span>
	
</p>

<p>
	<label for="pass">密　码：</label>
	<input type="password" name="pass" class="text" id="pass"  />
	<span class="star">*</span>
</p>

<p>
	<label for="email">邮　箱：</label>
	<input type="text" name="email" class="text" id="email"  />
</p>
<p>
	<label>性　别：</label>
	<input type="radio" name="sex" value="male" id="male" checked="checked">
	<label for="male">男</label></input>	
   	
	<input type="radio" name="sex" value="female" id="female">
	<label for="female">女</label></input>
</p>
<p>
	<label for="date">生　日：</label>
	<input type="text" name="date" class="text" id="date" readonly="readonly" title="请输入日期"/>
</p>

</form>
<input type="text" id="abc"/>
</body>
</html>


=======================================================

css页面


body{
	margin:51px 0 0 0;
	padding:0;
	font-size:12px;
	background:#fff;
}
#header{
	width:100%;
	height:51px;
	background:url(../img/bj2.png);
	position:absolute;
	top:0;
}
#header .header_main{
	width:800px;
	height:51px;
	margin:0px auto;
}

#header .header_main h1{
	font-size:20px;
	margin:0;
	padding:0 10px;
	color:blue;
	height:40px;
	line-height:40px;
	float:left;
}

#header .header_search{
	padding:6px 0 0 0;
	float:left;
}
#header .header_search .search{
	width:300px;
	height:24px;
	border:1px solid #ccc;
	background:white;
	color:#666;
	font-size:14px;
	text-indent:5px;
}

#header .header_button{
	padding:3px;
	float:left;
}

#header .header_member{
	float:right;
	color:#555;
	height:51px;
	line-height:51px;
	font-size:16px;
}

#header .header_member a{
	text-decoration:none;
	color:#555;
	font-size:14px;
}


#reg{
	padding:15px 0 0 15px;
}

#reg p{
	margin:10px 0;
	padding:0;
}

#reg p label{
	font:normal bold 14px normal;
	color:#666;
}

/*星号的样式*/
#reg .star{
	font-sie:20px;
	color:maroon;
}

/*错误提示的样式*/
#reg ol{
	margin:0;
	padding:0 0 0 20px;
	color:maroon;
}


/*限制错误提示的高度*/
#reg ol li{
	height:20px;
}

/*验证成功后添加的class*/
#reg .succ{
	display:inline-block;
	width:20px;
	background:url(../img/right.jpg)no-repeat;
}

#reg .text{
	border-radius:5px;
	border:1px solid #ccc;
	background:#fff;
	width:180px;
	height:25px;
	line-height:25px;
	text-indent:5px;
	font-size:13px;
	color:#666;
}


/*设置对话框标题域与对话框中日历的标题域的背景*/
.ui-widget-header{
	background:url(../img/bj.png);
}


/*日历UI的今天单元格样式*/
/*这里的.ui-datepicker-today是父元素的类名，.ui-stat-highlight是当前元素的类名*/
.ui-datepicker-today .ui-state-highlight{
	border:1px solid blue;
	color:red;
}


/*日历UI的日期选定单元格样式*/
/*选定是指选完后再次点击出现时显示的样式*/
.ui-datepicker-current-day .ui-state-active{
	border:1px solid black;
	color:black;
}



/*beforeShowDay日历筛选限制的第二个参数赋予的类*/
.a{
	font:italic bold 30px normal;
}



=============================================================

//-----课程笔记

学习要点：
	1，HTML部分
	2，CSS部分
	3，jquery部分

	本节课，将使用validate.js验证插件功能，完成表单注册验证的功能。

一，HTML部分
	html部分几乎不需要更改太多，只要加个存放错误提示的列表标签即可。
	<ol class=""reg_error></ol>


二，CSS部分
	css部分主要是成功后引入一张小图标，不有错误列表样式。
	#reg p.star{
		color:maroon;
	}
	#reg p.success{
		display:inline-block;
		width:28px;
		background:url(../img/reg_succ.png)no-repeat;
	}
	#reg ol{
		margin:0;
		padding:0 0 0 20px;
	}
	#reg ol li{
		color:maroon;
	}


三，jquery部分
	jquery部分很常规，基本使用了validate.js的核心功能。
	$("#reg").dialog({
		autoOpen:false,
		modal:true,
		resizable:false,
		width:320,
		height:340,
		buttons:{
			"提交":function(){
				$(this).submit();
			}
		}
	}).buttonset().validate({
		submitHandler:function(form){
			alert("验证完成，准备提交");
		},
		showErrors:function(errorMa,errorList){
			if(errors>0){
				$("#reg").dialog("option","height",20*errors+320);
			}
			this.defaultShowErrors();
		},
		highlight:function(element,errorClass){
			$(element).css("border","1px solid #630");
		},
		unhighlight:function(element,errorClass){
			$(element).css("border","1px solid #ccc");
			$(element).parent().find("span").html("&nbsp").addClass("success");
		},
		errorLabelContainer:"lo.reg_error",
		wrapper:"li",
		rules:{
			user:{
				required:true,
				minlength:2,
			},
			pass:{
				required:true,
				minlength:6,
			},
			email:{
				required:true,
				email:true,
			},
			date:{
				date:true,
			},
		},
		messages:{
			user:{
				required:"账号不能为空！",
				minlength:jQuery.format("账号不得小于{0}位！"),
			},
			pass:{
				required:"密码不能为空！",
				minlength:jQuery.format("密码不得小于{0}位！"),
			},
			email:{
				required:"邮箱不能为空！",
				eamil:"请输入正确的邮箱",
			},
			date:{
				date:"请输入正确的日期",
			},
		},
	});





















		//第51课 知问前端--ajax表单插件 17
 

		
学习要点：
	1，核心方法
	2，option参数
	3，工具方法
//-----课程笔记
//-----ajaxForm()提交方法
//-----ajaxSubmit()提交方法
//-----设置提交到指定页面
//-----将ajax提交页面返回的内容显示在指定的元素中
//-----指定ajax传输的方式是get还是post
//-----指定传输数据类型(xml,json,script,默认null)
//-----成功提交后清除表单内容。

//-----成功提交后重置表单内容。
//-----提交时添加额外的自定义数据
//-----提交之前的行为，一般用于验证。
	//--options 获取指定属性的值。如url,type等。
	//--jqForm 获取form表单的代码内容
	//--formData 获取表单中某个字段的相关属属性如，name,value等

//-----提交失败后执行及其三个参数
//-----工具-表单序列化 formSerialize()
//-----工具-获取表单序列化中指定的某一个字段
//-----工具-得到指定字段的value值。
//-----工具-重置表单
//-----工具-清空某一个字段

$(function(){
	//注意ajax提交时需要使用localhost方式打开主页。

/*
//-----ajaxForm()提交方法
	$("#reg").ajaxForm(function(){
			//function就是success:function(response){} 
		alert("提交成功");
	});
*/
//-----ajaxSubmit()提交方法
	//当js里采用了submit()这个方法时，采用ajaxSubmit()提交
	//ajaxForm自动阻止了默认提交。
	
	$("#reg").submit(function(){
/*
	//方法一：success方式 
		$(this).ajaxSubmit(function(){ //需要在submit()方法里面使用。
			alert("ok");
		});
*/
	


	//方法二：键值对方式
		$(this).ajaxSubmit({
//-----设置提交到指定页面
	//注：默认提交页面add.php, 这里指定提交到页面test.php
			url:"test.php", 
		
//-----将ajax提交页面返回的内容显示在指定的元素中
			target:"#box",

//-----指定ajax传输的方式是get还是post
			type:"GET",

//-----指定传输数据类型(xml,json,script,默认null)
			dataType:null,

//-----成功提交后清除表单内容。
	//注：清除与重置的区别：清除会清空默认的初始value值。
			//clearForm:true,

//-----成功提交后重置表单内容。
	//注：清除与重置的区别：重置会恢复到初始的value值。
			//resetForm:true,

//-----提交时添加额外的自定义数据
			data:{
				aaa:"bbb"
			},

//-----提交之前的行为，一般用于验证。
	//--options 获取指定属性的值。如url,type等。
	//--jqForm 获取form表单的代码内容
	//--formData 获取表单中某个字段的相关属属性如，name,value等
	//提交之前执行，一般用于数据验证，
	//如果数据验证不合法，就返回false,不让提交,返回true才可以提交。
			beforeSubmit:function(formData,jqForm,options){
	//--options 获取指定属性的值。如url,type等。
				//alert(options.url);  

	//--jqForm 获取form表单的代码内容
				//alert(jqForm); //得到form的jquery对象
				//alert(jqForm.html()); //得到对象的代码内容

	//--formData 获取表单中某个字段的相关属属性如，name,value等
				//alert(formData[0].name);
				//alert(formData[0].value);
			},
//-----提交成功后执行及其两个参数 
	//responseText,提交成功后返回的内容，
	//statusText,返回提交成功的状态。
			success:function(responseText,statusText){
				alert(responseText+statusText);
			},
	
//-----提交失败后执行及其三个参数
	//errorText,错误内容
	//errorType,错误类型
			error:function(event,errorText,errorType){
				alert(errorText + errorType);
			},
		});
	
		return false;	//submit()不会阻止默认提交行为，这里人为阻止。
	});
	

//-----工具-表单序列化 formSerialize()
	//结果：user=,,,&pass=,,,,
	//alert($("#reg").formSerialize());

//-----工具-获取表单序列化中指定的某一个字段
	//alert($("#reg #user").fieldSerialize());

//-----工具-得到指定字段的value值。
	//alert($("#reg #user").fieldValue());

//-----工具-重置表单
	//alert($("#reg").resetForm());

//-----工具-清空某一个字段
	alert($("#reg #user").clearFields());
	
})


==================================================

html页面


<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title>自定义插件</title>
	<script type="text/javascript" src='js/jquery.js'></script>
	<script type="text/javascript" src="js/jquery.ui.js"></script>
	<script type="text/javascript" src="js/jquery.validate.js"></script>
	<script type="text/javascript" src="js/jquery.form.js"></script>
	<script type="text/javascript" src="js/b.js"></script>
	<link rel="shortcut icon" type="image/x-icon" href="img/1.jpg" />
	<link type="text/css" rel="stylesheet" href="css/uistyle/jquery.ui.css" />
	<link type="text/css" rel="stylesheet" href="css/b.css"/>

</head>

<body>
<div id="box"></div>
<form id="reg" action="add.php" method="post">
	<p>账 号：<input type="text" name="user" value="abc" id="user"/></p>
	<p>密 码：<input type="password" name="pass" id="pass"/></p>
	<p><input type="submit" value="提交" /></p>
</form>
</body>
</html>



=====================================================

add.php页面

<?php
	//sleep(3);  //睡眠3秒钟后执行以下内容。
	echo "add.php";
?>

==================================================

test.php页面

<?php
	echo "额外的数据".$_GET["aaa"];
	echo "test.php";
?>

====================================================


//-----课程笔记 

		
学习要点：
	1，核心方法
	2，option参数
	3，工具方法
	
	传统的表单提交，需要多次跳转页面，极大的消耗资源也缺乏良好的用户体验，而这款form.js表单的ajax提交插件将解决这个问题
	
一：核心方法
	官网下载：http://malsup.com/jquery/form/
	form.js插件有两个核心方法：ajaxForm()和ajaxSubmit(),它们集合了从控制表单元素到决定如何管理提交进行的功能。

	//ajaxForm提交方式
	$("#reg").ajaxForm(function(){
		alert("提交成功！");
	});

	注意：使用ajaxForm()方法，会直接实现ajax提交，自动阻止了默认行为，而它提交的默认页面是form控件的action属性值，提交的方式是method属性的值。


	//ajaxSubmit()提交方式 
	$("#reg").submit(function(){
		$(this).ajaxSubmit(){
			alert("提交成功");
		};
		return false;
	});
	
	注意：ajaxForm()方法，是针对form直接提交的，所以阻止了默认行为，而ajaxSubmit()方法，由于是针对submit()方法的，所以需要手动阻止默认行为，而使用了validate.js验证插件，那么ajaxSubmit()比较适合我们。




二，option参数
	option参数是一个以键值对传递的对象，可以通过这个对象，设置各种ajax提交的功能。

$("#reg").submit(function(){
	$(this).ajaxSubmit({
		url:"test.php",		//设置提交的url，可覆盖action属性
		target:"#box", 		 //服务器返回的内容存放在#box里
		type:"POST", 		//传输方式，GET或POST
		dataType:null,		//xml,json,script,默认null.
		clearForm:true,		//成功提交后，清空表单
		resetForm:true,		//成功提交后，重置表单
		data:{			//增加额外的数据提交
			aaa:"bbb",
			ccc:"ddd",
		}，
		beforeSubmit:function(formData,jqForm,options){
			alert(formData[0].name);  //得到传递表单元素的name
			alert(formData[0].value); //得到传递表单元素的value
			alert(jqForm);		//得到form的jquery对象
			alert(jqForm.html());	//得到form对象的代码内容。
			alert(options);		//得到目前options设置的属性
			alert("正在提交中....");
			return true;
		},
		success:function(responseText,statusText){
			alert(responseText+statusTest);	//成功后回调
		}，
		error:function(event,errorText,errorType){
			alert(errorText + errorType);	//错误时调用
		}
	});
	return false;
});




三：工具方法
	form.js除了提供两个核心方法之外，还提供了一些常用的工具方法，这些方法主要是在提交前或提交后对数据或表单进行处理的。

	//表单序列化
	alert($("#reg")).formSerialize();

	//序列化某一个字段
	alert($("#reg #user").fieldSerialize());

	//得到某个字段的value值
	alert($("#reg #user").fieldValue());

	//重置表单
	$("#reg").resetForm();	

	//清空某个字段
	$("#reg #user").clearFields();

























		第52课 知问前端-ajax提交表单 18


学习要点：
	1，创建数据库
	2，Loading制作
	3，ajax提交

//-----课程笔记
//-----数据交互中效果的实现
//-----取消ESC键的关闭功能
//-----隐藏数据交互提示框的标头区域
//-----获取验证到错误的个数
//-----随错误个数变换对话框的高度
//-----输入框获得焦点时高亮（变化样式）
//-----removeClass删除一个类
//-----验证正确后星号变换成图标或其它文字
//-----为元素添加一个类样式。
//-----将获取到的验证错误存放到指定的元素中


$(function(){
	$(".search_button").button();
	
//-----数据交互中效果的实现
	$("#loading").dialog({
		autoOpen:false,
		modal:true,
//-----取消ESC键的关闭功能
		closeOnEscape:false,

		resizable:false,
		draggable:false,
		width:200,
		height:50,
//-----隐藏数据交互提示框的标头区域
	}).parent().parent().find(".ui-widget-header").hide();	

	$("#reg_a").click(function(){
		$("#reg").dialog("open");
	});

	$("#reg").dialog({
		autoOpen:false,
		modal:true,
		resizable:false,
		width:320,
		height:360,
		buttons:{
			"提交":function(){
				$(this).submit();
			}
		}
	}).buttonset().validate({
	  submitHandler:function(form){
	     $(form).ajaxSubmit({
		url:"add.php",
		type:"POST",
		beforeSubmit:function(formData,jqForm,options){
			//点击提交按钮触发“数据交互框”
			$("#loading").dialog("open");
			//当点击提交按钮后，使其变灰，无法再使用
			$("#reg").dialog("widget").find("button").eq(1).button("disable");
		},
	  	success:function(responseText,statusText){
		    if(responseText){

			//当数据发送成功后，提交按钮恢复使用状态。
			$("#reg").dialog("widget").find("button").eq(1).button("enable"); 

			//数据发送成功后，数据交互提示变换图标与显示内容
		  	$("#loading").css("background","url(img/dui.jpg) no-repeat 20px center").html("数据添加成功...");
		
			//为了不马上关闭，并显现效果，延迟一秒后执行以下内容
			setTimeout(function(){
			  //关闭loading数据交互提示框
				$("#loading").dialog("close");
			  //关闭注册对话框
				$("#reg").dialog("close");
			  //重置对话框
				$("#reg").resetForm();
			  //去除对号图标的类，并替换改为*号内容
				$("#reg span.star").html("*").removeClass("succ");

			  //当再次添数据时，要把添加成功状态改回到添加中。
		  		$("#loading").css("background","url(img/quan.jpg) no-repeat 20px center").html("数据交互中...");
			},1000);
		    }

	 	}
	     });
	  },
	
		showErrors:function(errorMap,errorList){
//-----获取验证到错误的个数
			var errors = this.numberOfInvalids();


//-----随错误个数变换对话框的高度
			if(errors >0){
				$("#reg").dialog("option","height",errors*20+340);
			}else{
				$("#reg").dialog("option","height",340);
			}
	
			this.defaultShowErrors();
		},

//-----输入框获得焦点时高亮（变化样式）
		highlight:function(element,errorClass){
			//element得到的是当前操作的input元素
	//--获取焦点时变亮
			$(element).css("border","1px solid #630");
			//框后提示-错误时提示*，对时提示对号
//-----removeClass删除一个类
			$(element).parent().find("span").html("*").removeClass("succ");
		},
	//--失去焦点时恢复
		unhighlight:function(element,errorClass){
			$(element).css("border","1px solid #ccc");
//-----验证正确后星号变换成图标或其它文字
//-----为元素添加一个类样式。
//-----将获取到的验证错误存放到指定的元素中
			//$(element).parent().find("span").html("ok");
//-----为元素添加一个类样式。
			//框后提示-错误时提示*，对时提示对号
			$(element).parent().find("span").html("&nbsp").addClass("succ");
		},
//-----将获取到的验证错误存放到指定的元素中
		errorLabelContainer:"ol.reg_error",
		wrapper:"li",
		rules:{
			user:{
				required:true,
				minlength:2,
			},
			pass:{
				required:true,
				minlength:6,
			},
			email:{
				required:true,
				email:true,
			},
			date:{
				date:true,
			},
		},
		messages:{
			user:{
				required:"账号不能为空",
				minlength:"至少要{0}个字符",
			},
			pass:{
				required:"密码不能为空",
				minlength:"密码至少要{0}个字符",
			},
			email:{
				required:"邮箱不能为空",
				email:"请输入正确的邮箱格式",
			},
		},
	});
	$("#date").datepicker();
});



============================================

html页面


<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<title>自定义插件</title>
	<script type="text/javascript" src='js/jquery.js'></script>
	<script type="text/javascript" src="js/jquery.ui.js"></script>
	<script type="text/javascript" src="js/jquery.validate.js"></script>
	<script type="text/javascript" src="js/jquery.form.js"></script>
	<script type="text/javascript" src="js/b.js"></script>
	<link rel="shortcut icon" type="image/x-icon" href="img/1.jpg" />
	<link type="text/css" rel="stylesheet" href="css/uistyle/jquery.ui.css" />
	<link type="text/css" rel="stylesheet" href="css/b.css"/>
	<style>

	</style>
</head>
<body>
<div id="header">
	<div class="header_main">
		<h1>知问</h1>
		<div class="header_search">
			<input type="text" name="search" class="search"/>
		</div>
		<div class="header_button">
			<button class="search_button">but版查询</button>
		</div>
		<div class="header_member">
			<a href="#" id="reg_a">注册</a>|<a href="#" id="login_a">登陆</a>
		</div>
	</div>
</div>
<form action="123.html" id="reg" title="会员注册">

<ol class="reg_error"></ol>

<p>
	<label for="user">用户名：</label>
	<input type="text" name="user" class="text" id="user" />
	<span class="star"> * </span>
	
</p>

<p>
	<label for="pass">密　码：</label>
	<input type="password" name="pass" class="text" id="pass"  />
	<span class="star">*</span>
</p>

<p>
	<label for="email">邮　箱：</label>
	<input type="text" name="email" class="text" id="email"  />
</p>
<p>
	<label>性　别：</label>
	<input type="radio" name="sex" value="male" id="male" checked="checked">
	<label for="male">男</label></input>	
   	
	<input type="radio" name="sex" value="female" id="female">
	<label for="female">女</label></input>
</p>
<p>
	<label for="date">生　日：</label>
	<input type="text" name="birthday" class="text" id="date" readonly="readonly" />
</p>

</form>
<input type="text" id="abc"/>
<div id="loading">数据交互中...</div>
</body>
</html>


===================================

css页面


body{
	margin:51px 0 0 0;
	padding:0;
	font-size:12px;
	background:#fff;
}
#header{
	width:100%;
	height:51px;
	background:url(../img/bj2.png);
	position:absolute;
	top:0;
}
#header .header_main{
	width:800px;
	height:51px;
	margin:0px auto;
}

#header .header_main h1{
	font-size:20px;
	margin:0;
	padding:0 10px;
	color:blue;
	height:40px;
	line-height:40px;
	float:left;
}

#header .header_search{
	padding:6px 0 0 0;
	float:left;
}
#header .header_search .search{
	width:300px;
	height:24px;
	border:1px solid #ccc;
	background:white;
	color:#666;
	font-size:14px;
	text-indent:5px;
}

#header .header_button{
	padding:3px;
	float:left;
}

#header .header_member{
	float:right;
	color:#555;
	height:51px;
	line-height:51px;
	font-size:16px;
}

#header .header_member a{
	text-decoration:none;
	color:#555;
	font-size:14px;
}


#reg{
	padding:15px 0 0 15px;
}

#reg p{
	margin:10px 0;
	padding:0;
}

#reg p label{
	font:normal bold 14px normal;
	color:#666;
}

/*星号的样式*/
#reg .star{
	font-sie:20px;
	color:maroon;
}

/*错误提示的样式*/
#reg ol{
	margin:0;
	padding:0 0 0 20px;
	color:maroon;
}


/*限制错误提示的高度*/
#reg ol li{
	height:20px;
}

/*验证成功后添加的class*/
#reg .succ{
	display:inline-block;
	width:20px;
	background:url(../img/right.jpg)no-repeat;
}

#reg .text{
	border-radius:5px;
	border:1px solid #ccc;
	background:#fff;
	width:180px;
	height:25px;
	line-height:25px;
	text-indent:5px;
	font-size:13px;
	color:#666;
}


/*设置对话框标题域与对话框中日历的标题域的背景*/
.ui-widget-header{
	background:url(../img/bj.png);
}


/*日历UI的今天单元格样式*/
/*这里的.ui-datepicker-today是父元素的类名，.ui-stat-highlight是当前元素的类名*/
.ui-datepicker-today .ui-state-highlight{
	border:1px solid blue;
	color:red;
}


/*日历UI的日期选定单元格样式*/
/*选定是指选完后再次点击出现时显示的样式*/
.ui-datepicker-current-day .ui-state-active{
	border:1px solid black;
	color:black;
}



/*beforeShowDay日历筛选限制的第二个参数赋予的类*/
.a{
	font:italic bold 30px normal;
}

/*loading数据交互提示框样式*/
#loading{
	background:url(../img/quan.jpg) no-repeat 20px center;
	line-height:25px;
	font-size:14px;
	font-weight:bold;
	text-indent:40px;
}




=========================================

add.php页面


<?php
	sleep(3);
	require 'config.php';
	$user=$_POST['user'];
	$pass=$_POST['pass'];
	$email==$_POST['email'];
	$query="INSERT INTO user(user,pass,email,sex,birthday,date) VALUES('{$_POST['user']}','{$_POST['pass']}','{$_POST['email']}','{$_POST['sex']}','{$_POST['birthday']}',NOW())";
	mysql_query($query) or die('新增失败！'.mysql_error());
	echo mysql_affected_rows();
	mysql_close();
?>


==========================================

config.php页面

<?php
	header("content-Type:text/html; charset=utf-8");
	define("DB_HOST","localhost");
	define("DB_USER","root");
	define("DB_PWD","abcd1234");
	define("DB_NAME","test");
	$conn=@mysql_connect(DB_HOST,DB_USER,DB_PWD)or die("数据库连接失败".mysql_error());
	@mysql_select_db(DB_NAME) or die("数据库错误：".mysql_error());
	@mysql_query("SET NAMES UTF8")or die("字符集错误：".mysql_error());
?>


=========================================


//-----课程笔记

学习要点：
	1，创建数据库
	2，Loading制作
	3，ajax提交
	本节课，运用两大表单插件，完成数据表新增工作。

一：创建数据库
	创建一个数据库，名称为：zhiwen 	表结构为：id,user,pass,email,sex,birthday,date,
	
	所需PHP文件：config.php	;   add.php  ;	  is_user.php

//-config.php
<?php
	header('Content-Type:text/html; charset=utf-8');
	define("DB_HOST","localhost");
	define("DB_USER","root");
	define("DB_PWD","123456");
	define("DB_name","zhiwen");
	$conn=@mysql_connect(DB_HOST,DB_USER,DB_PWD)or die(mysql_error());
		@mysql_select_db(DB_NAME)or die(mysql_error());
		@mysql_query("set names utf8") or die(mysql_error);	
?>



//-add.php
<?php
	require "config.php";
	$query="insert into user(user,pass,email,sex,birthday,date) values('{$_POST['user']}','{$_POST['pass']}','{$_POST['email']}','{$_POST['sex']}','{$_POST['BIRTHDAY']}',now())";

	mysql_query($query) or die("新增失败".mysql_error());
	echo mysql_affected_rows()	//显示影响的行数，添加成功返回1
	mysql_close();
?>


//-is_user.php
<?php
	require "config.php";
	$query=mysql_query("select user from user where user='{$_POST['user']}'")or die("SQL错误");
	if(mysql_fetch_array($query,MYSQL_ASSOC)){
		echo "false";
	}else{
		echo "true";
	}
	mysql_close();	
?>



二： loading制作
	在提交表单的时候，用于网络速度问题，可能会出现不同时间延迟，所以，为了更好的用户体验，在提交等待过程中，设置loading是非常有必要的。

//-采用对话框方式提交
$("#loading").dialog({
	modal:true,
	autoOpen:false,
	closeOnEscape:false,	//让ESC失效
	resizable:false,
	draggable:false,
	width:180,
	height:50,
}).parent().parent().find(".ui-widget-header").hide();	//去掉header头



//-css部分
在CSS页面中加入：
#loading{
	background:url(../img/loading.gif)no-repeat 20px center;
	line-height:25px;
	font-size:14px;
	font-weight:bold;
	text-index:40px;
	color:#666;
}



三，ajax提交 ：
	最后，我们需要采用form.js插件对数据进行提交，而且在其他部分需要做一些修改。
submitHandler:function(form){
	$(form).ajaxSubmit({
		url:"add.php",
		type:"POST",
		beforeSubmit:function(formData,jqForm,option){
			$("#loading").dialog("open");
			$("#reg").dialog("widget").find("button").eq(1).button("disable");
		},
		success:function(responseText,statusText){
			$("#reg").dialog("widget").find("button").eq(1).button("enable");
			if(responseText){
				$("#loading").css("background","url(img/success.gif)no-repeat 20px center").html("数据提交成功....");
				setTimeout(function(){
					$("#loading").dialog("close");
					$("#loading").css("background","url(img/loading.gif)no-repeat 20px center").html("数据交互中");
					$("#reg").dialog("close");
					$("#reg").resetForm();
					$("#reg span.star").html("*").removeClass("success");
				});
			}
		}
	});
}











		第53课 知问前端-cookie插件
课程笔记（图片）
学习要点：
	1，使用cookie插件
	2，注册直接登陆

//-创建一个cookie 
//-设置cookie存储的有效期
//-设置cookie存放的路径
//-限制在指定的域名中才生成cookie
//-限制在https加密连接时才生成cookie
//-获取cookie的值
//-关闭解码/编码
//-获取所有的cookie
//-用对象方式获取某个cookie
//-删除当前目录下指定的cookie
//-删除指定目录下的cookie
//=用cookie控制登陆，注册状态
  //-在提交注册的时候生成cookie
  //-以表单的用户名生成cookie
  //-隐藏用户名和退出项
  //-控制登陆，注册的状态
  //-ajax提交注册成功后再次调取cookie并隐藏注册登陆项
//-退出登陆状态
//-删除cookie  
//-跳转到首页


$(function(){

//-创建一个cookie 
  $.cookie("user","bnbbs",{

//-设置cookie存储的有效期
	expires:7,

//-设置cookie存放的路径
	//可以指定某个文件夹。
	path:"/",


//-限制在指定的域名中才生成cookie
	domain:"www.ycku.com",	


//-限制在https加密连接时才生成cookie
	secure:true,
  });	



//-获取cookie的值
  alert($.cookie("aaa"));


//-关闭解码/编码
  //默认为false(开启状态)
  $.cookie.raw=true,
例：
  $.cookie("ccc","李炎恢");
  alert($.cookie("ccc")); 
如开启编/解码功能，那么中文会被编码，调用时会自动解码，这样可以防止乱码。
如关闭编/解码功能，那么存储与调用时都会直接用中文，这样会容易出现乱码。 
  


//-获取所有的cookie
  alert($.cookie());

//-用对象方式获取某个cookie
  alert($.cookie().ccc);


//-删除当前目录下指定的cookie
  $.removeCookie("user");


//-删除指定目录下的cookie
  $.removeCookid("suer",{
	path:"/",
  });


//=用cookie控制登陆，注册状态
  //-在提交注册的时候生成cookie
  //-以表单的用户名生成cookie
  $.cookie("user",$("#user").val());
  //$("#user").val();获取到的是用户名元素的值。

  //-隐藏用户名和退出项
  $("#用户名， #退出").hide();

  //-控制登陆，注册的状态
  if($.cookie("user")){ //如果cookie存在
	$("#用户名, #退出").show();  //显示用户名与退出项
	$("#注册, #登陆").hide();  //隐藏注册与登陆状态
	$("#用户名").html($.cookie("user")); //以cookie值重写用户名
  }else{  //如果cookie不存在
	$("#用户名, #退出").hide();  //隐藏用户名与退出项
	$("#注册, #登陆").show();    //显示注册登陆项
  }


  //-ajax提交注册成功后再次调取cookie并隐藏注册登陆项
success:function(response){
	$("#注册, #登陆").hide();  //隐藏注册与登陆状态
	$("#用户名").html($.cookie("user")); //以cookie值重写用户名
}


//-退出登陆状态
  //点击退出按钮
  $("#退出").click(function(){ 
//-删除cookie  
	$.removeCookie("user");
//-跳转到首页
	window.location.href="首页";
  });


});














		第54课 知问前端-ajax登陆
学习要点：
	1，服务器端代码
	2，jquery端代码
课程笔记（图片）





























		第55课 知问前端-选项卡UI 上
学习要点：
	1，使用tabs
	2, 修改tabs样式
	3，tabs()方法的属性
	4，tbas()方法的事件
	5，tabs中使用on
课程笔记(图片)

//-选项卡的初始化
//-选项卡折叠形式的（显示，隐藏）效果
//-禁用指定某个或多个选项卡（使其变灰无法使用）
//-设置选项卡变换的触发事件(鼠标悬停)
//也可设置为其它事件触发
//-设置页面初始化时默认显示哪个选项卡。
//-设置页面初始化时选项卡默认是为显示或是折叠
//此功能要配合collapsible:true 使用
//-设置选项卡内容显示显框的高度
	// content:根据内容伸展高度，
	// auto: 设置选项卡最高的那个高度为全部选项卡的高度，	
	// fill: 为选项卡的高度添加额外的高度（以最高的高度为基准）	
//-设置选项卡切换时的形式(淡入淡出或其它形式)
//-选项卡切换的各种形式		
//-选项卡创建事件
	//获取当前选项卡的html代码段
	//tab得到当前的活动选项卡	
	//获取当前选项卡的显示内容
	//panel得到内容选项的对象
//-选项卡切换事件（切换完成之后触发）
	//得到旧的选项卡对象
	//得到新的选项卡对象		
	//得到旧的选项卡内容	
	//得到新的选项卡内容	
//-选项卡切换事件（切换完成之前触发）
	//得到旧的选项卡对象
	//得到新的选项卡对象		
	//得到旧的选项卡内容	
	//得到新的选项卡内容		




$(function(){
//-选项卡的初始化
  $("#tabs").tabs({

//-选项卡折叠形式的（显示，隐藏）效果
	collapsible:true,  

//-禁用指定某个或多个选项卡（使其变灰无法使用）
//disabled:[0];	disabled:[0,1];	disabled:true; 设置为true 就是全部禁用
	disabled:[0,1],		

//-设置选项卡变换的触发事件(鼠标悬停)
//也可设置为其它事件触发
	event:"mouseover",	

//-设置页面初始化时默认显示哪个选项卡。
	active:1,		

//-设置页面初始化时选项卡默认是为显示或是折叠
//此功能要配合collapsible:true 使用
	active:false,		


//-设置选项卡内容显示显框的高度
	// content:根据内容伸展高度，
	heightStyle:"content",	

	// auto: 设置选项卡最高的那个高度为全部选项卡的高度，	
	heightStyle:"auto",	

	// fill: 为选项卡的高度添加额外的高度（以最高的高度为基准）	
	height:Style:"fill",		


//-设置选项卡切换时的形式(淡入淡出或其它形式)
	show:true,			//true 为淡入淡出
	hide:true,			//false 为即时显示，消失

//-选项卡切换的各种形式		
blind	从顶部显示或消失
bounce	断断续续地显示或消失，垂直运动
clip	上下向中心垂直显示或消失 
slide	从左边显示或消失
drop	从左边显示或消失，有透明度变化
fole	从左上角显示或消失
highlight	伴随透明度和背景色的变化显示或消失 
puff	从中心开始缩放，显示时“收缩”，消失时“生长”
scale	从中心开始扩大，显示时“生长”，消失时“收缩”
pulsate	以闪烁形式显示或消失

				

//-选项卡创建事件
  creata:function(event,ui){
	alert("创建tab时触发");
	//获取当前选项卡的html代码段
	//tab得到当前的活动选项卡
	alert($(ui.tab.get()).html());	

	//获取当前选项卡的显示内容
	//panel得到内容选项的对象
	alert($(ui.panel.get()).html()); 
  }

//-选项卡切换事件（切换完成之后触发）
  activate:function(event,ui){
	alert("切换到另一个选项卡之后触发");
	//得到旧的选项卡对象
	alert($(ui.oldTab.get()).html()); 
	//得到新的选项卡对象		
	alert($(ui.newTab.get()).html());
	//得到旧的选项卡内容	
	alert($(ui.oldPanel.get()).html());
	//得到新的选项卡内容	
	alert($(ui.newPanel.get()).html());	
  }



//-选项卡切换事件（切换完成之前触发）
  activate:function(event,ui){
	alert("切换到另一个选项卡之前触发");
	//得到旧的选项卡对象
	alert($(ui.oldTab.get()).html()); 
	//得到新的选项卡对象		
	alert($(ui.newTab.get()).html());
	//得到旧的选项卡内容	
	alert($(ui.oldPanel.get()).html());
	//得到新的选项卡内容	
	alert($(ui.newPanel.get()).html());	
  }

  });
});




















		第56课 知问前端-选项卡UI 下
课程笔记(图片)
//-ajax远程加载文档后触发事件
//-ajax远程加载文档之前触发事件
//-加载之前获取选项卡中的内容
//-设置ajax加载指定页面的url 
//-禁用或启用指定（全部）选项卡（外部命令）
//-获取选项卡jquery对象(外部方法)
//-更新选项卡(外部方法)
//-删除选项卡(外部方法)
//-得到tabs的option值(外部方法)
//-设置tabs的option值(外部方法)
//-点击按钮触发局部更新
//-on形式的ajax加载后触发事件
//-on形式的ajax加载后触发事件
//-on形式的选项卡切换触发事件
//-on形式的选项卡切换前触发事件


$(function(){
//-ajax远程加载文档后触发事件
	//注：此功是点击选项卡加载其它页面的内容，加载方式是以a href="***.html"的方式.
	//其它页面内容如：tab1.html
		内容为：“tab1content” 不需要加其它标签什么的     
	
			
	load:function(event,ui){
		alert("ajax远程加载文档后触发");
		alert(ui.tab.get().html());	//得到当前选项卡对象及其代码
		alert(ui.panel,get().html());	//得到当前选项卡内的内容
	}


//-ajax远程加载文档之前触发事件
	//注：此功是点击选项卡加载其它页面的内容，加载方式是以a href="***.html"的方式.
	//其它页面内容如：tab1.html
		内容为：“tab1content” 不需要加其它标签什么的  
	beforeLoad:function(event,ui){
		alert("ajax远程加载文档之前触发");
		alert(ui.tab.get().html());	//得到当前选项卡对象及其代码
		alert(ui.panel,get().html());	//得到当前选项卡内的内容 注意，这里什么也得不到，因为是在加载之前触发的，所以得不到其内容。所以在这里此功能不可用。

//-加载之前获取选项卡中的内容
		ui.jqXHR.success(function(responseText){
			alert(responseText);
		});

//-设置ajax加载指定页面的url 
		ui.ajaxSettings.url = "tabe.html";
	}
  });

例：
	html页面内容：
<div id="tabs">
	<ul>
		<li><a href="tab1.html">tab1</a></li>
		<li><a href="tab2.html">tab1</a></li>
		<li><a href="tab3.html">tab1</a></li>
	</ul>
</div>

	tab1.html页面内容：
	tab1-content

	tab2.html页面内容：
	tab1-content

	tab3.html页面内容：
	tab1-content





//-禁用或启用指定（全部）选项卡（外部命令）
	//禁用全部选项卡（变灰）
	$("#tabs").tabs("disable");

	//指定禁用第一个选项卡
	$("#tabs").tabs("disable",0);

	//启用指定选项卡
	$("#tabs").tabs("enable",0);

	//启用全部选项卡就到上面把禁用全部选项卡删除即可。


//-获取选项卡jquery对象(外部方法)
	$("#tabs").tabs("widget");



//-更新选项卡(外部方法)
	$("#tabs").tabs("refresh");


//-删除选项卡(外部方法)
	$("#tabs").tabs("destroy");


//-得到tabs的option值(外部方法)
	alert($("#tabs").tabs("option","active"));


//-设置tabs的option值(外部方法)
	$("#tabs").tabs("option","active",1);



//-点击按钮触发局部更新
	$("#button").click(function(){
		$("#tabs").tabs("load",0);
	});

例：
	html页面内容
	<input type="button" id="button" value="更新内容" />

	tab1.html页面内容
	tab1-content
	
	tab1.html修改后的页面内容
	tab1-contentaaaaa
如上：
	1，tab1页面显示在html页面中的内容为 tab1-content。
	2，当tab1页面的内容改变为tab1-contentaaaaa时，不用刷新页面，而只点击input按钮即可做到局部刷新。



//-on形式的ajax加载后触发事件
	$("#tabs").on("tabsload",function(event,ui){
		alert("ajax远程加载文档之后触发");
	});


//-on形式的ajax加载后触发事件
	$("#tabs").on("tabsbeforeload",function(event,ui){
		alert("ajax远程加载文档之前触发");
	});


//-on形式的选项卡切换触发事件
	$("#tabs").on("tabsactivate",function(event,ui){
		alert("选项卡切换触发");
	});


//-on形式的选项卡切换前触发事件
	$("#tabs").on("tabsbeforeactivate",function(event,ui){
		alert("选项卡切换前触发");
	});

});















		第57课 知问前端-折叠菜单UI
学习要点：
	1，使用accordion
	2，修改accordion样式
	3，accordion()方法的属性
	4，accordion()方法的事件
	5，accordion中使用on
课程笔记(图片)

//-accordion折叠菜单的初始化
//-collapsible设置菜单是否可以折叠
//-disabled禁用折叠菜单
//-event触发折叠菜单切换的事件
//-active:1设置页面初始化时第二个折叠菜单自动展开
//-active:true设置页面初始化时所有的折叠菜单是否自动展开
//-heightStyle 设置折叠菜单内容框的高度
	//设置全部折叠菜单的高度与最高的那个高度相同
	//设置折叠菜单内容框的高度根据内容高度而变
	//设置为折叠菜单内容添加额外的高度。
//-header 设置折叠菜单的标题标签
//-icons设置折叠菜单上的小图标（如+ ,- 号）
//-create折叠菜单创建时触发事件
//-得到当前折叠菜单标题对象及代码段
//-得到当前折叠菜单中内容及其对象
//=activate折叠菜单切换完成后触发事件
//-折叠菜单切换后得到新的标题对象及代码段
//-折叠菜单切换后得到新的折叠菜单中内容及其对象
//-折叠菜单切换后得到旧的标题对象及代码段
//-折叠菜单切换后得到旧的折叠菜单中内容及其对象
//=beforeActivate折叠菜单切换前触发事件
//-折叠菜单切换前得到新的标题对象及代码段
//-折叠菜单切换前得到新的折叠菜单中内容及其对象
//-折叠菜单切换前得到旧的标题对象及代码段
//-折叠菜单切换前得到旧的折叠菜单中内容及其对象
//-disable禁用折叠菜单（外部方法）
//-enable启用折叠菜单
//-widget获取折叠菜单jquery对象
//-refresh更新折叠菜单
//-destroy删除折叠菜单
//-得到accordion的option值
//-设置accordion的option值
//-on形式的折叠菜单切换完成后事件
//-on形式的折叠菜单切换前触发事件




html页面内容：
<div id="accordion">
	<h1>菜单1</h1>
	<div>内容1</div>
	<h1>菜单2</h1>
	<div>内容2</div>
	<h1>菜单3</h1>
	<div>内容3</div>
</div>

$(function(){

//-accordion折叠菜单的初始化
  $("#accordion").accordion({
	
//-collapsible设置菜单是否可以折叠
	//默认false,true为允许菜单折叠对应内容。
	collapsible:true,

//-disabled禁用折叠菜单
	//默认为false,true是禁用折叠菜单
	disabled:true,

//-event触发折叠菜单切换的事件
	event:mouseover,


//-active:1设置页面初始化时第二个折叠菜单自动展开
	active:1,


//-active:true设置页面初始化时所有的折叠菜单是否自动展开
	//要配合collapsibel(允许展开折叠菜单)来使用
	active:true,


//-heightStyle 设置折叠菜单内容框的高度
	
	//设置全部折叠菜单的高度与最高的那个高度相同
	heightStyle:"auto",

	//设置折叠菜单内容框的高度根据内容高度而变
	heightStyle:"content",

	//设置为折叠菜单内容添加额外的高度。
	heightStyle:"fill",


//-header 设置折叠菜单的标题标签
	header:"h1",	//这里要与想要设置的html页面中的标签名一致。



//-icons设置折叠菜单上的小图标（如+ ,- 号）
	//一般折叠菜单图标默认为右三角和下三角
	icons:{
		"header":"ui-icon-plus",
		"activeHeader":"ui-icon-minus",
	},

//-create折叠菜单创建时触发事件
	create:function(event,ui){
		alert("折叠菜单创建触发事件");
//-得到当前折叠菜单标题对象及代码段
		alert($(ui.header.get()).html());

//-得到当前折叠菜单中内容及其对象
		alert($(ui.panel.get()).html());
	}

//=activate折叠菜单切换完成后触发事件
	activate:function(event,ui){
		alert("折叠菜单切换时触发事件");

//-折叠菜单切换后得到新的标题对象及代码段
		alert($(ui.newHeader.get()).html());

//-折叠菜单切换后得到新的折叠菜单中内容及其对象
		alert($(ui.newPanel.get()).html());

//-折叠菜单切换后得到旧的标题对象及代码段
		alert($(ui.oldHeader.get()).html());

//-折叠菜单切换后得到旧的折叠菜单中内容及其对象
		alert($(ui.oldPanel.get()).html());
	}




//=beforeActivate折叠菜单切换前触发事件
	beforeActivate:function(event,ui){
		alert("折叠菜单切换时触发事件");

//-折叠菜单切换前得到新的标题对象及代码段
		alert($(ui.newHeader.get()).html());

//-折叠菜单切换前得到新的折叠菜单中内容及其对象
		alert($(ui.newPanel.get()).html());

//-折叠菜单切换前得到旧的标题对象及代码段
		alert($(ui.oldHeader.get()).html());

//-折叠菜单切换前得到旧的折叠菜单中内容及其对象
		alert($(ui.oldPanel.get()).html());
	}
  });



//-disable禁用折叠菜单（外部方法）
	$("#accordion").accordion("disable");

//-enable启用折叠菜单
	$("#accordion").accordion("enable");




//-widget获取折叠菜单jquery对象
	$("#accordion").accordion("widget");




//-refresh更新折叠菜单
	$("#accordion").accordion("refresh");


//-destroy删除折叠菜单
	$("#accordion").accordion("destroy");



//-得到accordion的option值
	alert($("#accordion").accordion("option"),"active");


//-设置accordion的option值
	$("#accordion").accordion("option","active",1);


//-on形式的折叠菜单切换完成后事件
$("#accordion").on("accordionactivate",function(event,ui){
	alert($(ui.newHeader.get()).html());
	alert($(ui.newPanel.get()).html());
	alert($(ui.oldHeader.get()).html());
	alert($(ui.oldPanel.get()).html());
});






//-on形式的折叠菜单切换前触发事件
$("#accordion").on("accordionbeforeactivate",function(event,ui){
	alert($(ui.newHeader.get()).html());
	alert($(ui.newPanel.get()).html());
	alert($(ui.oldHeader.get()).html());
	alert($(ui.oldPanel.get()).html());
});
}):














		第58课 知问前端-编辑器插件 
学习要点：
	1，编辑器简介
	2，引入uEditor
课程笔记(图片)

一：引入jquery-migrate-1.2.1.js文件，排除编辑器低版本的问题。达到兼容。
二：把编辑器文件夹包放入根目录下，
三：引入uEdit.js和uEditor.css两个文件
四：插入textara,设置规定值，
五：jquery调用运行.

//-调用uEditor插件
//在要被调用的对话框下面初始化
$("#question").dialog({
	autoOpen:true,
	modea:true,
	,,,,
	,,,
});

$(".uEditorCusstom").uEditor();













		第59课 知问前端-ajax提问系统
学习要点：
	ajax提问；
课程笔记(图片)

//-contents获得框架内容里面的元素和值



//-点击对话框中的发布触发提交事件
$("#question").dialog({
  buttons:{
    "发布";function(){
	$(this).ajaxSubmit({
		//提交到哪个页面
		url:"add_content.php",
		//传输数据的方式
		type:"POST",
		//传输相关数据内容
		data:{
			//通过cookie得到用户名
			user:$.cookie("user"),
			//通过contents()获取到框架内输入的内容
			content:$(".uEditorIframe").contents().find("#iframeBody").html(),
		}
	});
    }
  }
}); 


//-contents获得框架内容里面的元素和值
  //此句代码意思是：从框架.uEditorIframe的内容中找到 #iframeBody的内容
alert($(".uEditorIframe").contents().find("#iframeBody").html());

注：
// .uEditorIframe 是嵌入的一个框架页面它是一个html，也含有haed和body.

// contents().方法是获取框架的内容，













		第60课 知部前端-ajax显示全部（收起） 上
学习要点：
	1，ajax显示 （区域内容的“全部显示”与“收起”）
















		
		第61课 知部前端-ajax显示全部（收起） 下
学习要点：
	用截取字符串的形式显示及收起内容














		第62课 知部前端-ajax提交评论 上
学习要点:
	1，显示收起评论
	2，提交评论