//===== php配置文件相关

	php  扩展功能的开启
		1，在php/ext目录中添加相应的扩展文件
		2，在php.ini中添加或开启 相应的扩展功能
			windows 下的扩展文件是 .dll 文件
			linux	下的扩展文件是 .so 文件

		





//===== phpinfo() 下的系统常量 （环境变量）

<?php  phpinfo(); ?>
页面显示后，有一栏 PHP Variables 就是系统常量（环境变量）

$_SERVER['HTTP_HOST'];		代表主机名和端口号
$_server['DOCUMENT_ROOT'];	绝对路径










//===== PHP语言标记符

    1.	<?php ?>	
    2.	<? ?> 短标签格式   
    3.	<% %> ASP格式的标记
    4.	<script language="php"></script> 	长格式






//===== php的八种数据类型：

	string	 	字符串
	array		数组
	int		整型 
	float		浮点型
	boolean		布尔型 true,false
	object		对象型
	resource	资源型
	null		空数据类型
	


//===== 数据类型临时转型
	
	$aaa='';
	echo gettype($a).'<br>';
	
	
	$bbb=(boolean)$aaa;
	echo gettype($bbb);






//=====settype() 强制转换数据类型
	
	$get="520是什么";
	echo $get.'<br>';
	var_dump(gettype($get));
	
	settype($get,'integer');
	echo "<br>".$get."<br>";
	var_dump(gettype($get));
	
	$get1='';
	var_dump(gettype($get1));
	settype($get1,'boolean');
	var_dump(gettype($get1));









//===== $$动态变量名
	
	
	$a='d';
	echo $a.'<br>';
	
	$$a='b';
	echo $a.'<br>';
	echo $d.'<br>';
	$$$a='c';
	echo $b.'<br>';
	echo $$$a;








//===== 数值进制的类型</h1>"; 
	
	十进制：直接以数字开头如		12345

	十六进制：以0x开头 如			0x123a
	
	八进制：以0开头 如			0123
	
	二进制：以0b开头且只有0和1组成 如	0b1010101;





/===== 声明字符串的三种方式 

	$a='aa';	// 用单引声明的字串
	$b="aaa";	// 用双引声明的字串
			
			//用<<<声明的大内容的字串
				注意：该声明方法，在标识abc 的前后不可有空格
$AA=<<<abc		
slksdjflksdjfflksf
abc;
	
	





/===== 转义字符  \
	
	换行：  	\n  
	回车：  	\r 
	制表符：	\t	
	反斜线：	\\

	echo "韩超\r\n真帅<br>";
	echo '这是一张图片<img src=\'2.jpg\' />';
	$a="a\'b\'c";






//===== 设置字符集编码的两种方式
	
	echo "<meta charset='utf-8'> html设置编码方式<br>";
	
	header("content-type:text/html;charset=utf-8");

		如出现Cannot modify header information错误，修改pbp.ini文件中：“output_buffering=On” 即可








//===== global 通知函数中使用全局变量

<?php
	$arr=array('a','b');
	function demo(){
		global $arr;
		print_r($arr);
	}
	demo();
?>










//===== & 引用变量
	
	例一：
	$yy='aaaaa';
	echo $yy.'<br>';
	$yy2=&$yy;
	echo $yy2."<br>";
	
	$yy2='bbbb';
	echo $yy.'<br>'.$yy2.'<br>';
	unset($yy);
	echo $yy2;

	
	

	例二：
	$a='abc';
	function fn(&$a){
		$a='def';
	}
	解：	函数中是不可以直接调用和改变全局变量的，但引用后，就可以更改了。






//===== php 注释符

    // 		单行注释符

    #  		单行注释

    /* */ 	多行注释符






	
//===== 变量的声明：
        格式1：
            $变量名 = 变量值					$a='a';

        格式2:
            $变量名1 = $变量名2 = $变量名3..... = 值		$a=$b=$c=$d='aa';

        命名规则：
            1、变量名以$开头。
            2、变量名由字母、数字、下划线组成，不可以使用数字开头，数字可以放在变量名中间或结尾。（注意：变量名要有意义，要有描述性）。
            3、变量名严格区分大小写。

：
        驼峰命名法：
            1、单驼峰命名法
            $backgroundColor
            2、双驼峰命名法
            $BackgroundColor

            3、$background_color










//===== 普通变量与超全局变量的区别

		<?php	
			$arr=array('a','b');	//普通数组
			$_GET=array(10,20);	//超全局数组―给超全局数组赋值
			function demo(){
				global $arr;
				print_r($arr);	//函数中使用普通的全局数组必须要使用global注册
				echo '<br>';
				print_r($_GET);	//超全局数组可以直接在函数中使用
			}
			demo();
		?>








//===== 函数中使用全局变量的方法

		<?php
			$arr=array('a','b');
			function demo(){
				//--第一种方式
				global $arr;
				print_r($arr);
			
				//--第二种方式
				echo '<pre>';
					print_r($GLOBALS['arr']);
				echo '</pre>';
			}
			demo();
		?>










//=====  @ 错误抑制符
            抑制  ->  
        只是临时屏蔽错误，不影响程序的执行。但是错误依然存在。









//===== include,require 加载文件

	include 'other.php';
	include 'other.php';
	
	echo 'include 加载其它页面：可以加载多次，出错时不会终止程序，后面代码会继续执行';
	
	include_once 'other.php';
	echo 'include_once 检测后，只加载一次页面，出错后不影响后面代码的执行';
	
	require 'other.php';
	require 'other.php';
	echo 'require 可多次加载页面，出错后会终止程序，不执行后面的代码';
	
	require_once 'other.php';
	
	echo 'require_once 检测并只加载一次页面，出错后，终止程序，不执行后面的代码 ';
	










//=====怎么看 PHP 手册

        PHP的官方手册和w3c的手册怎么取舍。

        对于新手看w3c 不要看PHP的官方手册。

        函数我们要掌握三个方面：函数的功能、参数、返回值

        1、伪类型
            mixed 说明一个参数可以接受多种不同的类型。
            number 说明一个参数是一个整形或浮点型
            callback 说明一个参数是回调函数
            void
            作为返回类型的话以为这函数的返回值是没有用的，void作为参数的话表示着这个函数不接受任何参数。


        2、int count ( mixed $var [, int $mode = COUNT_NORMAL ] )

        int count ( mixed $var [, int $mode = COUNT_NORMAL ] )

        int   表示的是count函数的返回值的类型

        3、[ ] 表示的是可选的参数 ，有默认值

        4、array array ([ mixed $... ] )
        如果说参数列表中是mixed   ....表示可以有多个参数








//===== GET与POST提交方法有何区别？

	1.get方式提交的参数数据长度有限制
	2.POST方式无数据长度限制，除非服务器限制接收长度
	3.get是从服务器上获取数据，post是向服务器传送数据
	4.get是把参数数据队列加到提交表单的ACTION属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到。post是通过HTTPpost机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。 
	5.get安全性非常低，post安全性较高。





//===== 单引号和双引号的区别
（1）单引号可以使用双引号，双引号可以使用单引号
（2）单引号可以使用两种转义字符，双引号可以使用多有转义字符
（3）单引号支持单引号本身和反斜线，双引号可以使用多有转义字符
（4）单引号不解析变量，双引号解析变量，一般用大括号括起来
（5）单引号效率高于双引号效率
（6）字符串和变量之间使用点来链接，变量和变量之间也可以使用点链接
（7）字符串使用双引号定义，里面使用单引号，单引号中插入变量，变量会被解析单引号原样输出。









//=====PHP获取表单值的三种方法

<input type='text' name='userName'/>

$userName;			//简短风格

$_POST['userName'];		//中等风格
$_GET['userName'];

$HTTP_POST_VARS['userName'];	//冗长风格







//====== printf() 格式化指定数据类型

	printf('%b',2147483657);	
	
		结果：//1111111111111111



