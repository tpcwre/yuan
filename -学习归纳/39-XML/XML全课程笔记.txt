




//=====XML可以做为程序间通讯的标准

<messages>
 	<message id="a001">			//信息头
 		<sender>韩顺平</sender>		//发送人
  		<getter>张飞</getter>		//接收人
		<content>你吃了吗</content>	//发送内容
		<time>2011-11-11</time>		//发送时间
		<image>aa.gif</image>		//图片
 	</message>
</messages>






	


//=====XML可以作为配置文件（PHP中用的很多）

如mysql数据库的连接信息
  $con=mysql_connect("localhost","root","1234");
  PHP可以操作XML来做配置文件

配置文件：
<dbinfo>
<host>localhost</host>
<user>root</user>
<password>1234</password>
</dbinfo>







//=====XML可以做小型数据库
	如果我们有这样的需求，有些数据，放在数据库代价高，这样可以考虑直接放入XML文件。









//=====XML文件的组成部分
文档声明、元素、属性、注释、CDATA区及特殊字符、处理命令（processing instruction）

<?xml version="1.0" encoding="utf-8"?>  	//文档声明
<班级>						//元素
	<stu No="a001">				//属性 No="a001"
		<name>孙悟空</name>
		<sex>男</sex>
		<age>500</age>
		<介绍/>
	</stu>
	<stu No="a001" stuNo="a0&apos;0&quot;1">
		<name>白骨精</name>
		<sex>女</sex>
		<age>100</age>
		<介绍/>
	</stu>
</班级>


注： stnadalone : 为文档定义是否独立使用，默认为NO ,一般不使用它！

<?xml version="1.0" encoding="utf-8" standalone="yes"?>








//=====语法规范的XML文档

1，XML声明语句 ： <?xml version="1.0" encoding="utf-8"?>
2，必须有且仅有一个根元素
3，标记大小写敏感
4，属性值用引号
5，标记成对
6，空标记关闭
7，元素正确嵌套
	








//=====XML中要注意空格或换行会被解析

<name>宋江</name>

与

<name>
宋江
</name>

上面的两种XML形式可能会出现解析结果不一样的时候。也许空格和换行会被解析，尽量使用第一种。










//=====XML的五种实体字符

	&lt;		<
	&qt;		>
	&amp;		&
	&apos;		'
	&quot;		"

	当元素内容中夹杂着单双引号时，可以引用实体字符来解决出错的问题。

<stu No="a001" stuNo="a0&apos;0&quot;1">    //结果 "a0'0"1" 
	<name>白骨精</name>
</stu>






//=====XML中的注释语法

	<!--注释内容-->







//=====CDATA 解决XML内容中出现的特殊字符问题


基本语法 ：
<![CDATA[#@]]>

<class>
	<stu>
		<name>lee</name>
		<info><![CDATA[@!@#$$%%^&*&*(())__#$<>]]></info>
	</stu>
</class>







//=====如何使用XML文件来传递，保存一个图片
	
	使用程序先读入到内存，然后保存到XML文件的 <![CDATA[]]> 节中。







//=====XML引入CSS样式

XML页面：
<?xml version="1.0" encoding="utf-8"?>
<!--引入CSS-->
<?xml-stylesheet type="text/css" href="xml.css"?>
<class>
	<name>孙悟空</name>
</class>

CSS页面：
name{
	font-weight:bold;
	color:red;
	font-size:1cm;
}






//=====XML的规范约束文件DTD

一，注：文档规范约束技术不只有DTD,还有另一种 “Schema”.

二，DTD = document type definition :文档类型定义

三，DTD的主要作用是约束 XML ,HTML,XHTML..等文档的书写规范 它不仅运用在PHP,也运用在JAVA,.NET等语言中。

四，DTD有三种引用方式，一种是内部的，一种是外部的，一种是内外结合的

五，DTD的注释 <!--注释内容-->






//=====XHTML1.0的三种DTD

一：
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

二：
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

三：
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">







//=====引入DTD的三种方法

DTD的用法类似CSS 即可写在文档本身内部，也可用外部引用。
--内部引用DTD文档
	<!DOCTYPE 根元素 [定义内容]>

--外部DTD的引用 ： 引用外部的DTD文件
<!DOCTYPE 根元素名 SYSTEM "DTD的路径"/>


--内外部DTD文档结合引用 ：
<!DOCTYPE 根元素 SYSTEM "DTD文件路径" [定义内容]>







//=====DTD约束规范XML或其它文档的过程
//=====外部引用DTD

DTD规范-》装载到XML或其它文档-》然后再装载到校验文件checkDTD.html来解析


例：

//DTD文件：

<!ELEMENT 班级 (学生+)>
<!ELEMENT 学生 (名字,年龄,介绍)>
<!ELEMENT 名字 (#PCDATA)>
<!ELEMENT 年龄 (#PCDATA)>
<!ELEMENT 介绍 (#PCDATA)>





//xml文件：

<?xml version="1.0" encoding="utf-8"?>
<!--外部引入DTD-->
<!DOCTYPE 班级 SYSTEM "class.dtd">
<班级>
	<学生>
		<名字>周星驰</名字>
		<年龄>23</年龄>
		<介绍>学习刻苦</介绍>
		<面积>20</面积>
	</学生>
	<学生>
		<名字>周润发</名字>
		<年龄>33</年龄>
		<介绍>学习刻苦</介绍>
	</学生>
</班级>





//校验文件：

<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<script langage="javascript">	
	//实例化一个XML解析器
	var xmldoc = new ActiveXObject("Microsoft.XMLDOM");
	//开启校验功能
	xmldoc.validateOnParse =true;
	//指定对哪个XML文件校验
	xmldoc.load("xml.xml");
	//如果有错误，则输出 
	document.write("错误信息："+xmldoc.parseError.reason+"<br>");
	document.write("错误行号："+xmldoc.parseError.line+"<br>");

</script>
</head>





















//=====内部DTD的引用 ： 将DTD内容直接写在XML文件内

<!DOCTYPE 根元素 [定义内容]>
<?xml version="1.0" encoding="utf-8"?>
<!--引入DTD-->
<!DOCTYPE 班级 [
	<!ELEMENT 班级 (学生+)>
	<!ELEMENT 学生 (名字,年龄,介绍)>
	<!ELEMENT 名字 (#PCDATA)>
	<!ELEMENT 年龄 (#PCDATA)>
	<!ELEMENT 介绍 (#PCDATA)>
]>
<班级>
	<学生>
		<名字>周星驰</名字>
		<年龄>23</年龄>
		<介绍>学习刻苦</介绍>
		<面积>20</面积>
	</学生>
</班级>









//=====引入公开的DTD

<!DOCTYPE 文档根节点 PUBLIC "DTD名称" "DTD文件的URL">
如
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">












//=====DTD元素，属性，类型，特点



--DTD的组成 

<!ELEMENT NAME CONTENT>

ELEMENT : 	关键字
NAME 	: 	元素名称
CONTENT : 	元素类型





--元素类型 

	作用：用来定义元素的内容，是否包含子元素或内容。

EMPTY 	： 该元素不能包含子元素和文本，但可以有属性-（必为空元素）
ANY 	： 该元素可以包含任何在DTD中定义的元素内容。注意：一定要是DTD中以经定义过的元素！！！
#PCDATA ： 可以包含任何字符数据，但是不能在其中包含任何子元素。




--元素属性修饰符:
	
	作用：用来定义元素的个数范围及顺序和分组。

“+” ： 表示1 - 多个元素）。 
“*” ： 表示0 - 多个元素）。
“?” ： 表示0 - 1个元素
“,” ： 表示元素的排列必须按此顺序排列。
“|” ： 表示单选，只能选一种
“()” ：表示元素分组。




--元素属性类型：

	作用：定义元素的属性的类型是字符还是实体还是枚举等。

CDATA 	：  可以是字符或数字
ID    	：  属性值是唯一的，字母开头
IDREF/IDREFS	：	id引用 /引用多个
Enumerated	：	枚举（给出几个，选出其中一个）
ENTITY/ENTITIES ： 	实体




--元素属性特点：
	
	作用：定义元素是否可以拥有属性。
#REQUIRED	: 必须有
#IMPLIED	: 可有可无
FIXED		: 该属性值是固定的
Default value 	: 默认值








//=====ENTITY/ENTITIES --  引用实体详解

				//引用实体主要是在XML中使用的；

基本原理：
1，在DTD文档中定义一个引用实体 <!ENTITY 实体名 "内容">
2，在XML文件中引用 	&实体名;


--在DTD中定义实体

<!ELEMENT 班级 (学生+,班长?)>
<!ELEMENT intro "这是一个介绍">   //定义了一个实体 intro:是名字， 后面是内容。


--在XML中引用实体

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE 班级 SYSTEM "xxx.dtd">
<班级>
	<学生>
		<介绍>&intro;学习刻苦</介绍>   //引用了实体
	</学生>
</班级>







//=====ENTITY/ENTITIES --  参数实体详解

				//参数实体使用在DTD本身文档中

使用原理：
在DTD中定义参数实体：
<!ENTITY % 实体名称 "实体内容">

在DTD中引用实体：
%实体名称;

例：
<!ELEMENT 班级 (学生+,班长)>
<!ENTITY % sName "名字">	//定义了一个参数实体
<!ELEMENT 学生 (%sName;,年龄，介绍)>  //引用了参数实体
<!ELEMENT %sName (#PCDATA)>	//引用了参数实体
<!ELEMENT 年龄 (#PCDATA)>
<!ELEMENT 介绍 (#PCDATA)>
<!ELEMENT 班长 (#PCDATA)>











例一：

--DTD页面：

<!ELEMENT 班级 (学生+,班长?)>
<!ENTITY intro "这是一个介绍">		//定义了一个引用实体，可在XML中使用
<!ENTITY % sName "名字">		//定义了一个参数实体，可在DTD中使用
<!ATTLIST 学生
	住址 CDATA #IMPLIED		//字符或数字-可有可无
	学号 ID #REQUIRED		//ID 必须有
	大佬 IDREFS #REQUIRED		//ID引用 必须有
	婚姻状态 (单身|结婚|离婚) #REQUIRED  //枚举 必须有
	国籍 CDATA #FIXED "中国" 	//字符 固定值为"中国"
>
<!ELEMENT 学生 (%sName;,年龄,介绍)>	//引用了上面的参数实体
<!ELEMENT %sName; (#PCDATA)>		//引用了上面的参数实体
<!ELEMENT 介绍 (#PCDATA)>
<!ELEMENT 班长 (#PCDATA)>
<!ELEMENT ()>



--XML页面：
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE 班级 SYSTEM "xxx.dtd">	//引入DTD
<班级>
	<学生 住址="香港" 大佬="a002 a003" 学号="a001" 国籍="中国" 婚姻状态="单身">
		<名字>周星驰</名字>
		<年龄>23</年龄>
		<介绍>&intro;学习刻苦</介绍>	//调用了引用实体
	</学生>
	<学生 学号="a002" 大佬="a002" 婚姻状态="结婚">
		<名字>林青霞</名字>
		<年龄>32</年龄>
		<介绍>&intro;是一个好学生</介绍>   //调用了引用实体
	</学生>
	<学生 学号="a003" 大佬="a003" 婚姻状态="结婚">
		<名字>刘德华</名字>
		<年龄>32</年龄>
		<介绍>&intro;是一个大哥</介绍>
	</学生>
</班级>








例二：

--DTD页面：

<!ELEMENT TVSCHEDULE (CHANNEL+)> //声明根元素，1-N个一级子元素
<!ELEMENT CHANNEL (BANNER,DAY+)> //一级子元素中再次声明，两个二级子元素，DAY可有1到多个
<!ELEMENT BANNER (#PCDATA)>	 //规范二级子元素BANNER 不能有子元素只能有字符或数字
<!ELEMENT DAY (DATE,(HOLIDAY|PROGRAMSLOT+)+)> //声明DAY下有两个子元素，后面的为枚举选一个，+：1到多
<!ELEMENT HOLIDAY (#PCDATA)>	 // 不能有子节点，内容为字符或数字
<!ELEMENT DATE (#PCDATA)>	 // 不能有子节点，内容为字符或数字
<!ELEMENT PROGRAMSLOT (TIME,TITLE,DESCRIPTION?)> //声明PROGRAMSLOT下有三个子元素，DESCRIPTION可有1或0个
<!ELEMENT TIME (#PCDATA)>	//不能有子节点，内容为字符或数字
<!ELEMENT TITLE (#PCDATA)> 	//不能有子节点，内容为字符或数字
<!ELEMENT DESCRIPTION (#PCDATA)>	//不能有子节点，内容为字符或数字

<!ATTLIST TVSCHEDULE NAME CDATA #REQUIRED> //TVSCHEDULE下NAME 属性是数字或字符形式，可有可无
<!ATTLIST CHANNEL CHAN CDATA #REQUIRED>		//CHANNEL下CHN 属性是数字或字符形式，可有可无
<!ATTLIST PROGRAMSLOT VTR CDATA #IMPLIED>	//PROGRAMSLOT下VTR 属性是数字或字符形式，可有可无
<!ATTLIST TITLE RATING CDATA #IMPLIED>		//TITLE下RATING 属性是数字或字符形式，可有可无
<!ATTLIST TITLE LANGUAGE CDATA #IMPLIED>	//TVSCHEDULE下LANGVAGE 属性是数字或字符形式，可有可无	



--XML页面：
<?xml version="1.0" encoding="utf-8"?>		// XML文件头
<!DOCTYPE TVSCHEDULE SYSTEM "a.dtd">		// 引入外部DTD文件
<TVSCHEDULE NAME="lee">				
	<CHANNEL CHAN="eee">
		<BANNER>aaa</BANNER>
		<DAY>
			<DATE>BBB</DATE>
			<PROGRAMSLOT VTR="222">
				<TIME>ccc</TIME>
				<TITLE RATING="555">ddd</TITLE>
				<DESCRIPTION>ddd</DESCRIPTION>
			</PROGRAMSLOT>
		</DAY>
	</CHANNEL>
</TVSCHEDULE>


--校验页面：
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<script langage="javascript">	
	//实例化一个XML解析器
	var xmldoc = new ActiveXObject("Microsoft.XMLDOM");
	//开启校验功能
	xmldoc.validateOnParse =true;
	//指定对哪个XML文件校验
	xmldoc.load("a.xml");
	//如果有错误，则输出 
	document.write("错误信息："+xmldoc.parseError.reason+"<br>");
	document.write("错误行号："+xmldoc.parseError.line+"<br>");

</script>
</head>








例二：

--dtd页面

<!ELEMENT NEWSPAPER (ARTICLE+)>
<!ELEMENT ARTICLE (HEADLINE,BYLINE,LEAD,BODY,NOTES)>
<!ELEMENT HEADLINE (#PCDATA)>
<!ELEMENT BYLINE (#PCDATA)>
<!ELEMENT LEAD (#PCDATA)>
<!ELEMENT BODY (#PCDATA)>
<!ELEMENT NOTES (#PCDATA)> 

<!ATTLIST ARTICLE AUTHOR CDATA #REQUIRED>
<!ATTLIST ARTICLE EDITOR CDATA #IMPLIED>
<!ATTLIST ARTICLE DATE CDATA #IMPLIED>
<!ATTLIST ARTICLE EDITION CDATA #IMPLIED>

<!ENTITY NEWSPAPER "Vervet Logic Times">		//引用实体
<!ENTITY PUBLISHER "Vervet Logic Press">		//引用实体
<!ENTITY COPYRIGHT "Copyright 1998 Vervet Logic Press">	//引用实体



--xml页面

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE NEWSPAPER SYSTEM "b.dtd">
<NEWSPAPER>

	<ARTICLE AUTHOR="lee" EDITOR="A" DATE="2012" EDITION="B">
		<HEADLINE>&NEWSPAPER;aaa</HEADLINE>		//调用了引用实体
		<BYLINE>bbb</BYLINE>
		<LEAD>ccc</LEAD>
		<BODY>ddd</BODY>
		<NOTES>eee</NOTES>
	</ARTICLE>
</NEWSPAPER>



--校验









例三：

--DTD页面：
<!ENTITY AUTHOR "John Doe">
<!ENTITY COMPANY "JD Power Tools, Inc.">
<!ENTITY EMAIL "jd@jd-tools.com">

<!ELEMENT CATALOG (PRODUCT+)>

<!ELEMENT PRODUCT
(SPECIFICATIONS+,OPTIONS?,PRICE+,NOTES?)>
<!ATTLIST PRODUCT
NAME CDATA #IMPLIED
CATEGORY (HandTool|Table|Shop-Professional) "HandTool"
PARTNUM CDATA #IMPLIED
PLANT (Pittsburgh|Milwaukee|Chicago) "Chicago"
INVENTORY (InStock|Backordered|Discontinued) "InStock">

<!ELEMENT SPECIFICATIONS (#PCDATA)>
<!ATTLIST SPECIFICATIONS
WEIGHT CDATA #IMPLIED
POWER CDATA #IMPLIED>

<!ELEMENT OPTIONS (#PCDATA)>
<!ATTLIST OPTIONS
FINISH (Metal|Polished|Matte) "Matte" 
ADAPTER (Included|Optional|NotApplicable) "Included"
CASE (HardShell|Soft|NotApplicable) "HardShell">

<!ELEMENT PRICE (#PCDATA)>
<!ATTLIST PRICE
MSRP CDATA #IMPLIED
WHOLESALE CDATA #IMPLIED
STREET CDATA #IMPLIED
SHIPPING CDATA #IMPLIED>

<!ELEMENT NOTES (#PCDATA)>




--XML页面：

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE PRODUCT SYSTEM "c.dtd">
<PRODUCT CATEGORY="Table" PLANT="Milwaukee" INVENTORY="Backordered">
	<SPECIFICATIONS>aaa</SPECIFICATIONS>
	<PRICE MSRP="a">222</PRICE>
</PRODUCT>



--校验页面：
......


















			=====XML DOM=====




//=====获取
	textContent
	nodeValue  		--  获取元素的文本内容	
	getAttribute("x")	--  获取元素属性
	nodeName		--  获取节点名
	nodeType		--  获取节点类型。	（下附说明）
					元素节点 ：1
					属性节点 ：2
					文本节点 ：3  节点之间的换行
	parentNode		--  获取父节点
	childNodes		--  获取子节点列表
	firstChild		--  获取首个子节点
	lastChild		--  获取最后一个子节点
	previousSibling		--  获取上一个兄弟节点
	nextSibling		--  获取下一个兄弟节点
	getNodePath()		--  获取DOM元素的层级路径


//=====判断
	hasAttributes()		--  判断元素是否有属性 
	hasChildNodes()		--  判断元素是否包含子元素（文本也算元素）




//=====添加节点
	appendChild() 		--  向已存在的节点添加子节点
	insertBefore() 		--  向指定的子节点之前插入节点
	insertData() 		--  将数据插入已有的文本节点中。
				insertData() 方法有两个参数：
				offset - 在何处开始插入字符（以 0 开始）
				string - 要插入的字符串




//=====更改节点：
	nodeValue="xxx";	--  设置元素的文本内容
	getAttribute("x","xx") 	--  设置元素的属性



//=====删除节点
	removeChild($x) 	--  方法删除指定节点。
	removeAttribute("x") 	--  方法删除指定属性。



//=====替换节点
replaceChild($newNode,$oldNode) --  方法替换指定节点。
	nodeValue 		--  属性替换文本节点中的文本。


//=====创建节点
	createAttribute() 	--  用于创建新的属性节点：
	setAttribute() 		--  创建属性
	createComment() 	--  方法创建一个新的注释节点。




//=====克隆节点
	cloneNode() 		--  创建指定节点的副本。
		（true 或 false）。该参数指示被复制的节点是否包括原节点的所有属性和子节点。




//=====nodeType 获取节点类型说明
返回值       描述 		包含子节点

1	Element	代表元素	Element, Text, Comment, ProcessingInstruction, CDATASection, EntityReference
2	Attr	代表属性	Text, EntityReference
3	Text	代表元素或属性中的文本内容。	None
4	CDATASection	代表文档中的 CDATA 部分（不会由解析器解析的文本）。	None
5	EntityReference	代表实体引用。	Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference
6	Entity	代表实体。	Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference
7	ProcessingInstruction	代表处理指令。	None
8	Comment	代表注释。	None
9	Document	代表整个文档（DOM 树的根节点）。	Element, ProcessingInstruction, Comment, DocumentType
10	DocumentType	向为文档定义的实体提供接口	None
11	DocumentFragment	代表轻量级的 Document 对象，能够容纳文档的某个部分	Element, ProcessingInstruction, Comment, Text, CDATASection, EntityReference
12	Notation	代表 DTD 中声明的符号。	None






DOM要点：
//=====创建DOM对象
	$xmldom=new DOMDocument();


//=====读取指定XML文件
	$xmldom->load("xml.xml");

//=====获取元素的DOM列表
	$stus=$xmldom->getElementsByTagName("stu");


//=====获取DOM列表中元素的个数
	echo $stus->length."个学生<br>";


//=====获取DOM列表中第一个元素
	$stu1=$stus->item(0);


//=====获取DOM元素中的内容
	$namev=$name1->nodeValue;

//=====获取DOM元素的标签名
	$name_tagname=$namev->tagName;


//=====获取二级子节点中指定的DOM元素内容
	$stus2=$xmldom->getElementsByTagName("stu")->item(1)->getElementsByTagName("name")->item(0)->nodeValue;
	echo $stus2;



//=====将获取元素内容做成函数以便调用

--XML页面：

<?xml version="1.0" encoding="utf-8"?>
<class>
	<stu>
		<name>小明</name>
		<age>18</age>
	</stu>
	<stu>
		<name>小丽</name>
		<age>19</age>
	</stu>
</class>


--PHP页面：
<?php
	$xmldom = new DOMDocument();
	$xmldom->load("xml.xml");

	function get($obj,$name){
		return $obj->getElementsByTagName($name)->item(0)->nodeValue;
	}
	
	echo get($xmldom,"stu");
?>







//=====循环遍历DOM元素内容

--xml页面：
<?xml version="1.0" encoding="utf-8"?>
<class>
	<stu>
		<name>小明</name>
		<age>18</age>
	</stu>
	<stu>
		<name>小丽</name>
		<age>19</age>
	</stu>
</class>


--PHP页面：
<?php
	$xmldom=new DOMDocument();
	$xmldom->load("xml.xml");
	function get($obj,$name){
		return $obj->getElementsByTagName($name)->item(0)->nodeValue;
	}
	$stus=$xmldom->getElementsByTagName("stu");
	for($i=0;$i<$stus->length;$i++){
		$stu=$stus->item($i);
		echo get($stu,"name")."--".get($stu,"age")."<br>";
	}
?>













//=====获取元素
	$root=$xmldom->getElementsByTagName("class")->item(0);	

	
//=====创建一个DOM元素
	$name=$xmldom->createElement("name");


//=====为创建的DOM元素添加内容
	$name->nodeValue="小超";
	

//=====为DOM元素添加或更改一个属性
	$name->setAttribute("性别","男");
或
	$xmldom->getElementsByTagName("stu")->item(1)->getElementsByTagName("age")->item(0)->nodeValue+=10;

//=====将创建的元素挂载到DOM元素上
	$name->appendChild($name);


//=====将文件存保存
	$xmldom->save("xml.xml");

	注：保存文件名与读取文件名不同时，会创建一个新文件。


		


//=====创建多级DOM元素，并挂载，保存

--XML页面：
<?xml version="1.0" encoding="utf-8"?>
<class>
	<stu>
		<name>小明</name>
		<age>18</age>
	</stu>
</class>


--PHP页面：
<?php
	$xmldom=new DOMDocument();	//实例DOM对象
	$xmldom->load("xml.xml");	//加载指定XML文件

	$root=$xmldom->getElementsByTagName("class")->item(0);  //获取根节点

	$stu=$xmldom->createElement("stu");	//创建一级子节点
	$root->appendChild($stu);		//将一级子节点挂载到根节点上

	$name=$xmldom->createElement("name");	//创建二级子节点
	$name->nodeValue="小超";		//为二级子节点添加内容
	$stu->appendChild($name);		//将二级子节点挂载到一级子节点上。

	$age=$xmldom->createElement("age");	//同上
	$age->nodeValue=18;
	$stu->appendChild($age);
	
	$xmldom->save("xml.xml");		//将操作后的文件保存回原文件
						//如用新名，则是创建了一个新文件。
?>





//=====修改DOM元素内容

$xmldom->getElementsByTagName("stu")->item(0)->getElementsByTagName("name")->item(0)->nodeValue=阿里巴巴;




//=====删除DOM元素

	$name=$xmldom->getElementsByTagName("stu")->item(1)->getElementsByTagName("name")->item(0);
	$name->parentNode->removeChild($name);


<?xml version="1.0" encoding="utf-8"?>
<class>
	<stu>
		<name>小明</name>
		<age>18</age>
	</stu>
	<stu>
		<name>小军</name>
		<age>28</age>
	</stu>
</class>


<?php
	$xmldom = new DOMDocument();
	$xmldom->load("xml.xml");


	$xmldom->getElementsByTagName("stu")->item(0)->getElementsByTagName("name")->item(0)->nodeValue=阿里巴巴;

	$name=$xmldom->getElementsByTagName("stu")->item(1)->getElementsByTagName("name")->item(0);
	$name->parentNode->removeChild($name);
	$xmldom->save("xml.xml");

?>







//=====英语查询-XML版

--index.php页面

<html>
<head>
<title>英语词典-XML库版</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<style>
	.h1{
		text-align:center;
		color:red;
		font:italic bold 50px normal;
	}
	.f1{
		font:normal bold 30px normal;
	}
</style>
</head>
<body>
<h1 class=h1>英语词典-XML数据库版</h1>
<div class=f1>
查询：
<form action="control.php" method="post">
	<input type="text" name="query"/>
	<input type="hidden" name=type value="query"/>
	<input type="submit" value="查询"/>
</form>
</div>

<div class=f1>
添加：
<form action="control.php" method="post">
	<input type="text" name="add" />
	<input type="hidden" name="type" value="add" />
	<input type="submit" value="添加" />
</form>
删除：
<form action="control.php" method="post">
	<input type="text" name="del" />
	<input type="hidden" name="type" value="del" />
	<input type="submit" value="删除" />
</form>
更改：
<form action="control.php" method="post">
	<input type="text" name="replace" />
	<input type="hidden" name="type" value="replace" />
	<input type="submit" value="更改" />
</form>

<form action="control.php" method="post">
	<input type="hidden" name="type" value="all"/>
	<input type="submit" value="总览"/>
</form>
</div>
<body>
</html>



--control.php页面

<?php
	$xmldom=new DOMDocument();
	$xmldom->load("english.xml");
	
	$type=$_POST['type'];
//====查询
	$ver=false;
	if($type=="query"){
		$query=$_POST['query'];
		if($query){
			$words=$xmldom->getElementsByTagName("word");
			for($i=0;$i<$words->length;$i++){
				$en=$xmldom->getElementsByTagName("en")->item($i)->nodeValue;
				$ch=$xmldom->getElementsByTagName("ch")->item($i)->nodeValue;
				$chs=explode("，",$ch);
				if($query==$en){
					echo $en."--的译文是：".$ch;
					$ver=true;
				}else{
					for($j=0;$j<count($chs);$j++){
						if($query==$chs[$j]){
							echo $chs[$j]."--的译文是：".$en;
							$ver=true;
						}
					}
				}
			}
		}
		if(!$ver){
			echo "查无此数据！";
		}
	}
//====添加
	if($type=="add"){
		$add=$_POST['add'];
		if($add){
			$arr=explode("--",$add);
			if($arr[0] && $arr[1]){
				for($i=0;$i<$xmldom->getElementsByTagName("word")->length;$i++){
					if($arr[0]==$xmldom->getElementsByTagName("en")->item($i)->nodeValue){
						echo "数据以经存在！";
						return ;
					}
				}
				$root=$xmldom->getElementsByTagName("english")->item(0);
				$word=$xmldom->createElement("word");
				$root->appendChild($word);
				$en=$xmldom->createElement("en");
				$en->nodeValue=$arr[0];
				$word->appendChild($en);
				$ch=$xmldom->createElement("ch");
				$ch->nodeValue=$arr[1];
				$word->appendChild($ch);
				$success=$xmldom->save("english.xml");
				if($success){
					$ver=true;
				}
			}
		}
		if(!$ver){
			echo "数据为空或不完整，请检查后再次添加！";
		}else{
			echo "添加成功！";
		}
		
		
	}
//====删除
	if($type=="del"){
		$del=$_POST['del'];
		if($del){
			$words=$xmldom->getElementsByTagName('word');
			for($i=0;$i<$words->length;$i++){
				$en=$words->item($i)->getElementsByTagName("en")->item(0)->nodeValue;
				if($del==$en){
					$aa=$words->item($i);
					$aa->parentNode->removeChild($aa);
					$aaa=$xmldom->save("english.xml");
					if($aaa){
						$ver=true;
					}
				}
			}
		}
		if(!$ver){
			echo "数据不存在，删除失败！";
		}else{
			echo "删除成功！";
		}
	}
//====更改
	if($type=="replace"){
		$replace=$_POST['replace'];
		$arr=explode("--",$replace);
		$ens=$xmldom->getElementsByTagName("en");
		//if($arr[0] && $arr[1]){
			for($i=0;$i<$ens->length;$i++){
				if($ens->item($i)->nodeValue==$arr[0]){
					$ens->item($i)->parentNode->getElementsByTagName("ch")->item(0)->nodeValue=$arr[1];
					$aa=$xmldom->save("english.xml");
					if($aa){
						$ver=true;
					}
				}
			}
		//}

		if($ver){
			echo "更改成功";
		}else{
			echo "更改失败";
		}
		
	}
//=====总览
	if($type=="all"){
		$words=$xmldom->getElementsByTagName("word");
		for($i=0;$i<$words->length;$i++){
			echo $words->item($i)->getElementsByTagName("en")->item(0)->nodeValue;
			echo "&nbsp：的译文是：";
			echo $words->item($i)->getElementsByTagName("ch")->item(0)->nodeValue."<br>";
		}
	}
	
	echo "<br><a href='index.php'>返回首页</a>";
	
?>


--xml.xml页面：
<?xml version="1.0" encoding="utf-8"?>
<english>
	<word>
		<en>boy</en>
		<ch>男孩</ch>
	</word>
</english>
























		=================XPATH====================




//=====选择根元素

	/AAA


//=====选择AAA下所有为CCC的一级子元素

	/AAA/CCC


//=====选择/AAA/DDD下为BBB的一级子元素
	
	/AAA/DDD/BBB


//=====选择所有DDD下为OOO的一级子元素
	
	//DDD/BBB


//=====选择带有三层父元素的BBB元素

	/*/*/*/BBB



//=====选择AAA下首个为BBB的一级子元素

	/AAA/BBB[1]


//=====选择AAA下最后一个为BBB的一级子元素

	/AAA/BBB[last()]


//=====选择含有指定属性名和属性值的元素

	//BBB[@Id='b1']
	//BBB[@name='lee']


//=====选择有任意属性的BBB元素

	//BBB[@*]







例：

--xpath.php页面：

<?php
	$xmldom = new DOMDocument();	//实例DOM对象
	$xmldom->load("xpath.xml");		//加载XML文件
	$xpath=new DOMXPath($xmldom);  	//实例化XPATH对象并加载DOM对象

//=====选择根元素
	$root=$xpath->query("/AAA");
	$root->item(0)->setAttribute("A","AA");
	
//=====选择AAA下所有为CCC的一级子元素
	$c=$xpath->query("/AAA/CCC");
	for($i=0;$i<$c->length;$i++){
		$c->item($i)->nodeValue="选择AAA下所有为CCC的一级子元素";
	}

//=====选择/AAA/DDD下为BBB的一级子元素
	$b=$xpath->query("/AAA/DDD/BBB");
	for($i=0;$i<$b->length;$i++){
		$b->item($i)->setAttribute("属性","选择AAADDD下为BBB的一级子元素");
		$b->item($i)->removeAttribute("a");
	}

//=====选择所有DDD下为OOO的一级子元素
	$o=$xpath->query("//DDD/OOO");
	for($i=0;$i<$o->length;$i++){
		$o->item($i)->nodeValue="选择所有DDD下为OOO的一级子元素";
	}

//=====选择带有三层父元素的BBB元素
	$bbb=$xpath->query("/* /* /* /BBB");   //此处与注释冲突所以加了空格
	$bbb->item(0)->nodeValue="选择有三层父元素的并且为BBB的元素";

//=====选择AAA下首个为BBB的一级子元素
	$ab=$xpath->query("/AAA/BBB[1]");
	$ab->item(0)->setAttribute("属性","选择AAA下首个为BBB的一级子元素");

//=====选择AAA下最后一个为BBB的一级子元素
	$lastb=$xpath->query("/AAA/BBB[last()]");
	$lastb->item(0)->nodeValue="选择AAA下最后一个为BBB的一级子元素";

//=====选择含有指定属性名和属性值的元素
	$e=$xpath->query("//*[@e='eee']");
	$e->item(0)->setAttribute("属性","选择含有指定属性名和属性值的元素");

//=====选择有任意属性的BBB元素
	$all=$xpath->query("//WWW[@*]");
	for($i=0;$i<$all->length;$i++){
		$all->item($i)->setAttribute("属性","选择有任意属性的BBB元素");
	}
	
	$xmldom->save("xpath.xml");		//将所有操作保存回原文件
?>





--xpath.xml页面：

<?xml version="1.0" encoding="utf-8"?>
<AAA>
	<BBB>
		<DDD>
			<BBB></BBB>
			<OOO></OOO>
		</DDD>
	</BBB>
	<CCC></CCC>
	<BBB/>
	<WWW name="lee"/>
	<DDD>
		<BBB>
			<OOO/>
			<DDD>
					<OOO></OOO>
			</DDD>
		</BBB>
		<DDD/>
	</DDD>
	<CCC></CCC>
	<WWW id="one" >
		<BBB/>
	</WWW>
	<DDD>
		<BBB/>
	</DDD>
	<BBB></BBB>
	<EEE e="eee"/>
	<III/>
</AAA>


























		=========simplexml===========


//=====获取
$books=$lib->book;			--  获取元素的对象数组
echo count($books);			--  获取对象数组中元素的个数
$book=books[0];				--  获取对象数组中第一个book元素
$price=$lib->book[0]->price[0];		--  获取二级子数组列表中的第一个price
$price->getName();			--  获取元素名
echo $book->title;			--  获取book中各元素内容
echo $book['house'];			--  获取book元素的属性值
$attrs = $book->attributes();		--  获取元素的属性列表及属性值
$childs = $book->children();		--  获取一级子元素列表


//=====添加与创建
$book->addAttribute("a","aaa");		--  给元素添加属性
$book->addChild("节点名","内容");	--  给元素添加子节点及内容

$str=new simpleXMLElement("<t>2</t>");	--  创建与调用字符串(可当节点保存)
	


//=====保存XML文件
$lib->saveXML("book.xml");		--  将XML文件保存
$lib->asXML("book.xml");		--  将XML文件保存



//=====simpxml三种加载方式
$lib=simplexml_load_file("book.xml");	--  simplexml加载文件
$lib=simplexml_import_DOM($xmldom);	--  simplexml加载DOM对象	
$string  = <<<XML XML;			--  smiplexml加载大型字符串 <<<XML...

//=====其它			
$res=$lib->xpath("/bks/bk[1]/ahr/aut");	--  simplexml与xpath结合						
	


	
实例：


--PHP页面：
<?php
	//$lib=simplexml_load_file("book.xml");	//simplexml加载文件
	
	$xmldom=new DOMDocument();			
	$xmldom->load("book.xml");			
	$lib=simplexml_import_DOM($xmldom);		//simplexml加载DOM对象3

	
	$books=$lib->book;				//获取元素的对象数组	
	
	
	echo count($books);				//获取对象数组中元素的个数
	
	
	$book=books[0];					//获取对象数组中第一个book元素
	$price=$lib->book[0]->price[0];			//获取二级子数组列表中的第一个price

	
	echo $price->getName();				//获取元素名
	
				
							//获取book中各元素内容
	echo $book->title;
	echo $book->code;
	echo $book->price;		
	
	
	$book->addAttribute("c","ccc");			//给元素添加属性
	
	
	echo $book['house'];				//获取book元素的属性值
	
	
	$attrs = $book->attributes();			//获取元素的属性列表及属性值
	foreach($attrs as $k=>$v){
		echo $k."--".$v."<br>";
	}
	
	$book->addChild("aaa","这是一个新节点");		



	$childs = $book->children();			//获取一级子元素列表
	foreach($childs as $k=>$v){
		echo $k."--".$v."<br>";
	}
	
	
	echo "<br>".count($book->children());		//获取元素个数
	
	
							//创建与调用字符串(可当节点保存)
	$strings1=new simpleXMLElement("<tri>2sdfsaf</tri>");
	echo $strings1;
	
	
							//simplexml与xpath结合 
	$results=$lib->xpath("/books/book[1]/author/aut");
	while(list(,$node) = each($results)){
		echo $node."<br>";
	}								
	
	
							//smiplexml加载大型字符串 <<<XML...
	$string  = <<<XML
	<?xml version='1.0'?> 
	<document>
	 <title>Forty What?</title>
	 <from>Joe</from>
	 <to>Jane</to>
	 <body>
	  I know that's the answer -- but what's the question?
	 </body>
	</document>
	XML;

	$xml  =  simplexml_load_string ( $string );
	print_r ( $xml );


	$book->addChild("c","ccc");			//给元素添加子节点及内容
	
	
	$lib->asXML("book.xml");			//将XML文件保存
	$lib->saveXML("book.xml");			//将XML文件保存
	
?>
	

---XML页面：
<?xml version="1.0" encoding="utf-8"?>
<books>
	<book house="北大出版社2">
		<code>sb0022</code>
		<price>4002</price>
		<author>
			<aut>小红2</aut>
			<aut>小丽2</aut>
			<aut>小萍2</aut>
		</author>
		<title>笑傲江湖2</title>
		<book house="北大出版社3">
		<code>sb0023</code>
		<price>4003</price>
		<author>
			<aut>小红3</aut>
			<aut>小丽3</aut>
			<aut>小萍3</aut>
		</author>
		<title>笑傲江湖3</title>
	</book>
</books>

