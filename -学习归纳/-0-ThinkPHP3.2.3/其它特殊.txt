



//----- ThinkPHP3.2.3完全 手册下载地址
//===== 错误与解决
//----- 配置文件加载生效顺序 
//===== 各文件夹说明 
//===== 默认访问URL
//===== Thinkphp 使用流程
//===== 错误异常提示页面的设置
//===== ThinkPHP 自动加载机制
//===== 框架行为behavior 的执行
//===== 核心类库分布
//===== jui的搭建
//===== 创建可直接在控制器中调用的自定义函数











//===== 创建可直接在控制器中调用的自定义函数

	如在写字母函数 I(),G(),A(),M() 等，它们都存放在ThinkPHP/Common/function.php文件中，把自定义函数写在这个文件里，就可以在控制 器中直接调用了！





//----- ThinkPHP3.2.3完全 手册下载地址
	
	http://www.kancloud.cn/manual/thinkphp



//===== 错误与解决

	//-- 提示 Namespace declaration statement 错误信息

		错误提示： Namespace declaration statement has to be the very first statement in the script
		解决：  用编辑工具将代码改成 utf8 无BOM格式，不要使用单纯的utf-8格式。







//----- 配置文件加载生效顺序 

	所有配置均可使用 C 来读取 如 C('URL_MODEL');

	惯例配置（ThinkPHP/Conf/convention.php）
		->
	应用配置（Application/Common/Conf/config.php）
		->
	模式配置（Application/Common/Conf/config_应用模式名称.php）
		->
	调试配置（Application/Common/Conf/debug.php）
		->
	状态配置（Application/Common/Conf/office.php）
		需在入口文件配置define('APP_STATUS','office');
		->
	模块配置（Application/当前模块名/Conf/config.php）
		->
	扩展配置（
		'LOAD_EXT_CONFIG' => 'user,db',	获取方式 C('USER_AUTH_ID');  

		'LOAD_EXT_CONFIG' => array('USER'=>'user','DB'=>'db'),  获取方式 C('USER.USER_AUTH_ID');
		）
		->
	动态配置（C('参数名称','新的参数值')）
	

	使用 C() 批量配置
	$config = array('WEB_SITE_TITLE'=>'ThinkPHP','WEB_SITE_DESCRIPTION'=>'开源PHP框架');
	C($config);

	配置相关详见 3.23 完全手册第11-19页










//===== 各文件夹说明 

	//===== 根目录下：
	Thinkphp	核心文件包				(下载)
	Public		前台和后台公共使用文件存放目录		(需自建)
	.htaccess	虚拟服务文件(3.2.3版本)
	Uploads		文件上传的公共文件目录			(需自建)
	index.php	前台接口文件		(可删除自建)
	Home(文件夹)	应用目录（可删除,随接口文件定义自动生成)
		--3.1.2版
		Home/Common		公共使用的函数等都放在这里面
		Home/Conf		配置目录，存放配置信息
		Home/Lang		语言目录 多语言支持在这里更改
		Home/Lib		核心目录 MVC的很多核心代码存放在这里
		Home/Runtime		存放编译后和缓存的文件
		Home/Tpl		存放模板文件目录 

			
		--3.2.3版
		app/Home 		MVC三层及配置文件的存放目录
		app/Home/Conf		配置目录，存放配置信息
		app/Home/Controller	模块层  MVC 中的 C
		app/Home/Mode		命令层  MVC 中的 M
		app/Home/View		模板层  MVC 中的 V




//===== 默认访问URL

	http://serverName/index.php
	等同于
	http://serverName/index.php/Home/Index/index





//===== Thinkphp 使用流程

	1：复制Thinkphp程序包到项目obj同级目录下。

	2：创建并配置接口文件 obj/index.php 
		index.php内容
		<?php
			define('APP_PATH','./Application/');
			require "../ThinkPHP/ThinkPHP.php";	//引入ThinkPHP主文件

	3：编辑obj/Application/Home/Controller/IndexController.class.php
		<?php
		namespace Home\Controller;		//3.2.3需要的命名空间
		use Think\Controller;		
		class IndexController extends Controller {
			public function index(){
				$this->assign('name','小明');	//注册name变量到模板
				$this->display();		//关联当前模板 (默认为Home/view/Index/index.html)	
			}
		}

	4：创建模板文件 obj/Application/Home/View/Index/index.html
		<body>
			{$name}		//调用模块中注册的变量
		</body>



	5： 访问

		http://localhost/obj/index.php
		或
		http://localhost/obj/index.php/home/Index/index	































//===== 错误异常提示页面的设置

	当页面出现异常错误提示时会报错，这里可以更改报错的形式是以Thinkphp方式还是以原生 的PHP方式

	1，找到 ThinkPHP/Library/Think/Think.class.php
	2，找到第33行左右
	      	//register_shutdown_function('Think\Think::fatalError');	//出到致使错误时调用方法
      		//set_error_handler('Think\Think::appError');			//出现应用错误时调用方法
      		//set_exception_handler('Think\Think::appException');		//出现应用异常时调用方法

		如果想使用PHP原生报错试，就将上述三句注释掉即可




//===== ThinkPHP 自动加载机制

	文件 ThinkPHP/Library/Think/Think.class.php 中有个方法 function autoload();












//===== 框架行为behavior 的执行

	文件位置： ThinkPHP/Mode/common.php 下其 tags 中定义的行为都会自动执行，而其它行为需要手动开启
    // 行为扩展定义
    'tags'  =>  array(
        'app_init'     =>  array(
            'Behavior\BuildLiteBehavior', // 生成运行Lite文件
        ),        
        'app_begin'     =>  array(
            'Behavior\ReadHtmlCacheBehavior', // 读取静态缓存
        ),
        'app_end'       =>  array(
            'Behavior\ShowPageTraceBehavior', // 页面Trace显示
        ),
        'view_parse'    =>  array(
            'Behavior\ParseTemplateBehavior', // 模板解析 支持PHP、内置模板引擎和第三方模板引擎
        ),
        'template_filter'=> array(
            'Behavior\ContentReplaceBehavior', // 模板输出替换
        ),
        'view_filter'   =>  array(
            'Behavior\WriteHtmlCacheBehavior', // 写入静态缓存
        ),
    ),


	而手动开启行为方式 就是在config 同级目录中创建一个 tags.php ,并设置相关内容来覆盖 common.php 中的tags小节
	如下：（另可参见笔记中“多语言支持”那一篇）
		Conf/tags.php
		<?php
			return array(
				'app_begin'=>array(
					'Behavior\CheckLangBehavior',		//启动多语言支持
				),
			);
		?>


















//===== 核心类库分布

		ThinkPHP/Common/functions.php // 核心函数库
		ThinkPHP/Conf/convention.php  // 惯例配置文件
		ThinkPHP/Conf/debug.php  // 惯例调试配置文件
		ThinkPHP/Conf/Mode/common.php  // 普通模式定义文件
		ThinkPHP/Library/Think // 核心类库包
		ThinkPHP/Library/Behavior // 系统行为类库
		ThinkPHP/Library/Think/App.class.php // 核心应用类
		ThinkPHP/Library/Think/Behavior.class.php // 基础行为类
		ThinkPHP/Library/Think/Cache.class.php // 核心缓存类
		ThinkPHP/Library/Think/Controller.class.php // 基础控制器类
		ThinkPHP/Library/Think/Db.class.php // 数据库操作类
		ThinkPHP/Library/Think/Dispatcher.class.php // URL解析调度类
		ThinkPHP/Library/Think/Exception.class.php // 系统基础异常类
		ThinkPHP/Library/Think/Hook.class.php // 系统钩子类
		ThinkPHP/Library/Think/Log.class.php // 系统日志记录类
		ThinkPHP/Library/Think/Model.class.php // 系统基础模型类
		ThinkPHP/Library/Think/Route.class.php // 系统路由类
		ThinkPHP/Library/Think/Storage.class.php // 系统存储类
		ThinkPHP/Library/Think/Template.class.php // 内置模板引擎类
		ThinkPHP/Library/Think/Think.class.php // 系统引导类
		ThinkPHP/Library/Think/View.class.php // 系统视图类
		
		
		ThinkPHP/Library/Think/Cache/Driver // 缓存驱动类库
		ThinkPHP/Library/Think/Db/Driver // 数据库驱动类库
		ThinkPHP/Library/Think/Log/Driver // 日志记录驱动类库
		ThinkPHP/Library/Think/Session/Driver // Session驱动类库
		ThinkPHP/Library/Think/Storage/Driver // 存储驱动类库
		ThinkPHP/Library/Think/Template/Driver // 第三方模板引擎驱动类库
		ThinkPHP/Library/Think/Template/TagLib // 内置模板引擎标签库扩展类库








//===== jui的搭建
	
	示例见百度网盘：
		编程相关-》php相关-》ThinkPHP-》ThinkPHP3.2-》jui
		