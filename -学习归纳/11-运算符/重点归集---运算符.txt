 


//===== 二进制与位运算 & | ^ ~ >> <<：
		二进制：
			所谓二进制就是逢二进一 (0和1) ,因为使用二进制只有 0 和 1 两个数，简单，易于电子
		方式实现，同时，通过 0 和 1 组合可以表示任意一个数。
		二进制有三个重要的概念；
			1，原码：用二进制来表示一个数，这个码就是原码。
		如00000000 00000000 00000000 00000101 = 1*2的零次方 + 0*2的一次方 + 1*2的二次方 = 1+0+4=5
			
			2, 负数的反码 = 它的原码符号位不变，其它位取反 (0变1，1变0)  如例。
		-1
		-1的原码 10000000 00000000 00000000 00000001 
		-1的反码 11111111 11111111 11111111 11111110
		-1的补码 11111111 11111111 11111111 11111111

		补码返回原码时，再按照顺序倒回去
		11111111 1111111 11111111 1111111 -1的补码
		11111111 1111111 11111111 1111110  减1后成为反码
		10000000 0000000 00000000 0000001  再取反后成为原码

			3,在计算机运算的时候，都是以补码的方式来运算的。



		二进制基本概念：
		1，二进制的最高位是符号位： 0表示正数，1表示负数。
		2，正数的原码，反码，补码都一样。
		3，负数的反码=它的原码符号位不变，其它位取反（0变1，1变0）
		4, 负数的补码= 它的反码+1
		5，0的反码，补码都是0.
		6, php没有无符号数，换言之，PHP 中的数都是有符号的。
		7， 在计算机运算的时候，都是以补码的方式来运算的。

		 
		位运算的基本概念：
			PHP中有四个位运算：分别是“按位与 & ,按位或 | . 按位异或 ^ ,按位取反 ~ ；
		按位与 & : 两位全为1，结果为1 .
		按位或 | : 两位有一个为1 ,结果为 1.
		按位异或 ^ : 两位一个为0 ,一个为 1 ，结果为 1. 两个不同时结果为1,相同进结果为0;
		按位取反 ~ : 0 变 1, 1 变 0
				比如：~2 = -3   2&3=2  2|3=3  2^3=1;
		php中有移位运算符：
		>>   << 算术右移和算术左移，运算规则：
		算术右移：低位溢出，符号位不变，并用符号位补溢出的高位。
		自述左移：符号位不变，低位补0。


		位运算一览表；

		例子		名称			结果

		$a & $b     And(按位与)		将把$a和$b中都为1的位设为1。
		$a | $b     Or (按位或) 	将把$a或者$b中为1的位设为1。
		$a ^ $b     Xor(按位异或)	将把$a和$b中不同的位设为1。
		~$a	    Not(按位非)		将$a中为0的位设为1，反之亦然。
		$a<<$b 	   Shift left(左移)	将$a中的位向左移动 $b 次(每一次移动都表示"乘以 2 ")。
		$a>>$b 	   Shift left(右移) 	将$a中的位向右移动 $b 次（每一次移动都表示"除以 2 ").


		实例：

		5 & 7;
		00000000 00000000 00000000 00000101  5原码，反码，补码；
		00000000 00000000 00000000 00000111  7原，反，补。
		00000000 00000000 00000000 00000101  结果等于 5;
		-3 & 9;
		10000000 00000000 00000000 00000011   -3原
		11111111 11111111 11111111 11111100   -3反
		11111111 11111111 11111111 11111101   -3补
		00000000 00000000 00000000 00001001   9原，反，补
		00000000 00000000 00000000 00001001   结果等于9,这里是正数就不用再取反和减1了。只有负值才需要

		3 | 5;
		00000000 00000000 00000000 00000011  	3原，反，补
		00000000 00000000 00000000 00000101	5原，反, 补
		00000000 00000000 00000000 00000111     结果:7 
		-8 | 2;
		10000000 00000000 00000000 00001000  	-8原
		11111111 11111111 11111111 11110111	-8反
		11111111 11111111 11111111 11111000	-8补
		00000000 00000000 00000000 00000010   	2原，反，补
		11111111 11111111 11111111 11111010	补码运算结果
		11111111 11111111 11111111 11111001	减1转成反码
		10000000 00000000 00000000 00000110	取反转成原码,结果等于-6



		00000000 00000000 00000000 00000000
		11111111 11111111 11111111 11111111
		4 ^ 9;
		00000000 00000000 00000000 00000100  4原，反，补
		00000000 00000000 00000000 00001001  9原，反，补
		00000000 00000000 00000000 00001101  结果：13

		-8 ^ 4;
		10000000 00000000 00000000 00001000   	-8 原
		11111111 11111111 11111111 11110111	-8 反
		11111111 11111111 11111111 11111000 	-8 补
		00000000 00000000 00000000 00000100 	4原，反，补
		11111111 11111111 11111111 11111100	补结果
		11111111 11111111 11111111 11111011 	减1转成反码
		10000000 00000000 00000000 00000100	取反转成原码 结果：-4;


		~8;
		00000000 00000000 00000000 00001000     8 原，反，补
		11111111 11111111 11111111 11110111	取反
		11111111 11111111 11111111 11110110     -1:正数取返需要减1 ，负数取反需加1。
		10000000 00000000 00000000 00001001     结果等于9;

		~-3;
		10000000 00000000 00000000 00000011 	-3 原
		11111111 11111111 11111111 11111100 	-3 反码
		11111111 11111111 11111111 11111101     +1:正数取返需要减1 ，负数取反需加1。
		00000000 00000000 00000000 00000010	结果等于2


		8>>3;
		00000000 00000000 00000000 00001000     8原反补
		10000000 00000000 00000000 00000001     结果1


		-9>>2;
		10000000 00000000 00000000 00001001      -9原
		11111111 11111111 11111111 11110110	 -9反
		11111111 11111111 11111111 11110111      -9补
		11111111 11111111 11111111 11111101      右移2位
		11111111 11111111 11111111 11111100      减1 转成反码
		10000000 00000000 00000000 00000011	 结果等于-3


		3<<3;
		00000000 00000000 00000000 00000011	3原，反，补
		00000000 00000000 00000000 00011000      结果：24

		-5<<4;
		10000000 00000000 00000000 00000101 	-5原
		11111111 11111111 11111111 11111010     -5反
		11111111 11111111 11111111 11111011     -5补
		11111111 11111111 11111111 10110000     补结果
		11111111 11111111 11111111 10101111     减1转反
		10000000 00000000 00000000 01010000     结果80




















//=====   算数运算符
            +  加法   1 + 2 = ? 
            - 减法
            * 乘法
            / 除法
            % 求余(求模)
                注意：
                    1、求模的第一个数为负数那么他的结果就为负数。
                    2、第一个数字小于第二个数，余数为第一个数
                    3、第二个数不能为0，否则会报错。

            ++ 累加1
               
                放前面和放后面的区别：
                    放在运算数的后面先用后加。
                    放在运算数的前面先加后用。

                注意：
                    1、$a=$a +1 和 $a++是不同的；
                    2、当$a为布尔型的时候那么布尔型的值不会参加自增/自减运算。会等于原来的值

            -- 自减
                放在前面或后面

                区别和++的区别是一样的。




//=====  赋值运算符


            = 赋值运算符   将等号右边的值或者是表达式给变量。

            +=  $a += 1   $a = $a + 1;
            -=
            *=
            /=  $a /= 1  $a = $a / 1;
            %=




//===== 字符串连接符

	    $a='123';
	    $b='456';
	    $c=$a.$b; 	结果：123456;

            $a .= 'a';
	    $a = $a . 'a';

            注意：
                1、直接连接的时候可以连接变量、常量、字符串
                2、连接的变量可以是任何的标量。
                3、整数和浮点数连接时原样连接
                4、布尔型true先转换为1，再连接。false转换为空字符串再连接

            .=  

//===== 比较运算符


            比较运算符 得到的结果应该是布尔型的值。 true或false

            > 大于
            < 小于
            >= 
            <=
            == 等于
            === 全等于	内容的类型也要相等才返回true。
            !== 不全等于
		!== 	非全等于：两边值与类型都相同时返回false,否则true
	    <>或！	不等于，两边值不等时返回true,否则返回false





//===== 逻辑运算符

	and 或 &&   逻辑与:当两边操作数都为true时，返回true,否则返回false

	or 或  ||   逻辑或: 当两边操作数都为false时，返回false,否则返回true

	not 或!     逻辑非: 当操作数为true时返回false,否则返回true

	xor    	    逻辑异或；当两边操作数只有一个为true时，返回true ,否则返回false.

            逻辑运算符得到的结构也是布尔型

            !逻辑非  取反。  操作数为true时返回false，操作数为false时返回true    马尧  现在是男的。  !true 

            && ：逻辑与  两边操作数都为true时候返回true否则返回false

            || ：逻辑或 两边的操作数只要有一个为true时候就返回真两个都为false的时候才返回false

            注意：
                1、逻辑运算符经常和比较运算符综合起来使用，形成一个大的条件。
                2、短路
                && 如果第一个表达式返回false将不会检查第二个表达式。
                || 如果第一个表达式返回true将不检查第二个表达式。





//======位运算符

            & 位与 ： 两个二进制数值比较，相同位置都为1时返回1.
            | 位或 ： 两个二进制数值比较，相同位置有一个为1时返回1.

            做之前先转换为2进制，然后比对位，得出结果后也是二进制的，但是你要转回来。







//===== ? : 三元运算符，提供简单的判断 

	$a=true;
	$a?'真':'假';

        格式： 运算元1 ? 运算元2 : 运算元3;

        运算元1为条件 ，运算元2为表达式，运算元3表达式。

        如果说运算元1为真那么将运算元2的东西返回，如果运算元1为假那么将运算元3的东西返回。

        注意：
            1、表达式只能放置一条语句。
            2、表达式的值可以返回，所以可以进行赋值操作

        `` 反引号，执行运算符 得到的结果将是系统真实运行这个命令时返回的东西。
        （不建议你用）  






//=====  @ 错误抑制符
            抑制  ->  
        只是临时屏蔽错误，不影响程序的执行。但是错误依然存在。




//===== 运算符的优先级
        在数学里面先算乘除后算加减。如果要改变优先级使用括号。

        程序里面是从上至下，从左至右执行的，他对于运算符也有优先级，但是你用小学数学的只是就可以了（加括号）

        1、让多个表达式看起来是一个整体。
        2、提高优先级




//===== if else 流程控制
   
	$a=true;
	if($a==false){
		echo 'a为假';
	}else{
		echo 'a为真';
	}

