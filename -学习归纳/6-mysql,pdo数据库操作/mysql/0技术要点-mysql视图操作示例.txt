什么是视图？个人理解，视图就是创建一个虚拟的表，该表中字段映射了指定的某些实体表中的字段，视图中的数据随映射的实体表中的数据变化而变化，视图像多表关联查询那样，可关联多个表中的不同字段的数据。方便了对数据的查询与修改，同时又增加了数据的安全性！





//-- 视图详解 

	//语法
	create algorithm=算法 view 视图名 as select语句 with 更新条件

		algorithm = undefined | merge | temptable 		可选
				undefined	MySQL将自动选择所要使用的算法
				merge		将视图的语句与视图定义合并起来，使得视图定义的某一部分取代语句的对应部分
				temptable	将视图的结果存入临时表，然后使用临时表执行语句


		view 视图名			必选

		as select 语句			必选

		with CASCADED check option	可选
				WITH CHECK OPTION表示更新视图时要保证在该试图的权限范围之内（可选参数）
		　　		CASCADED：更新视图时要满足所有相关视图和表的条件
		　　		LOCAL：更新视图时，要满足该视图本身定义的条件即可






//-- 示例--视图操作 

	//-- 创建单表视图
		create view vowner(roomid,owner_name) as select roomid,owner_name from owner;
			view	声明创建数据库视图
			vowner 	视图表名
			as 	关联视图与指定表的字段操作
			
	//-- 创建多表关联视图
		//左连方式	(右表数据为空时会以null来显示字段)
		create algorithm=merge view ro(id,name,owner_name) as select r.id,r.name,o.owner_name from room r left join owner o on r.id = o.roomid;
		//普通关联方式  (两个关联的表的字段必须都不为空才会创建视图)
		mysql> create algorithm=merge view view_ro(id,name,owner_name) as select r.id,r.name,o.owner_name from room r,owner o where r.id=o.roomid with local check option;
		

	//-- 删除指定的视图
		drop view vowner;
		drop view if exists vowner;		//如果表存在就删除
			drop 	删除
			view	指定删除的类型为视图
			vowner	视图名
			
			
			
	//-- 查看视图详细信息
	
		SHOW CREATE VIEW work_view\G
		

		
	//-- 更新视图字段
	
		//CREATE OR REPLACE VIEW语句修改视图
		CREATE OR REPLACE ALGORITHM=TEMPTABLE
			VIEW work_view(ID,NAME)
			AS SELECT id,name FROM work;
			
		CREATE OR REPLACE语句非常灵活在视图存在的情况下可对视图进行修改，视图不在的情况下可创建视图.
		其基本用法和CREATE VIEW 几乎一致
	
	
	
		//alter语句修改视图
		ALTER VIEW work_view2(NAME,SALARY,ADDR)
			AS SELECT name,salary,address FROM work,salary
			WHERE work.id=salary.id;
	
	
	//-- 更新视图数据
		更新视图其实就是修改真实表中的数据
		UPDATE work_view2 SET SALARY=5899.00 WHERE NAME='张三';
	
	
			
			
			
			
			


	
	

//-- 示例---三表关联视图


mysql> select * from tp_perm_lan1;
+----+------+
| id | name |
+----+------+
|  1 | A    |
|  2 | B    |
+----+------+
2 rows in set (0.00 sec)

mysql> select * from tp_perm_lan2;
+----+------+------+
| id | name | pid1 |
+----+------+------+
|  1 | A1   | 1    |
|  2 | A2   | 1    |
|  3 | B1   | 2    |
|  4 | B2   | 2    |
+----+------+------+
4 rows in set (0.00 sec)

mysql> select * from tp_perm_lan3;
+----+------+------+------+------+
| id | name | addr | pid1 | pid2 |
+----+------+------+------+------+
|  1 | aa1  | aa1  | 1    | 1    |
|  2 | aa2  | aa2  | 1    | 1    |
|  3 | a21  | a21  | 1    | 2    |
|  4 | a22  | a22  | 1    | 2    |
|  5 | b11  | b11  | 2    | 3    |
|  6 | b12  | b12  | 2    | 3    |
|  7 | b21  | b21  | 2    | 4    |
|  8 | b22  | b22  | 2    | 4    |
+----+------+------+------+------+

mysql> select * from tp_perm_lan_view;
+----+------+------+------+-------+------+-------+
| id | name | addr | pid1 | name1 | pid2 | name2 |
+----+------+------+------+-------+------+-------+
|  1 | aa1  | aa1  | 1    | A     | 1    | A1    |
|  2 | aa2  | aa2  | 1    | A     | 1    | A1    |
|  3 | a21  | a21  | 1    | A     | 2    | A2    |
|  4 | a22  | a22  | 1    | A     | 2    | A2    |
|  5 | b11  | b11  | 2    | B     | 3    | B1    |
|  6 | b12  | b12  | 2    | B     | 3    | B1    |
|  7 | b21  | b21  | 2    | B     | 4    | B2    |
|  8 | b22  | b22  | 2    | B     | 4    | B2    |
+----+------+------+------+-------+------+-------+
8 rows in set (0.00 sec)

//普通三表关联
create algorithm=merge view tp_perm_lan_view(id,name,addr,pid1,name1,pid2,name2) as select l3.id,l3.name,l3.addr,l3.pid1,l1.name name1,l3.pid2,l2.name name2 from ((tp_perm_lan3 l3 join tp_perm_lan2 l2) join tp_perm_lan1 l1) where ((l3.pid2 = l2.id) and l3.pid1 = l1.id);

//带排序 
create algorithm=merge view tp_perm_lan_view(id,name,addr,pid1,name1,pid2,name2) as select l3.id,l3.name,l3.addr,l3.pid1,l1.name name1,l3.pid2,l2.name name2 from ((tp_perm_lan3 l3 join tp_perm_lan2 l2) join tp_perm_lan1 l1) where ((l3.pid2 = l2.id) and l3.pid1 = l1.id) order by l3.pid1 asc;


//带with条件，更新视图时要满足所有相关视图和表的条件
create algorithm=merge view tp_perm_lan_view(id,name,addr,pid1,name1,pid2,name2) as select l3.id,l3.name,l3.addr,l3.pid1,l1.name name1,l3.pid2,l2.name name2 from ((tp_perm_lan3 l3 join tp_perm_lan2 l2) join tp_perm_lan1 l1) where ((l3.pid2 = l2.id) and l3.pid1 = l1.id) with CASCADED check option;





	
	
	
	
	