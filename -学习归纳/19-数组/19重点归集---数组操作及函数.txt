
//===== 数组的特性
//===== 数组的声明 
//===== 删除数组中的元素 
//===== 多维数组的声明和使用
//===== count() 计算数组中元素的个数
//===== 数组的遍历
//===== while+指针遍历数组
//===== do while+指针遍历数组
//===== for+指针遍历数组
//===== 数组的注意事项：
	//--- 创建数组未指定下标，PHP会以最大的那个下标值加 1 作为该元素的下标（关键字）.
	//--- 如果我们给某个元素的下标一样，则会覆盖原来的值。 
	//--- 当以false 和true 做为下标时，那么 false 相当于0, true相当于1.
	//--- 当以 null 做为下标时，那么访问时 null 等同于 " "   
	//--- 当下标带有小数部分时，默认是取整数部分，如12.4 等同于 12;
	//--- 显示数组的方式：echo ,print_r(),var_dump()
	//--- 访问数组的时候，不要越界。
	//--- 一维数组的使用陷井：
	//--- php的数组可以动态增长。
	//--- php的数组相关的函数说明count,is_array,explode。
	//--- php数组遍历的四个方法：for(), while(), do_while(), foreach()
	//--- unset销毁元素。
	//--- 数组运算符$a + == != <> !== $b：
	//--- 数组案例：求平均分




array_change_key_case ― 返回字符串键名全为小写或大写的数组
array_chunk ― 将一个数组分割成多个
array_column ― 返回数组中指定的一列
array_combine ― 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值
array_count_values ― 统计数组中所有的值出现的次数
array_diff_assoc ― 带索引检查计算数组的差集
array_diff_key ― 使用键名比较计算数组的差集
array_diff_uassoc ― 用用户提供的回调函数做索引检查来计算数组的差集
array_diff_ukey ― 用回调函数对键名比较计算数组的差集
array_diff ― 计算数组的差集
array_fill_keys ― 使用指定的键和值填充数组
array_fill ― 用给定的值填充数组
array_filter ― 用回调函数过滤数组中的单元
array_intersect_assoc ― 带索引检查计算数组的交集
array_intersect_key ― 使用键名比较计算数组的交集
array_intersect_uassoc ― 带索引检查计算数组的交集，用回调函数比较索引
array_intersect_ukey ― 用回调函数比较键名来计算数组的交集

array_key_exists ― 检查给定的键名或索引是否存在于数组中


array_merge_recursive ― 递归地合并一个或多个数组
array_merge ― 合并一个或多个数组
array_multisort ― 对多个数组或多维数组进行排序
array_pad ― 用值将数组填补到指定长度
array_pop ― 将数组最后一个单元弹出（出栈）
array_product ― 计算数组中所有值的乘积
array_push ― 将一个或多个单元压入数组的末尾（入栈）
array_rand ― 从数组中随机取出一个或多个单元
array_reduce ― 用回调函数迭代地将数组简化为单一的值
array_replace_recursive ― 使用传递的数组递归替换第一个数组的元素
array_replace ― 使用传递的数组替换第一个数组的元素
array_reverse ― 返回一个单元顺序相反的数组
array_search ― 在数组中搜索给定的值，如果成功则返回相应的键名
array_slice ― 从数组中取出一段
array_splice ― 把数组中的一部分去掉并用其它值取代
array_sum ― 计算数组中所有值的和
array_udiff_assoc ― 带索引检查计算数组的差集，用回调函数比较数据
array_udiff_uassoc ― 带索引检查计算数组的差集，用回调函数比较数据和索引
array_udiff ― 用回调函数比较数据来计算数组的差集
array_uintersect_assoc ― 带索引检查计算数组的交集，用回调函数比较数据
array_uintersect_uassoc ― 带索引检查计算数组的交集，用回调函数比较数据和索引
array_uintersect ― 计算数组的交集，用回调函数比较数据
array_unique ― 移除数组中重复的值
array_unshift ― 在数组开头插入一个或多个单元
array_walk_recursive ― 对数组中的每个成员递归地应用用户函数
array_walk ― 使用用户自定义函数对数组中的每个元素做回调处理
array ― 新建一个数组
arsort ― 对数组进行逆向排序并保持索引关系
asort ― 对数组进行排序并保持索引关系
compact ― 建立一个数组，包括变量名和它们的值
each ― 返回数组中当前的键／值对并将数组指针向前移动一步
key_exists ― 别名 array_key_exists
krsort ― 对数组按照键名逆向排序
ksort ― 对数组按照键名排序
list ― 把数组中的值赋给一些变量
natcasesort ― 用“自然排序”算法对数组进行不区分大小写字母的排序
natsort ― 用“自然排序”算法对数组排序
pos ― current 的别名
range ― 建立一个包含指定范围单元的数组
rsort ― 对数组逆向排序
shuffle ― 将数组打乱
sort ― 对数组排序
uasort ― 使用用户自定义的比较函数对数组中的值进行排序并保持索引关联
uksort ― 使用用户自定义的比较函数对数组中的键名进行排序
usort ― 使用用户自定义的比较函数对数组中的值进行排序




//===== array()  	数组的声明
//===== unset() 	删除变量
//===== count() 	计算数组元素的个数 (别名 sizeof)
//===== key()	  	获得当前元素的键
//===== current() 	获得当前元素的值
//===== next() 		指针下移返回该值，末尾返回false
//===== prev() 		指针上移返回该值，到头返回false
//===== reset()		指针移动到最前面。
//===== end()		指针移动到最后面。
//===== foreach() 	遍历数组
//===== extract() 	把数组元素key转换成变量名，value转换成变量值。
//===== http_build_query 将数组内容以URL键值对方式显示
//===== array_values() 	返回这个数组中的所有的值 
//===== array_keys() 	返回数组中的所有的键 及自制此功能函数
//===== in_array() 	查看数组中是否有指定的元素 及自制此功能函数
//===== array_flip() 	调换数组中元素的键和值 及自制此功能函数
//===== array_multisort() 多维数组按值排序
//===== array_map ― 将回调函数作用到给定数组的单元上
//===== array-slice($arr,x,y)从数组中取出部分元素
//===== array_splice($arr,2,2,$brr) 把数组中的几个元素，用另一个数组替换

//===== array_rand ― 从数组中随机取出一个或多个单元











//===== array_rand ― 从数组中随机取出一个或多个单元

	$rand = array_rand($array);
	echo $array[$rand];//随机出来的内容
	unset ($array[$rand]);//销毁已经蹦出来的元素









//===== array_splice($arr,2,2,$brr) 把数组中的几个元素，用另一个数组替换

		$arr = array('a','b','c','d','e');
		$brr = array('x','y','z');
		$crr = array_splice($arr,2,2,$brr);
		print_r($arr);     // $arr被替换
		echo '<br/>';
		print_r($crr);     //  返回的是被替换掉的数组元素
		echo '<hr/>'; 
		//思考   往数组插入元素 、 删除一部分元素










//===== array-slice($arr,x,y)从数组中取出部分元素

		$arr = array('a'=>'黄瓜','b'=>'香蕉','c'=>'豆角','d'=>'萝卜','e'=>'榴莲');
		$brr = array_slice($arr,1,3);
		print_r($brr);
		echo '<hr/>';










//===== array_map ― 将回调函数作用到给定数组的单元上

		<?php
			function cube($n)				//声明一个函数
			{
				return($n * $n * $n);
			}

			$a = array(1, 2, 3, 4, 5);
			$b = array_map("cube", $a);		//调用函数，并指定函数的参数为$a
			print_r($b);
			?> 
			这使得 $b 成为： 

			Array
			(
				[0] => 1					//调用函数运算  1 * 1 * 1
				[1] => 8					// 运算  2 * 2 * 2
				[2] => 27
				[3] => 64
				[4] => 125
			)


















//===== array_multisort() 多维数组按值排序

	$Tarray = array(
		array('id'=> 0,'name'=>'123833'),
		array('id'=> 0,'name'=>'aaa'),
		array('id'=> 0,'name'=>'albabaababa'),
		array('id'=> 0,'name'=>'12356'),
		array('id'=> 0,'name'=>'123abc')
	);
	foreach($Tarray as $key=>$value){
		$long[$key]=strlen($value['name']);		//保存每个子元素name内容的长度
	}
	array_multisort($long,SORT_DESC,$Tarray);   	// _ASC 升序， _DESC 降序
	echo "<pre>";
	$i=1;
	foreach($Tarray as &$v){
		$v['id']=$i;
		$i++;
	}
	var_dump($Tarray);





















//===== array_intersect   计算数组的交集

	$a=[1,2,3];
	$b=[1,2,3,4,5];
	var_dump(array_intersect($a,$b));	 //求出相同的元素
	
		//结果： array(3) { [0]=> int(1) [1]=> int(2) [2]=> int(3) } 
		
	echo count(array_intersect($a,$b));		//求出相同元素的个数
		
		//结果 3
	









//===== array_flip() 	调换数组中元素的键和值 及自制此功能函数

	$arr=array('a'=>'aaa','b'=>'bbb','c'=>'ccc','d'=>'ddd','e'=>'eee');
	
	var_dump($arr);
	echo '<br>';
	var_dump(array_flip($arr));
	echo "<br>";
	var_dump(test3($arr));
	function test3($arr){
		foreach($arr as $k=>$v){
			$arr2[$v]=$k;
		}
		return $arr2;
	}













//===== in_array() 	查看数组中是否有指定的元素 及自制此功能函数

	$arr = array(1,2,3,4,5,2,2,3,4,5,6,7,8); 
	print_r($arr);
	echo "<br>";
	$a='3';
	var_dump(in_array($a,$arr));
	echo "<br>";
	var_dump(in_array($a,$arr,true));
	echo "<br>";








//===== array_keys() 	返回数组中的所有的键 及自制此功能函数
	
	
	$arr=array('a'=>'aaa','b'=>'bbb','c'=>'ccc','d'=>'ddd','e'=>'eee');
	
	var_dump($arr);
	echo '<br>';
	var_dump(array_keys($arr));
	
	
	function test2($arr){
		foreach($arr as $k=>$v){
			$arr2[]=$k;
		}
		return $arr2;
	}
	
	echo '<br>';
	var_dump(test2($arr));










//===== array_values() 	返回这个数组中的所有的值 及自制此功能函数
	
	$arr=array('a'=>'aaa','b'=>'bbb','c'=>'ccc','d'=>'ddd','e'=>'eee');
	var_dump($arr);
	echo '<br>';
	var_dump(array_values($arr));
	
	function test1($arr){
		foreach($arr as $k=>$v){
			$arr2[]=$v;
		}
		return $arr2;
	}
	echo '<br>';
	var_dump(test1($arr));











//===== key()	  	获得当前元素的键
//===== current() 	获得当前元素的值
//===== next() 		指针下移返回该值，末尾返回false
//===== prev() 		指针上移返回该值，到头返回false
//===== reset()		指针移动到最前面。
//===== end()		指针移动到最后面。

	$list = array('波多野结衣','饭岛爱','苍井空','麻生早苗','光月夜也','麻生舞','小室友里','小泽圆');
	
	echo key($list).'<br>';	
	echo current($list).'<br>';
	echo next($list).'<br>';
	echo prev($list).'<br>';
	echo end($list).'<br>';
	echo reset($list);










//===== foreach() 	遍历数组

	$list = array('波多野结衣','饭岛爱','苍井空','麻生早苗','光月夜也','麻生舞','小室友里','小泽圆');
	foreach($list as $k=>$v){
		echo $k.'--'.$v.'<br>';
	}

	结果：

		0--波多野结衣
		1--饭岛爱
		2--苍井空
		3--麻生早苗
		4--光月夜也
		5--麻生舞
		6--小室友里
		7--小泽圆











//===== count() 	计算数组元素的个数

	$list = array('波多野结衣','饭岛爱','苍井空','麻生早苗','光月夜也','麻生舞','小室友里','小泽圆');
	echo count($list);










//===== array()  	数组的声明 

    	使用[]来直接声明，[]是array()的简化方式。

    注意：
        1、这种写法得是php 5.4版本以后可以这样使用。
        2、新版本中可以使用一种方式来获取。

        $var = array('a'=>'1',1=>'b');
        $var = ['a'=>1,1=>'b'];
	
	$arr11=array('A','B','C');
	var_dump($arr11);
	
	//另一种声明数组的方式
	$arr12=['a','c','d'];
	var_dump($arr11);










//===== unset() 	删除变量

	$list = array('波多野结衣','饭岛爱','苍井空','麻生早苗','光月夜也','麻生舞','小室友里','小泽圆');
	echo $list[1];
	unset($list[1]);
	echo $list[1];





//===== http_build_query 将数组内容以URL键值对方式显示    	


	$data = array('foo', 'bar','a'=>'aa');

	echo http_build_query($data)."<br>";	//以索引或关联下标方式
	echo http_build_query($data, 'myvar_');	//指定下标前缀的方式

	//0=foo&1=bar&a=aa
	//myvar_0=foo&myvar_1=bar&a=aa 





//===== extract() 	把数组元素key转换成变量名，value转换成变量值。

	extract ― 从数组中将变量导入到当前的符号表


	$arr=array('a'=>'aa','b'=>'bb','c'=>'cc');	

	extract($arr);
	echo $a.'<br>';
	echo $b.'<br>';
	echo $c.'<br>';

	结果：
		aa
		bb
		cc
































	
	
	
	
	
	
	
//===== 数组的特性

        1）、声明数组时，索引数组下标可以不连续。指定什么就是什么。
        2）、负数可以作为下表，但是没有太大意义。
        3）、声明关联数组时如果下标不加引号来包含下表，会当作常量来使用。如果连这个常量都没有才会转换为字符串
        4）、如果下标是null，那么下标将为空字符串，如果下标为小数将会舍掉小数位。
        5）、索引下标和关联下标可以放在同一个数组中，但是我们不经常用。
        6）、数组的关联下标和索引下表不会相互影响。关联下标不会影响索引下标的排列规则。
        7）、array()没有指定下标，默认是索引数组，从0开始
        8）、array()可以指定下标，使用=>操作符来进行声明，索引和关联都这样做

	1）、声明数组时，索引数组下标可以不连续。指定什么就是什么
        2）、负数可以作为下标，但是没有太大意义
	$arr[0]='a';
	$arr[2]='b';
	$arr[4]='c';
	$arr[-4]='d';
	echo '<pre>';
		var_dump($arr);
	echo '<pre>';

	
	3）、声明关联数组时如果下标不加引号来包含下表，会当作常量来使用。如果连这个常量都没有才会转换为字符串<br>";
	define('hehe','abc');
    $var[hehe] = 'b';
    echo '<pre>';
        var_dump($var);
    echo '</pre>';
	
	
	4）、如果下标是null，那么下标将为空字符串，如果下标为小数将会舍掉小数位。<br>";
	
	$var[null] = 'a';
    //var_dump($var);
    echo $var[''].'<br>';
	
	$var[3.14234]='kdf';
	echo $var[3].'<br>';
                  

				  
	5）、索引下标和关联下标可以放在同一个数组中，但是我们不经常用。<br>6）、数组的关联下标和索引下表不会相互影响。关联下标不会影响索引下标的排列规则";
	$arr1=array('a','b','c','d'=>'ddd','e','f');
	echo '<pre>';
	var_dump($arr1);
    echo '<pre>';
                  
				  
				  
	


	
	
//===== 数组的声明 

    	使用[]来直接声明，[]是array()的简化方式。

    注意：
        1、这种写法得是php 5.4版本以后可以这样使用。
        2、新版本中可以使用一种方式来获取。

        $var = array('a'=>'1',1=>'b');
        $var = ['a'=>1,1=>'b'];
	
	$arr11=array('A','B','C');
	var_dump($arr11);
	
	$arr12=['a','c','d'];
	var_dump($arr11);
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
//===== 删除数组中的元素 
	
	1,unset();直接在内存中释放，下标释放。
    	2,null值：删除指定元素下标的值，设置为null ，下标保留
	3,单独使用[]时，不指定下标的时候，索引下标的值将为出现过得最大的下标+1。
				  
	$avList = array('波多野结衣','饭岛爱','苍井空','麻生早苗','光月夜也','麻生舞','小室友里','小泽圆');


   	 echo '<pre>';
       	 var_dump($avList);
   	 echo '</pre>';
    	//unset($avList[1]);//删除变量
   	 $avList[1] = null;
	
	
    	unset($avList[7]);//去掉了下标为7的小泽圆
   	 $avList[] = '吉泽明步';
	
    	echo '<pre>';
     	   var_dump($avList);
    	echo '</pre>';



	
	
	
	
	
	
	
	
	
	
	
	
//===== 多维数组的声明和使用

	
     $dongMan = array(
        'maoxianlei'=>array(
           array('mingCheng'=>'熊出没','jishu'=>104),
           array('mingCheng'=>'火影忍者','jishu'=>601),
           array('mingCheng'=>'死神','jishu'=>366)
        ),
        'gaoxiaolei'=>array(
           array('mingCheng'=>'蜡笔小新','jishu'=>1665),
           array('mingCheng'=>'哆啦A梦','jishu'=>1760),
           array('mingCheng'=>'樱桃小丸子','jishu'=>367)
        )
    );

    echo "<pre>";
        var_dump($dongMan);
    echo "</pre>";
    echo $dongMan['maoxianlei'][2]['mingCheng'];
    echo $dongMan['gaoxiaolei'][1]['mingCheng'];
	
	
	
	
	
	
	
	
	
	
	
//===== count() 计算数组中元素的个数
	
	
	$array = array(1,2,3,4,5,6,7);

    //函数
    $count = count($array);//用来计算数组中元素的个数

    var_dump($count);
	
	
	
	
	




//===== 数组的遍历


	$array = array(1,2,3,4,5,6,7);
	for($i=0;$i<count($array);$i++){
		echo $array[$i].'<br>';
	}
	
	echo '<hr>';
	foreach($array as $k=>$v){
		echo $k.'--'.$v.'<br>';
	}
	
	
	
	
	

	
	
	
//===== while+指针遍历数组

	$arr=array('a'=>'aaa','b'=>'bbb','c'=>'ccc');
	while(true){
		echo key($arr).'===>'.current($arr).'<br>';
		if(!next($arr)){
			break;
		}
	}
	
	
	
	

	
	
	
//===== do while+指针遍历数组
	
	$arr=array('a'=>'aaa','b'=>'bbb','c'=>'ccc','d'=>'ddd','e'=>'eee');
	do{
		echo key($arr).'--'.current($arr).'<br>';
	}while(next($arr));
	
	
	
	
	
	
	
	
	
	
	
	
	
	
//===== for+指针遍历数组
	
	$arr=array('a'=>'aaa','b'=>'bbb','c'=>'ccc','d'=>'ddd','e'=>'eee');
	$count=count($arr);
	for($i=0;$i<$count;$i++){
		echo key($arr).'--'.current($arr).'<br>';
		next($arr);
	}
	
	
	
	
	
	
	
//===== array_shift() 删除数组中的第一个元素，并返回被删除元素的值。

	<?php
		$arr1=array(1,2,3,4,5);
		print_r($arr1);
		echo '<br>'.array_shift($arr1).'<br>';  //返回被删除的元素值 1
		print_r($arr1);

	?>

	结果：
	Array ( [0] => 1 [1] => 2 [2] => 3 [3] => 4 [4] => 5 ) 
	1
	Array ( [0] => 2 [1] => 3 [2] => 4 [3] => 5 )
	























//===== 数组的注意事项：

	//--- 创建数组未指定下标，PHP会以最大的那个下标值加 1 作为该元素的下标（关键字）.
	
		$arr=array(5=>"logo",567,90);
		//要访问“logo”这个值。
		echo $arr[5];
		//要访问 567 这个值；
		echo $arr[6];





	//--- 如果我们给某个元素的下标一样，则会覆盖原来的值。 

		$arr=array(5=>"logo",567,90);
		$arr[5]="yes";//替换某个元素值
		echo $arr[5]; //这时的结果就不是"logo"了，而是"yes".
		echo $arr[6]; // 这个还是不变的。





	//--- 当以false 和true 做为下标时，那么 false 相当于0, true相当于1.

		如：
		$arr[true]="hello";
		$arr[false]="word";
		echo $arr[0];  //就会显示"word";
		echo $arr[1];  //就会显示“hello”





	//--- 当以 null 做为下标时，那么访问时 null 等同于 " "   

		如：
		$arr[null]="北京";
		echo $arr[null]；
		echo $arr[" "];    它们两个的显示结果都是“北京”。
		echo $arr[];    //但是这样的访问是错误的，下标处不能为空内容。




	//--- 当下标带有小数部分时，默认是取整数部分，如12.4 等同于 12;
	
		如：
		$arr[12.4]="hhhh";
		echo $arr[12.4];
		echo $arr[12];   //它们的结果都是，hhhh;
		当整数部分相同，小数不同时，后声明的变量值将覆盖前面的；
		如：
		$arr[12.4]="hhhh";
		$arr[12.5]="aaa";

		echo $arr[12.4]; //结果会显示12.5 的aaa.  12.4的hhhh以被覆盖。





	//--- 显示数组的方式：echo ,print_r(),var_dump()

		echo 只显示指定下标相关的值。
		如：
		echo $arr[0];

		print_r() 同时显示下标与相应的值。
		如：
		print_r($arr);
		Array([1]=>hello [0]=>world []=>北京 [123]=>hhh)

		var_dump() 显示更细致的内容信息
		如：
		var_dump($arr);
		array(4) {[1]=>string(5)"hello [0]=>string(5)"world" [""]=>string(6)"北京" [123]=>string(3)"hhh"}





	//--- 访问数组的时候，不要越界。

		如：
		$arr=array(1,2,43);
			echo $arr[3] ; //数组越界，无法访问到，将提示，notice.











	//--- 一维数组的使用陷井：

		$arr[bar]="hello";
		echo $arr[bar];
		这样使用会让处理器误认为这是一个常量，所以在引用时一定要加引号，如下：
		echo $arr["bar"];







	//--- php的数组可以动态增长。

		如：
		$a=array(2,3);
		$a[3]=56;
		echo $a[3];  //结果：56 ，这里说明PHP的数组是可以动态增长的，且不一定要按照顺序。
		






	//--- php的数组相关的函数说明count,is_array,explode。

		1，count($arr) :可以统计该数组共有多少元素。
		2，is_array($arr) :判断变量名是否为一个数组。 
		3, print_r()和var_dump() 可以同时显示数据类型及内容 
		4, explode("&",$arr);以&符号为标记，拆分字符串,
			如：
			$str="北京&顺平&天津";
			$arr=explode("&",$str);
			print_r($arr);
			结果：Array([0]=>北京 [1]=>顺平 [2]=>天津);
		5, sort 函数 用于排序。






	//--- php数组遍历的四个方法：for(), while(), do_while(), foreach()

		!!!如果使用 for,while,do_while时，要确定该数组的下标是以整数形式且按顺序排列不间断的。
		$colors=array('red','blue','green','yellow');
		//for()
		for($i=0;$i<count($colors);$i++){
			echo $color[$i];
		}

		//while()
		$i=0;
		while($i<count($colors)){
			echo $colors[$i];
		}

		//do_while()
		$i=0;
		do{
			echo $colors[$i];
			$i++;
		}while($i<$count($colors))

		//foreach()
		foreach($colors as $v=>$k){
			echo $v."=>".$k;
		}
		

		

		

	//--- unset销毁元素。

		使用unset函数可以销毁某个元素，也可以销毁某个变量，销毁该元素后，
		关键字（下标）不会重新组合。

		$arr[0]=123;
		$arr[1]=156;
		$arr[2]="hello";
		/比如现在我要删除$arr[1] 元素
		echo $arr[1];
		unset($arr[1]);
		echo $arr[1];
		//这时$arr[1]以经为空
		echo print_r($arr);
		//显示:Array([0]=>123 [2]=>hello)










	//--- 数组运算符$a + == != <> !== $b：

		$a + $b 联合   把$b 的内容加入到$a中，当$a中有的就不加了，没有的就加进去

		$a == $b  相等   如果$a和$b 具有相同的键/值对并且顺序和类型都相同则为true

		$a!=$b   不等  如果$a 不等于 $b 则为true

		$a<>$b   不等  如果$a 不等于 $b 则为true

		$a!==$b   不全等 如果$a不全等于$b则为true

		例：

		$a = array('a'=>'apple','b'=>'banana');
		$b = array('a'=>'pear','b'=>'strawberry','c'=>'cherry');

		$c = $a+$b ; //把$b数组的键值加到$a中.
		var_dump($c); //结果: 'a'=>'apple','b'=>'banana','c'=>'chery'

		$c = $b+$a; 
		var_dump($c); //结果：'a'=>'pear','b'=>'banana','c'=>'chery'  它会不变，因为$a有的$b全有，






	//--- 数组案例：求平均分

		五个小孩比赛滑轮，他们的滑完100米，分别用了10s,12s,5.7s,9s,14s,请编写一个程序，计算他们的
		平均时间。 时间保留小数点后两位。

		<body>
			<form action="result.php" method="post">
				<input type="text" name="grade" />	
				<input type="submit" value="开始统计" />
			</form>
		</body>

		result.php页面：
		<?php
			//接收用户提交的学生的成绩
			$grades=$_REQUEST['grade'];
				//echo 'grade='.$grades;	
			$grades=explode(" ",$grade);   //拆分，对成绩进行分割
			$allGrades=0;
			//遍历
			foreach($grades as $k=>$v){
				$allGrades += $v;      //隐藏转换，，这里会把字符串转化成数值。
			}
			echo "平均时间是=".$allGrades/count($grades);		


		?>

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
//===== filter 过滤函数  	
	
		
	var_dump(filter_var('bob@example.com', FILTER_VALIDATE_EMAIL));		//判断是否为一个邮箱
	var_dump(filter_var('http://example.com', FILTER_VALIDATE_URL));	//判断是否为一个URL
	var_dump(filter_var(755, FILTER_VALIDATE_INT));						//判断是否为个整型数值
	var_dump(filter_var('http://example.com', FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED));	//判断是否为url且为request类型


	结果；
		string 'bob@example.com' (length=15)

		string 'http://example.com' (length=18)

		int 755

		boolean false
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				