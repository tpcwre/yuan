//===== class_alias ― 为类起别名
//===== class_exists ― 检查类是否已定义
//===== get_class_methods ― 返回类中方法名组成的数组
//===== get_class_vars ― 返回类中默认属性组成的数组
//===== get_class ― 返回对象的类名
//===== get_object_vars ― 返回由对象属性组成的关联数组
//===== get_declared_classes ― 返回由已定义类的名字所组成的数组
//===== get_declared_interfaces ― 返回一个数组包含所有已声明的接口
//===== get_parent_class ― 返回对象或类的父类名
//===== method_exists ― 检查类的方法是否存在
//===== property_exists ― 检查对象或类是否具有该属性

	__autoload ― 尝试加载未定义的类
	call_user_method_array ― 调用一个用户方法，同时传递参数数组（已废弃）
	call_user_method ― 对特定对象调用用户方法（已废弃）
	get_called_class ― 后期静态绑定（"Late Static Binding"）类的名称
	get_declared_traits ― 返回所有已定义的 traits 的数组
	interface_exists ― 检查接口是否已被定义
	is_a ― 如果对象属于该类或该类是此对象的父类则返回 TRUE
	is_subclass_of ― 如果此对象是该类的子类，则返回 TRUE
	trait_exists ― 检查指定的 trait 是否存在




//===== get_called_class ― the "Late Static Binding" class name

		(PHP 5 >= 5.3.0)  获取调用者的类名

//===== interface_exists ― 检查接口是否已被定义

		格式：bool interface_exists ( string $interface_name [, bool $autoload ] )
			本函数在由 interface_name 给出的接口已定义时返回 TRUE，否则返回 FALSE。

//===== is_a ― 如果对象属于该类或该类是此对象的父类则返回 TRUE
		我们可以使用运算符： instanceof代替上面的is_a操作
		
		格式：bool is_a ( object $object , string $class_name )
			如果对象是该类或该类是此对象的父类则返回 TRUE，否则返回 FALSE。 
			
//===== is_subclass_of ― 如果此对象是该类的子类，则返回 TRUE

		格式：bool is_subclass_of ( object $object , string $class_name )
			如果对象 object 所属类是类 class_name 的子类，则返回 TRUE，否则返回 FALSE。 
			

			
			
			
			
	
//===== class_alias ― 为类起别名
	
	class A{
		public function fun(){
			echo "aaaaaaaa";
		}
	}
	
	class_alias('A','B');
	$b = new B();
	$b->fun();
	echo "<hr>";

	--如果由 class_name 所指的类已经定义，此函数返回 TRUE，否则返回 FALSE。
			
	默认将会尝试调用 __autoload，如果不想让 class_exists() 调用 __autoload，
	可以将 autoload 参数设为 FALSE。
	
	

	
//===== class_exists ― 检查类是否已定义
	
	if(class_exists('A')){
		$a = new A();
		$a->fun();
	}else{
		echo "这个类不存在！";
	}
	echo "<hr>";
	
	
	
	
	
	
	
	
	

//===== get_class_methods ― 返回类中方法名组成的数组
//===== get_class_vars ― 返回类中默认属性组成的数组
//===== get_class ― 返回对象的类名
//===== get_object_vars ― 返回由对象属性组成的关联数组
	
	class demo3{
		public $a='a';
		public $aa;
		protected $b;
		private $c;
		public function a(){
			echo 'a';
		}
		public function aa(){}
		protected function b(){
			echo "b";
		}
		private function c(){
			echo 'c';
		}
	}
	
	var_dump(get_class_methods('demo3'));
	echo "<hr>";
	var_dump(get_class_vars('demo3'));
	echo "<hr>";
	$d = new demo3();
	echo get_class($d);
	echo "<hr>";
	print_r(get_object_vars($d));
	echo "<hr>";
	
	
	
	
	
	//get_class ― 返回对象的类名
		格式： string get_class ([ object $obj ] )
			返回对象实例 obj 所属类的名字。如果 obj 不是一个对象则返回 FALSE。
	
	
	//get_class_methods ― 返回类中方法名组成的数组
		格式：array get_class_methods ( mixed $class_name )
			返回由 class_name 指定的类中定义的方法名所组成的数组。如果出错，则返回 NULL。 
			从 PHP 4.0.6 开始，可以指定对象本身来代替 class_name
	
	
	//get_class_vars ― 返回由类的默认公有属性组成的数组
		格式： array get_class_vars ( string $class_name )
			返回由类的默认公有属性组成的关联数组，此数组的元素以 varname => value 的形式存在。
	
	
	//get_object_vars ― 返回由对象属性组成的关联数组
		格式：array get_object_vars ( object $obj )
			返回由 obj 指定的对象中定义的属性组成的关联数组。
	
	
	
	
	
//===== get_declared_classes ― 返回由已定义类的名字所组成的数组
//===== get_declared_interfaces ― 返回一个数组包含所有已声明的接口
//===== get_parent_class ― 返回对象或类的父类名

	class E{}
	class F{}
	class G{}
	interface H{}
	interface I{}
	class K extends E{}
	
	print_r(get_declared_classes());
	echo "<hr>";
	print_r(get_declared_interfaces());
	echo "<hr>";
	echo get_parent_class('K');
	echo "<hr>";
	$k = new K();
	echo get_parent_class($k);
	echo "<hr>";

	
	
	//get_declared_classes ― 返回由已定义类的名字所组成的数组
		格式：array get_declared_classes ( void )
			返回由当前脚本中已定义类的名字组成的数组。
	
	
	//get_declared_interfaces ― 返回一个数组包含所有已声明的接口
		格式：array get_declared_interfaces ( void )
			本函数返回一个数组，其内容是当前脚本中所有已声明的接口的名字。
	
	
	//get_parent_class ― 返回对象或类的父类名
		格式：string get_parent_class ([ mixed $obj ] )
			如果 obj 是对象，则返回对象实例 obj 所属类的父类名。
	
	
	
	
//===== method_exists ― 检查类的方法是否存在
//===== property_exists ― 检查对象或类是否具有该属性
	
	class L{
		public $name='zhangsan';
		protected $age=18;
		private $sex='nv';
		public function getInfo(){
			return $this->name.'-'.$this->age.'-'.$this->sex;
		}
		protected function aa(){
			echo 'aaaaaa';
		}
		private function bb(){
			echo "bbbbbbbb";
		}
	}
	$l = new L();
	var_dump(method_exists($l,'getInfo'));
	var_dump(method_exists($l,'aa'));
	var_dump(method_exists($l,'bb'));
	var_dump(method_exists($l,'cc'));
	echo "<hr>";
	var_dump(property_exists($l,'name'));
	var_dump(property_exists($l,"age"));
	var_dump(property_exists($l,'sex'));
	var_dump(property_exists($l,'aa'));
	echo "<hr>";
	
	

	//method_exists ― 检查类的方法是否存在
		格式：bool method_exists ( object $object , string $method_name )
			如果 method_name 所指的方法在 object 所指的对象类中已定义，则返回 TRUE，否则返回 FALSE。

			
	//property_exists ― 检查对象或类是否具有该属性
		格式：bool property_exists ( mixed $class , string $property )
			本函数检查给出的 property 是否存在于指定的类中（以及是否能在当前范围内访问）。


			
			




	