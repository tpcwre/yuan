

	类和对象的函数

//===== class_alias ― 为类起别名
//===== class_exists ― 检查类是否已定义
//===== get_class_methods ― 返回类中方法名组成的数组
//===== get_class_vars ― 返回类中默认属性组成的数组
//===== get_class ― 返回对象的类名
//===== get_object_vars ― 返回由对象属性组成的关联数组
//===== get_declared_classes ― 返回由已定义类的名字所组成的数组
//===== get_declared_interfaces ― 返回一个数组包含所有已声明的接口
//===== get_parent_class ― 返回对象或类的父类名
//===== method_exists ― 检查类的方法是否存在
//===== property_exists ― 检查对象或类是否具有该属性




	魔术函数

//===== __construct() 构造-实例对象时执行的函数
//===== __destruct() 析构-对象销毁时执行的函数
//===== __get()  获取非公有属性时执行函数
//===== __set()  设置非公有属性时自动执行函数
//===== __isset();  检测非公有属性时自动执行函数
//===== __unset(); 销毁非公有属性时自动执行函数
//===== __clone() 克隆对象自动执行函数
//===== __toString   echo对象时自动执行函数
//===== __call() 调用不空方法时自动执行函数
//===== __autoload() 自动加载其它页的类
//===== __sleep() 序列化自动执行函数
//===== __wakeup() 反序列化自动执行函数









//===== 魔术常量

	__LINE__ 	返回文件中的当前行号
	__FILE__ 	返回文件的完整路径和文件名
	__DIR__		文件所在的目录
	__FUNCTION__	返回函数名称
	__CLASS__	返回类的名称
	__METHOD__	返回类的方法名
	__NAMESPACE__	获取命名空间的名称
	__TRAIT__	Trait 的名字










//===== parent:: 调用父类内容				*
//===== static 静态方法与属性				*
//===== 类的单例（单态）设计模式			*
//===== const 定义类中的常量				*
//===== instanceof 判断变量是否为指定类的实例		*
//=====	un serialize对象的串行化和反串行化  （序列化）	*
//===== 类型约束：目前只支持：array和对象		*
//===== 用return $this 连贯操作				*
//===== class_alias ― 为类起别名			*
//===== class_exists ― 检查类是否已定义		*
//===== 抽象类						*
//===== 接口的使用					*
//===== 使用接口方式实现多态效果			*
//===== 使用抽象类方式实现多态效果			*
//===== 自动加载类的函数：__autoload();			*
//===== 异常的定义，使用和处理				*
//===== 命名空间类的使用				*
//===== 工厂模式					*
//===== 单例（单态）模式				*
//===== 遍历对象的方法和属性
















//===== 遍历对象的方法和属性

		class one{
			public $a='aaaaaa';
			public $b="bbbbb";
			public $c='ccccc';
			public function aa(){

			}
			public function cc(){

			}
			public function dd(){

			}
		}

		//遍历对象的属性
		//方式一：
		$one=new one();
		foreach($one as $k=>$v){
			//echo $k."=>".$v."<br>";
		}
		//方式二：
		$bb=get_class_vars('one');
		print_r($bb)

		//遍历对象的方法;

		$aa=get_class_methods(one);
		print_r($aa);










//=====命名空间类的使用


	namespace myname\demo;
	use aa\Stu as Student; //使用指定空间的类，并起个别名
	require("./aa/Stu.class.php");
	/*
	$s = new \aa\Stu("zhangsan",20);
	echo $s->getInfo();
	*/
	$s = new Student("qq",25);
	echo $s->getInfo();









//=====异常的定义，使用和处理


	//PHP中的异常处理： throw 抛出异常  try捕获异常   catch处理异常
	
	class Demo1{
		public function chu($a,$b){
			if($b==0){
				throw new Exception('除数不可为零！');
			}
			return $a/$b;
		}
	}
	
	
	$d = new Demo1();
	try{
		echo $d->chu(5,0);
	}catch(Exception $e){
		echo $e->getMessage();
	}
	echo "<hr>";
	
















//===== 自动加载类的函数：__autoload();


	function __autoload($className){
		if(file_exists("./module/".$className.".class.php")){
			require "./module/".$className.".class.php";
		}else{
			die("无法加载{$className}类");
		}
	}
	$s=new Module('aaa','28');
	echo $s.'<hr>';










//===== 抽象类

	//抽象类的特点就是不可以实例化,只能继承并重写类中的抽象方法
	
	
	abstract class A{				//含有抽象方法的类就是抽象类
		public function fun1(){
			echo "fun1...";
		}
		public function fun2(){
			echo "fun2...";
		}
		public abstract function fun3();	//这是一个抽象方法
	}

	class B extends A{
		public function fun3(){
			echo "fun3......";
		}
	}
	$b = new B();
	$b->fun1();
	$b->fun2();
	$b->fun3();
	echo "<hr>";


	
	
	
	
	
//===== 接口的使用

	interface  C{		//定义一个A接口
		const PI=3.14;		//接口类中只能有常量和抽象方法
		public function fun1();
		public function fun2();	//抽象方法
		public function fun3();
	}
		
	abstract class D implements C{	//抽象类D 实现了 接口C
		public function fun1(){
			echo "fun1...";
		}
		public function fun2(){
			echo "fun2...";
		}
	}
	
	class E extends D{			//类 E 继承了 类 D 实现了 接口 C 的 fun3()
		public function fun3(){
			echo "fun3......";
		}
	}
	
	$e= new E();
	$e->fun1();
	$e->fun2();
	$e->fun3();
	
	class F{
		public function demo(C $c){
			$c->fun3();
		}
	}
	
	echo "<hr>";
	
	
	
	
	
//===== 使用接口方式实现多态效果

	interface PCI{		//PCI插槽的接口
		public function start();
		public function stop();
	}
	class MainBoard{		//主板
		public function running(PCI $p){   //限制参数为 PCI 的对象
			$p->start();
			$p->stop();
		}
	}
	
	class SoundCard implements PCI{		//用声卡实现了一次接口PCI
		public function start(){
			echo "声卡启动...";
		}
		public function stop(){
			echo "声卡关闭...";
		}
	}
	
	class NetworkCard implements PCI{	//用网卡实现了一次接口PCI
		public function start(){
			echo "网卡启动...";
		}
		public function stop(){
			echo "网卡启动...";
		}
	}
	
	$sc=new SoundCard();
	$nc=new NetworkCard();
	$mb=new MainBoard();	//实例化主板
	$mb->running($sc);		//实例化主板的方法调用了声卡对象 
	$mb->running($nc);		//实例化主板的方法调用了网卡对象 
	echo "<hr>";
	
	
	interface P{
		public function start();
		public function stop();
	}
	class P1 implements P{
		public function start(){
			echo "P1 is start...";
		}
		public function stop(){
			echo "P1 is stop...";
		}
	}
	class P2 implements P{
		public function start(){
			echo "P2 is start...";
		}
		public function stop(){
			echo "P2 is stop...";
		}
	}
	class MP{
		public function running(P $p){
			$p->start();
			$p->stop();
		}
	}
	
	$p1= new P1();
	$p2= new P2();
	$mp= new MP();
	$mp->running($p1);
	$mp->running($p2);
	
	echo "<hr>";

	
	
	
	
	
//=====使用抽象类方式实现多态效果

	abstract class PP{
		abstract public function start();
		abstract public function stop();
	}
	class PP1 extends PP{
		public function start(){
			echo "pp1 is start...";
		}
		public function stop(){
			echo "pp1 is stop...";
		}
	}
	class PP2 extends PP{
		public function start(){
			echo "pp2 is start...";
		}
		public function stop(){
			echo "pp2 is stop...";
		}
	}
	class PPM{
		public function running(PP $p){
			$p->start();
			$p->stop();
		}
	}
	$p1=new PP1();
	$p2=new PP2();
	$pm=new PPM();
	$pm->running($p1);
	$pm->running($p2);
	
	echo "<hr>";














//===== class_exists ― 检查类是否已定义
	
	if(class_exists('A')){
		$a = new A();
		$a->fun();
	}else{
		echo "这个类不存在！";
	}
	echo "<hr>";












//===== class_alias ― 为类起别名
	
	class A{
		public function fun(){
			echo "aaaaaaaa";
		}
	}
	
	class_alias('A','B');
	$b = new B();
	$b->fun();
	echo "<hr>";














//===== 用return $this 连贯操作

	class app{
		public $str='';
		public function append($str){
			$this->str.=$str;
			return $this;
		}
	}
	$ap=new app();
	echo $ap->append('a')->append('b')->append('c')->str;
















//===== 类型约束：目前只支持：array和对象


	class AA{
		public function fun(){
			echo "aa";
		}
	}
	class BB extends AA{
		public function fun(){
			echo "bb";
		}
	}
	class demo{
		public function fun(AA $a){		//约束参数必须是 AA类的对象
			$a->fun();
		}
	}
	$demo=new demo();
	$demo->fun(new BB);
















//=====	un serialize对象的串行化和反串行化  （序列化）
			//serialize() -- 串行化
			//unserialize() -- 反串行化

	class Stu2{
		private $name;
		private $age;
		public function __construct($name,$age){
			$this->name = $name;
			$this->age = $age;
		}
		public function getName(){
			echo "我的名字叫：".$this->name;
		}
		public function __toString(){
			return $this->name.':'.$this->age;
		}
	}
			
	$stu2 = new Stu2('zhangsanfeng',60);
	$str=serialize($stu2);	//将对象串行化转成字串
	echo $str.'<br>';
	file_put_contents('ob.txt',$str);

	$info = file_get_contents("ob.txt");	//获取文件内容
	$ob=unserialize($info);	//将字串反串行化转成对象
	echo $ob.'<br>';
	$ob->getName();			//获取对象中的属性
	echo "<hr>";














//===== instanceof 判断变量是否为指定类的实例

	class AA{}
	class BB extends AA{}
	class CC{}

	$aa=new AA();
	$bb=new BB();
	$cc=new CC();

	var_dump($aa instanceof AA);		//结果 true
	var_dump($bb instanceof AA);
	var_dump($cc instanceof AA);		//结果 false
	echo "<br>";
	var_dump($aa instanceof BB);
	var_dump($bb instanceof BB);
	var_dump($cc instanceof BB);
	var_dump($cc instanceof CC);


	//此函要求传入的对象必须设A类使用instanceof运算符为true的
	function demo(A $a){
	
	}














//===== const 定义类中的常量

	class Game{
		//定义常量
		const RIGHT=1;
		const LEFT=2;
		const UP=3;
		CONST DOWN=4;
		public function move($m){
			switch($m){
				case 1:echo "右";break;
				case 2:echo "左";break;
				case 3:echo "上";break;
				case 4:echo "下";break;
			}
		}
	}

	$g = new Game();
	$g->move(1);
	$g->move(2);
	//使用常量可以提高可读性
	$g->move(Game::UP);
	$g->move(Game::DOWN);

	echo "<hr>";
















//===== 类的单例（单态）设计模式



	class Danli{
							//保存类实例在此属性中
		private static $stat=null;		
							//构造方法声明为private，防止直接创建对象
		private function __construct(){} 
							//用于获取对象静态方法
		public static function makeObject(){
			if(self::$stat==null){		//判断状态是否为空
				self::$stat=new Demo(); //状态为空时可实例化自身的对象，并赋值给状态的静态属性.
			}
			return self::$stat; //将赋值后的属性返回给方法
		}
		
		//下面定义其他方法.....
	}


	//单例模式，只能生成一个对象 
	$d1 = Danli::makeObject();
	$d2 = Danli::makeObject();
	var_dump($d1);
	var_dump($d2);












//===== 类的继承和使用及重写
//===== parent:: 调用父类内容

	class Person{
		private $name;
		private $age;
		public function __construct($name,$age){
			$this->name=$name;
			$this->age=$age;
		}
		public function getinfo(){
			return "姓名：".$this->name."<br> 年龄：".$this->age.'<br>';
		}
	}
	class Stu extends Person{
		private $classid;
		public function __construct($name,$age,$classid){
			parent::__construct($name,$age);
			$this->classid=$classid;
		}
		public function getinfo(){
			return parent::getinfo().'<br>班级：'.$this->classid;
		}
		
	}













//===== static 静态方法与属性


	class Demo{
		public static $name='lisi';		//静态属性
		
		public static function add($a,$b){
			return $a+$b;
		}
		public static function max($a,$b){
			return $a>$b?$a:$b;
		}
		public static function fun(){
			echo self::$name;		//类中调用静态变量
			echo self::max(10,200);		//类中调用静态方法
		}
	}
	$demo=new Demo();

						//对象方式调用静态方法
	echo $demo->add(10,20).'<br>';
	echo $demo->max(5,18).'<br>';

						//静态属性不可通过对象方式调用
	//echo $demo->name;		

						//类名方式调用静态方法
	echo Demo::add(20,25).'<br>';
	echo Demo::max(29,98).'<br>';
	echo Demo::$name;			//在类外调用静态属性
	Demo::fun();
	echo "<hr>";



	static关键字:表示静态的意思: 用于修饰类的属性和方法
	   *static关键字修饰方法称为静态方法，可以不用new（实例化）就可以直接使用方法：如 类名::方法名
			注意：静态方法在实例化后的对象也可以访问  //$对象名->静态方法名
		  
   	   static关键字修饰属性称为静态属性，可以不用new（实例化）就可以直接访问属性：如 类名::属性名
			 注意：静态属性在实例化后的对象不可以访问； //$对象名->静态属性名
	   
	   注意：静态属性是共享的。也就是new很多对象也是共用一个属性
			*在静态方法中不可以使用非静态的内容。就是不让使用$this
			 在类的方法中可以使用其他静态属性和静态方法，不过要使用self关键字：
				 如 【self::静态属性名】或【self::静态方法名】










//===== 工厂模式


		abstract class Figure{
			public abstract function getValue($a,$b);
		}
		class add extends figure{
			public function getValue($a,$b){
				return $a + $b;
			}
		}
		class minus extends figure{
			public function getValue($a,$b){
				return $a - $b;
			}
		}
		class multip extends figure{
			public function getValue($a,$b){
				return $a * $b;
			}
		}
		class divisor extends figure{
			public function getValue($a,$b){
				return $a / $b;
			}
		}
		class count{
			public static function figure($figure){
				switch($figure){
					case 'add':
						return new add();
					break;
					case 'minus':
						return  new minus();
					break;
					case 'multip':
						return new multip();
					break;
					case 'divisor':
						return new divisor();
					break;
				
				}
			}
		}
		$c = count::figure('minus');
		echo $c->getValue(22,5);
			结果：17


















//===== 单例（单态）模式



	class Danli{
							//保存类实例在此属性中
		private static $stat=null;		
							//构造方法声明为private，防止直接创建对象
		private function __construct(){} 
							//用于获取对象静态方法
		public static function makeObject(){
			if(self::$stat==null){		//判断状态是否为空
				self::$stat=new Danli(); //状态为空时可实例化自身的对象，并赋值给状态的静态属性.
			}
			return self::$stat; //将赋值后的属性返回给方法
		}
		
		//下面定义其他方法.....
	}


	//单例模式，只能生成一个对象 
	$d1 = Danli::makeObject();
	$d2 = Danli::makeObject();
	var_dump($d1);
	var_dump($d2);

	echo "<hr>";
