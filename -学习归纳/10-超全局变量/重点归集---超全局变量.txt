//===== PHP_VERSION 获得PHP程序的版本

//===== PHP_OS 操作系统的名称







//===== 超全局变量 

	$_GET 			由URL请求提交至脚本的变量
	$_POST 			由POST方法提交到脚本的变量
	$_REQUEST 		由get,post和cookie提交到脚本的变量，安全性低，不建议使用
	$_FILES 		由HTTP POST 文件上传提交至脚本的变量
	$_COOKE 		由COOKIE提交至脚本的变量
	$_SESSION 		由服务器SESSION提交至脚本的变量
	$_ENV 			执行环境提交至脚本的变量
	$_SERVER 		由WEB服务器设定或直接和当前脚本的执行环境相关联
	$GLOBALS		包含当前脚本中所有有效的变量 (全新声明的全局变量也在内)





//===== $GLOBALS 超全局变量，可以在函数中直接访问及修改 
	
		$GLOBALS 包含了PHP脚本中所有的变量，其中包括GET,POST,COOKIE,FILES,GLOBAL 的全局变量

		
		$a='小聪';
		function aa7(){
			echo $GLOBALS['a'].'<br>';
			
			$GLOBALS['a']='小明';
			
		}
		aa7();
		echo $a;



		<?php
			$a='aaaaa';
			echo $GLOBALS['a'].'---$GLOBALS方式13查看声明的全局变量<br>';
			echo $GLOBALS[_GET]['a'].'---$GLOBALS方式查看GET变量<br>';
			echo $GLOBALS[_POST]['user'].'---$GLOBALS方式查看POST变量<br>';
			echo $GLOBALS[_SERVER][HTTP_HOST].'---$GLOBALS方式查看SERVER环境变量<br>';
			echo "<pre>";
				print_r($GLOBALS);	//脚本中所有有效的变量
			echo "</pre>";
		?>


		//--$GLOBALS 超全局变量，也可以函数中直接访问及修改 </h1>";

		$name = '于恒鹏';
		$age = 18;
		echo "<pre>";
			var_dump($GLOBALS);
		echo "</pre>";
		function say(){
			$GLOBALS['name'] = '杨粟';	//函数中可以改变超全局变量的值
			echo $GLOBALS['name'].'=>'.$GLOBALS['age'];
		}
		say();
		echo '<br>函数中用超全局变量更改后的name='.$name;
		


















//===== $_REQUEST 		由get,post和cookie提交到脚本的变量

		S安全性低，不建议使用	
		<form action='a.php?a=aaa&b=bbb' method='post'>
			<input type='text' name='user'/>
			<input type='submit' value='提交' />
		</form>

		<?php
			echo $_REQUEST['user'].'接收的POST变量<br>'.$_REQUEST['a'].'接收的GET变量<br>';
			echo "<pre>";
				print_r($_REQUEST);
				echo '<br>接收到的POST,GET以及COOKIE的变量';
			echo '</pre>';
		?>	
			









//===== $_GET 由URL请求提交至脚本的变量

		<a href='a.php?a=aaaaa&b=bbbbbb'>aaaaaaaaaaaa</a><br>

		<?php
			echo $_POST['a'].'---'.$_GET['b'].'<br>';
			echo "<pre>";
				print_r($_GET);
			echo '</pre>';
		?>

		//---register_globals 设置是否直接用变量名显示GET的传值


		php.ini中修改下列值 设置是否可以直接用变量名显示GET值
		register_globals = On		
					On	开启
					Off	关闭









//===== $_POST 	由POST方法提交到脚本的变量

		<form action='' method='post'>
			<input type='text' name='user'/>
			<input type='password' name='pass' />
			<input type='submit' value='提交' />
		</form>

		<?php
			echo $_POST['user'].'---'.$_POST['pass'].'<br>';
			echo "<pre>";
				print_r($_POST);
			echo '</pre>';
		?>












//===== $_COOKIE  接受http的cookie传递给当前脚本的值









  
//===== $_SESSION  接受当前脚本中session变量的数组

		session_cache_expire 		― 返回当前缓存的到期时间
		session_cache_limiter 		― 读取/设置缓存限制器
		session_commit 			― session_write_close 的别名
		session_decode 			― 解码会话数据
		session_destroy 		― 销毁一个会话中的全部数据
		session_encode 			― 将当前会话数据编码为一个字符串
		session_get_cookie_params 	― 获取会话 cookie 参数
		session_id 			― 获取/设置当前会话 ID
		session_is_registered 		― 检查变量是否在会话中已经注册
		session_module_name 		― 获取/设置会话模块名称
		session_name 			― 读取/设置会话名称
		session_regenerate_id 		― 使用新生成的会话 ID 更新现有会话 ID
		session_register_shutdown 	― 关闭会话
		session_save_path 		― 读取/设置当前会话的保存路径
		session_set_cookie_params 	― 设置会话 cookie 参数
		session_set_save_handler 	― 设置用户自定义会话存储函数
		session_start 			― 启动新会话或者重用现有会话
		session_register ― Register one or more global variables with the current session
		session_abort ― Discard session array changes and finish session
		session_reset ― Re-initialize session array with original values
		session_status ― Returns the current session status
		session_unregister ― Unregister a global variable from the current session
		session_unset ― Free all session variables
		session_write_close ― Write session data and end session













//===== $_FILES 接受脚本中的所有上传的变量



	is_uploaded_file()			判断文件是否是通过 HTTP POST 上传的
						bool is_uploaded_file ( string $filename )


	move_uploaded_file() 			判断文件是否是通过 HTTP POST 上传的
						bool move_uploaded_file ( string $filename , string $destination )


	$_FILES['userfile']['name']		客户端机器文件的原名称。 


	$_FILES['userfile']['type']		文件的 MIME 类型，如果浏览器提供此信息的话。一个例子是"image/gif"。不过此 MIME 类型在 PHP 端并不检查，因此不要想当然认为有这个值。 


	$_FILES['userfile']['size']		已上传文件的大小，单位为字节。 


	$_FILES['userfile']['tmp_name']		文件被上传后在服务端储存的临时文件名。 


	$_FILES['userfile']['error']		和该文件上传相关的错误代码。此项目是在 PHP 4.2.0 版本中增加的。

			其值为 0，没有错误发生，文件上传成功。 

			其值为 1，上传的文件超过了 php.ini 中 upload_max_filesize 选项限制的值。 

			其值为 2，上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值。 

			其值为 3，文件只有部分被上传。 

			其值为 4，没有文件被上传。 

			其值为 6，找不到临时文件夹。PHP 4.3.10 和 PHP 5.0.3 引进。 

			其值为 7，文件写入失败。PHP 5.1.0 引进。 














//===== $_SERVER 关于服务器的一些变量


	//-- $_SERVER获取IP的几种方法及安全隐患 见-》自学归纳-》特殊效果文章-》$_SERVER获取IP的几种方法及安全隐患

	echo $_SERVER['HTTP_X_FORWARDED_FOR']?:($_SERVER['HTTP_REMOTEIP']?:$_SERVER['REMOTE_ADDR']);

	//-- $_SERVER['HTTP_X_FORWARDED_FOR']	获取有代理时的真正IP
	//-- $_SERVER['HTTP_REMOTEIP']			
	//-- $_SERVER['HTTP_CLIENT_IP']
		HTTP_CLIENT_IP 是代理服务器发送的HTTP头。如果是“超级匿名代理”，则返回none值。同样，REMOTE_ADDR也会被替换为这个代理服务器的IP。



	//-- $_SERVER['REMOTE_ADDR']	浏览当前页面的用户的 IP 地址。REMOTE_ADDR 是你的客户端跟你的服务器“握手”时候的IP。
					如果使用了“匿名代理”，REMOTE_ADDR将显示代理服务器的IP。
		 
	//-- $_SERVER['REMOTE_HOS']	浏览当前页面的用户的主机名。DNS 反向解析不依赖于用户的 REMOTE_ADDR。 Note: 你的服务器必须被配置以便产生这个变量.例如在 Apache 中，你需要在 httpd.conf 中设置 HostnameLookups On 来产生它。参见 gethostbyaddr()。 

	//-- $_SERVER['REMOTE_PORT']	用户机器上连接到 Web 服务器所使用的端口号。


	//-- $_SERVER['HTTP_REFERER']	引导用户代理到当前页的前一页的地址（如果存在）。由 user agent 设置决定。并不是所有的用户代理都会设置该项，有的还提供了修改 HTTP_REFERER 的功能。简言之，该值并不可信。
	如：
	<input type="hidden" name="destination" value="<?php echo $_SERVER['HTTP_REFERER'];?>"><table>
	当提交跳转后，该变量会显示跳转前的原页面URL 如 a.php 提交到b.php 后会显示 a.php

	


	//获取域名或主机地址 
	echo $_SERVER['HTTP_HOST']."<br>"; #localhost

	//获取网页地址 
	echo $_SERVER['PHP_SELF']."<br>"; #/blog/testurl.php

	//获取网址参数 
	echo $_SERVER["QUERY_STRING"]."<br>"; #id=5

	//获取用户代理 
	echo $_SERVER['HTTP_REFERER']."<br>"; 

	//获取完整的url
	echo 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];
	echo 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['PHP_SELF'].'?'.$_SERVER['QUERY_STRING'];
	#http://localhost/blog/testurl.php?id=5

	//包含端口号的完整url
	echo 'http://'.$_SERVER['SERVER_NAME'].':'.$_SERVER["SERVER_PORT"].$_SERVER["REQUEST_URI"]; 
	#http://localhost:80/blog/testurl.php?id=5

	//只取路径
	$url='http://'.$_SERVER['SERVER_NAME'].$_SERVER["REQUEST_URI"]; 
	echo dirname($url);
	#http://localhost/blog
			




	在 $_SERVER 中，你也许能够，也许不能够找到下面的这些元素。注意，如果以命令行方式运行 PHP，下面列出的元素几乎没有有效的(或是没有任何实际意义的)。 



	'DOCUMENT_ROOT'		当前运行脚本所在的文档根目录。在服务器配置文件中定义。


	'SERVER_ADDR'		当前运行脚本所在的服务器的 IP 地址。


	'SERVER_NAME'		当前运行脚本所在的服务器的主机名。如果脚本运行于虚拟主机中，该名称是由那个虚拟主机所设置的值决定。 


	'PHP_SELF'		当前执行脚本的路径与文件名，
				http://example.com/test.php/foo.bar 
				使用 $_SERVER['PHP_SELF'] 
				结果：/test.php/foo.bar 


	'REQUEST_TIME'		请求开始时的时间戳。从 PHP 5.1.0 起可用。


	'REQUEST_TIME_FLOAT'	请求开始时的时间戳，微秒级别的精准度。 自 PHP 5.4.0 开始生效。


 
	
	
	'REMOTE_USER'		经验证的用户 


	'REDIRECT_REMOTE_USER'	验证的用户，如果请求已在内部重定向。 


	'SERVER_PORT'		Web 服务器使用的端口。默认值为 "80"。如果使用 SSL 安全连接，则这个值为用户设置的 HTTP 端口。 



	'SCRIPT_FILENAME'	当前执行脚本的绝对路径。 Note: 如果在命令行界面（Command Line Interface, CLI）使用相对路径执行脚本，例如 file.php 或 ../file.php，那么 $_SERVER['SCRIPT_FILENAME'] 将包含用户指定的相对路径。


	'SCRIPT_NAME'		包含当前脚本的路径。这在页面需要指向自己时非常有用。__FILE__ 常量包含当前脚本(例如包含文件)的完整路径和文件名。

 
	'REQUEST_URI'		URI 用来指定要访问的页面。例如 "/index.html"。


	'REQUEST_METHOD' 	访问页面使用的请求方法；例如，"GET", "HEAD"，"POST"，"PUT"。 如果请求方法为 HEAD，PHP 脚本将在发送 Header 头信息之后终止(这意味着在产生任何输出后，不再有输出缓冲)。


	'SERVER_SIGNATURE'	包含了服务器版本和虚拟主机名的字符串。


	'HTTP_CONNECTION'	当前请求头中 Connection: 项的内容，如果存在的话。例如："Keep-Alive"。 


	'argv'			传递给该脚本的参数的数组。当脚本以命令行方式运行时，argv 变量传递给程序 C 语言样式的命令行参数。当通过 GET 方式调用时，该变量包含query string。 


	'argc'			包含命令行模式下传递给该脚本的参数的数目(如果运行在命令行模式下)。 


	'GATEWAY_INTERFACE'	服务器使用的 CGI 规范的版本；例如，"CGI/1.1"。 

 
	'SERVER_SOFTWARE'	服务器标识字符串，在响应请求时的头信息中给出。 


	'SERVER_PROTOCOL'	请求页面时通信协议的名称和版本。例如，"HTTP/1.0"。 


	'QUERY_STRING'		query string（查询字符串），如果有的话，通过它进行页面访问。 

 
	'HTTP_ACCEPT'		当前请求头中 Accept: 项的内容，如果存在的话。 


	'HTTP_ACCEPT_CHARSET'	当前请求头中 Accept-Charset: 项的内容，如果存在的话。例如："iso-8859-1,*,utf-8"。 


	'HTTP_ACCEPT_ENCODING'	当前请求头中 Accept-Encoding: 项的内容，如果存在的话。例如："gzip"。 


	'HTTP_ACCEPT_LANGUAGE'	当前请求头中 Accept-Language: 项的内容，如果存在的话。例如："en"。 
				echo $_SERVER['HTTP_ACCEPT_LANGUAGE'];		列出当前浏览器可识别的语言


	'HTTP_HOST'		当前请求头中 Host: 项的内容，如果存在的话。 






 
	'HTTP_USER_AGENT'	当前请求头中 User-Agent: 项的内容，如果存在的话。该字符串表明了访问该页面的用户代理的信息。一个典型的例子是：Mozilla/4.5 [en] (X11; U; Linux 2.2.9 i586)。除此之外，你可以通过 get_browser() 来使用该值，从而定制页面输出以便适应用户代理的性能。

 
	'HTTPS'			如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值。 Note: 注意当使用 IIS 上的 ISAPI 方式时，如果不是通过 HTTPS 协议被访问，这个值将为 off。 


	'SERVER_ADMIN'		该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。如果脚本运行在一个虚拟主机上，则该值是那个虚拟主机的值。 


	'PATH_TRANSLATED'	当前脚本所在文件系统（非文档根目录）的基本路径。这是在服务器进行虚拟到真实路径的映像后的结果。Note: 自 PHP 4.3.2 起，PATH_TRANSLATED 在 Apache 2 SAPI 模式下不再和 Apache 1 一样隐含赋值，而是若 Apache 不生成此值，PHP 便自己生成并将其值放入 SCRIPT_FILENAME 服务器常量中。这个修改遵守了 CGI 规范，PATH_TRANSLATED 仅在 PATH_INFO 被定义的条件下才存在。 Apache 2 用户可以在 httpd.conf 中设置 AcceptPathInfo = On 来定义 PATH_INFO。  


	'PHP_AUTH_DIGEST'	当作为 Apache 模块运行时，进行 HTTP Digest 认证的过程中，此变量被设置成客户端发送的"Authorization" HTTP 头内容（以便作进一步的认证操作）。 


	'PHP_AUTH_USER'		当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名。 


	'PHP_AUTH_PW'		当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码。 


	'AUTH_TYPE'		当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型。 


	'PATH_INFO'		包含由客户端提供的、跟在真实脚本名称之后并且在查询语句（query string）之前的路径信息，如果存在的话。例如，如果当前脚本是通过 URL http://www.example.com/php/path_info.php/some/stuff?foo=bar 被访问，那么 $_SERVER['PATH_INFO'] 将包含 /some/stuff。 


	'ORIG_PATH_INFO'	在被 PHP 处理之前，"PATH_INFO" 的原始版本。 




	详解 $_SERVER 函数中QUERY_STRING和REQUEST_URI区别
	http://blog.sina.com.cn/s/blog_686999de0100jgda.html
	 
	实例：

	1，http://localhost/aaa/ (打开aaa中的index.php)
	结果：
	$_SERVER['QUERY_STRING'] = "";
	$_SERVER['REQUEST_URI']  = "/aaa/";
	$_SERVER['SCRIPT_NAME']  = "/aaa/index.php";
	$_SERVER['PHP_SELF']     = "/aaa/index.php";

	2，http://localhost/aaa/?p=222 (附带查询)
	结果：
	$_SERVER['QUERY_STRING'] = "p=222";
	$_SERVER['REQUEST_URI']  = "/aaa/?p=222";
	$_SERVER['SCRIPT_NAME']  = "/aaa/index.php";
	$_SERVER['PHP_SELF']     = "/aaa/index.php";

	3，http://localhost/aaa/index.php?p=222&q=333
	结果：
	$_SERVER['QUERY_STRING'] = "p=222&q=333";
	$_SERVER['REQUEST_URI']  = "/aaa/index.php?p=222&q=333";
	$_SERVER['SCRIPT_NAME']  = "/aaa/index.php";
	$_SERVER['PHP_SELF']     = "/aaa/index.php";

	由实例可知：
	$_SERVER["QUERY_STRING"]  获取查询 语句，实例中可知，获取的是?后面的值
	$_SERVER["REQUEST_URI"]   获取 http://localhost 后面的值，包括/
	$_SERVER["SCRIPT_NAME"]   获取当前脚本的路径，如：index.php
	$_SERVER["PHP_SELF"]      当前正在执行脚本的文件名
	 
	 
	 
	$_SERVER['REQUEST_URI']和$_SERVER["HTTP_X_REWRITE_URL"]的区别
	http://www.hujuntao.com/web/php/difference-between-server-request-uri-and-server-http_x_rewrite_url.html
	 

	WordPress通过301重定向实现非首先域（非www）跳转向本来是一个很简单事情，由于没弄清楚$_SERVER['HTTP_X_REWRITE_URL'] 和$_SERVER['REQUEST_URI']的区别导致了循环重定向问题。
	现在来具体研究下$_SERVER['HTTP_X_REWRITE_URL'] 和$_SERVER['REQUEST_URI']的区别
	首先要纠正一部分的观点就是IIS+PHP不支持$_SERVER['REQUEST_URI']
	不是，不支持是PHP Version 版本的问题，php4.4.0不支持 $_SERVER['REQUEST_URI']，php5.2.5则增加了支持；

	$_SERVER['REQUEST_URI']常用来获当前URL
	例如：http://www.hujuntao.com/index.php?p=3
	$_SERVER['REQUEST_URI']获得的就是/index.php?p=3这部分
	。
	$_SERVER["HTTP_X_REWRITE_URL"]则在IIS下获得的是当前URL,在apache下的值为空

	例如：
	当前URL:http://www.hujuntao.com/
	IIS环境下：
	$_SERVER['REQUEST_URI'] = /index.php
	$_SERVER["HTTP_X_REWRITE_URL"] =/
	apache环境下：
	$_SERVER['REQUEST_URI'] = /
	$_SERVER["HTTP_X_REWRITE_URL"] =”

	当前URL：http://www.hujuntao.com/index.php
	IIS环境下：
	$_SERVER['REQUEST_URI'] = /index.php
	$_SERVER["HTTP_X_REWRITE_URL"] =/index.php
	apache环境下：
	$_SERVER['REQUEST_URI'] = /index.php
	$_SERVER["HTTP_X_REWRITE_URL"] =”







