
//===== 字符串声明的三种方式

	$a='aa';		单引方式

	$b="aaa";		双引方式

	$AA=<<<abc		<<< 三角方式 ：不可有空格
slksdjflksdjfflksf
abc;




//=====字符串函数手册位置</h2>";

	echo 'php manual -》函数参考-》文本处理 -》 字符串 ―》 字符串函数';








//===== cURL 会话函数设置

	//手册位置：php手册-》函数参考-》其它服务-》cURL->cURL函数
    $url = "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=lwekjf&secret=w32432";
    $curl = curl_init();		//初始化URL的设置，预先为一个URL设置相关属性
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);		// CURLOPT_RETURNTRANSFER 将curl_exec()获取的信息以文件流的形式返回，而不是直接输出
    curl_setopt($curl, CURLOPT_TIMEOUT, 500);				// CURLOPT_TIMEOUT 设置cURL允许执行的最长秒数。
    // 为保证第三方服务器与微信服务器之间数据传输的安全性，所有微信接口采用https方式调用，必须使用下面2行代码打开ssl安全校验。
    // 如果在部署过程中代码在此处验证失败，请到 http://curl.haxx.se/ca/cacert.pem 下载新的证书判别文件。
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, true);		//CURLOPT_SSL_VERIFYPEER 从服务端进行验证
    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, true);		//CURLOPT_SSL_VERIFYHOST 检查服务器SSL证书中是否存在一个公用名
    curl_setopt($curl, CURLOPT_URL, $url);					//CURLOPT_URL 需要获取的URL会话

    $res = curl_exec($curl);								//curl_exec 执行一个cURL会话
	var_dump($res);















//=====jquery中替换字串中内容的函数


//=== trim(),rtrim()-chop(),ltrim() 去除字串两侧的空格或指定字符
//=== chr ― 返回指定的字符(将ASCII码转成字符)
//=== chunk_split ― 将字符串分割成小块
//=== explode ― 使用一个字符串分割另一个字符串
//=== implode ― 将数组转成字串
//=== lcfirst ― 使一个字符串的第一个字符小写
//=== ord ― 返回字符的 ASCII 码值
//=== str_replace(),str_ireplace() 子字符串替换
//=== str_pad ― 使用一个字串填充另一个字符串为指定长度
//=== str_repeat ― 重复一个字符串
//=== ucfirst ― 将字符串的首字母转换为大写
//=== ucwords ― 将字串中每个单词的首字母转换为大写
//=== quotemeta() 在特殊字符 $ ^ * ( ) + ? 前面加反斜线
//=== substr_replace ― 替换字符串的子串
//=== str.substr() 截取字符串
//=== substr(),mb_substr() 截取字符串
//=== strip_tags() 从字符串中清除HTML 和 PHP标签功能
//=== addcslashes ― 在字符前面加反斜线
//=== stripcslashes() 删除由addcslashes()添加的反斜线
//=== addslashes ― 给字串中的单双引加反斜线
//=== stripslashes() 删除由addslashes()添加的反斜线(转义字符)
//=== strrev() 反转字符串
//=== str_shuffle() 随机打乱字符串
//=== parse_str() 将字串解析成多个变量
//=== urlencode(),urldecode() 对字符进行url编码解码
//=== ip2long() 将IPv4的ip地址（以小数点分隔形式）转换为int
//=== long2ip() 将int型表示的ip地址表示成字符串 aaa.bbb.ccc.ddd 的形式
//=== parse_url 解析URL，返回其组成部分
//=== dirname() 返回路径中的目录部分
//=== pathinfo 返回文件路径的信息
//=== http_build_query 将数组内容以URL键值对方式显示    
//=== strtolower() 将字串转化为小写
//=== strtoupper() 将字符串转化为大写
//=== strtr() 转换指定字符，去除(替换)字符串中间的空格或其它字符
//=== substr结合strrpos 截取文件后缀名(时间作名防重名)
//=== sbustr_replace() 将字串中指定位置以后的所有内容替换成指定字串
//=== strrchr() 查找字串中最后一次出现的字符，并返回该字符以后的所有字符
//=== strstr()/stristr() 查找字串中首次出现的字符，并返回该字符以后的所有字符 
//=== strpos()/stripos() 寻找字符串中某字符最先出现的位置 
//=== strrpos()/strripos() 寻找某字符串中某字符最后出现的位置 
//=== strlen(),mb_strlen() 获取字串的长度 
//=== md5() 将字符串加密 
//=== substr_count() 计算字符串出现的次数 
//=== str_word_count() 计算字串中单词的个数 
//=== strcasecmp()/strcmp() 二进制比较字符串 
//=== strncmp() 从首位二进制比较字符串，并指定长度 
//=== strncasecmp() 二进制较字符串开头的若干个字符（不区分大小写）
//=== str_split() 将字符串转换为数组
//=== wordwrap() 打断字符串为指定数量的字串 
//=== number_format() 千位分组格式化数字
//=== nl2br()	将 \n 转义为<br>标签
//=== similar_text 计算两个字符串的相似度
//=== htmlentities ― 让代码中的html，xml等标签失效（防黑）
//=== htmlspecialchars ― 让html标签不解析直接输出

//=== ip2long(),long2ip()  ip 与字串的转换
//=== vsprintf ― 返回格式化字符串












1.addcslashes ― 以 C 语言风格使用反斜线转义字符串中的字符
2.addslashes ― 使用反斜线引用字符串
3.bin2hex ― 将二进制数据转换成十六进制表示
4.chop ― rtrim 的别名
5.chr ― 返回指定的字符
6.chunk_split ― 将字符串分割成小块
7.convert_cyr_string ― 将字符由一种 Cyrillic 字符转换成另一种
8.convert_uudecode ― 解码一个 uuencode 编码的字符串
9.convert_uuencode ― 使用 uuencode 编码一个字符串
10.count_chars ― 返回字符串所用字符的信息
11.crc32 ― 计算一个字符串的 crc32 多项式
12.crypt ― 单向字符串散列
13.echo ― 输出一个或多个字符串
14.explode ― 使用一个字符串分割另一个字符串
15.fprintf ― 将格式化后的字符串写入到流
16.get_html_translation_table ― 返回使用 htmlspecialchars 和 htmlentities 后的转换表
17.hebrev ― 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew）
18.hebrevc ― 将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew），并且转换换行符
19.hex2bin ― 转换十六进制字符串为二进制字符串
20.html_entity_decode ― Convert all HTML entities to their applicable characters
21.htmlentities ― Convert all applicable characters to HTML entities
22.htmlspecialchars_decode ― 将特殊的 HTML 实体转换回普通字符
23.htmlspecialchars ― 让html标签不解析直接输出
24.implode ― 将一个一维数组的值转化为字符串
25.join ― 别名 implode
26.lcfirst ― 使一个字符串的第一个字符小写
27.levenshtein ― 计算两个字符串之间的编辑距离
28.localeconv ― Get numeric formatting information
29.ltrim ― 删除字符串开头的空白字符（或其他字符）
30.md5_file ― 计算指定文件的 MD5 散列值
31.md5 ― 计算字符串的 MD5 散列值
32.metaphone ― Calculate the metaphone key of a string
33.money_format ― Formats a number as a currency string
34.nl_langinfo ― Query language and locale information
35.nl2br ― 在字符串所有新行之前插入 HTML 换行标记
36.number_format ― 以千位分隔符方式格式化一个数字
37.ord ― 返回字符的 ASCII 码值
38.parse_str ― 将字符串解析成多个变量
39.print ― 输出字符串
40.printf ― 输出格式化字符串
41.quoted_printable_decode ― 将 quoted-printable 字符串转换为 8-bit 字符串
42.quoted_printable_encode ― 将 8-bit 字符串转换成 quoted-printable 字符串
43.quotemeta ― Quote meta characters
44.rtrim ― 删除字符串末端的空白字符（或者其他字符）
45.setlocale ― Set locale information
46.sha1_file ― 计算文件的 sha1 散列值
47.sha1 ― 计算字符串的 sha1 散列值
48.similar_text ― 计算两个字符串的相似度
49.soundex ― Calculate the soundex key of a string
50.sprintf ― Return a formatted string
51.sscanf ― 根据指定格式解析输入的字符
52.str_getcsv ― 解析 CSV 字符串为一个数组
53.str_ireplace ― str_replace 的忽略大小写版本
54.str_pad ― 使用另一个字符串填充字符串为指定长度
55.str_repeat ― 重复一个字符串
56.str_replace ― 子字符串替换
57.str_rot13 ― 对字符串执行 ROT13 转换
58.str_shuffle ― 随机打乱一个字符串
59.str_split ― 将字符串转换为数组
60.str_word_count ― 返回字符串中单词的使用情况
61.strcasecmp ― 二进制安全比较字符串（不区分大小写）
62.strchr ― 别名 strstr
63.strcmp ― 二进制安全字符串比较
64.strcoll ― 基于区域设置的字符串比较
65.strcspn ― 获取不匹配遮罩的起始子字符串的长度
66.strip_tags ― 从字符串中去除 HTML 和 PHP 标记
67.stripcslashes ― 反引用一个使用 addcslashes 转义的字符串
68.stripos ― 查找字符串首次出现的位置（不区分大小写）
69.stripslashes ― 反引用一个引用字符串
70.stristr ― strstr 函数的忽略大小写版本
72.strnatcasecmp ― 使用“自然顺序”算法比较字符串（不区分大小写）
73.strnatcmp ― 使用自然排序算法比较字符串
74.strncasecmp ― 二进制安全比较字符串开头的若干个字符（不区分大小写）
75.strncmp ― 二进制安全比较字符串开头的若干个字符
76.strpbrk ― 在字符串中查找一组字符的任何一个字符
77.strpos ― 查找字符串首次出现的位置
78.strrchr ― 查找指定字符在字符串中的最后一次出现
79.strrev ― 反转字符串
80.strripos ― 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）
81.strrpos ― 计算指定字符串在目标字符串中最后一次出现的位置
82.strspn ― 计算字符串中全部字符都存在于指定字符集合中的第一段子串的长度。
83.strstr ― 查找字符串的首次出现
84.strtok ― 标记分割字符串
85.strtolower ― 将字符串转化为小写
86.strtoupper ― 将字符串转化为大写
87.strtr ― 转换指定字符
88.substr_compare ― 二进制安全比较字符串（从偏移位置比较指定长度）
89.substr_count ― 计算字串出现的次数
90.substr_replace ― 替换字符串的子串
91.substr ― 返回字符串的子串
92.trim ― 去除字符串首尾处的空白字符（或者其他字符）
93.ucfirst ― 将字符串的首字母转换为大写
94.ucwords ― 将字符串中每个单词的首字母转换为大写
95.vfprintf ― 将格式化字符串写入流
96.vprintf ― 输出格式化字符串
97.vsprintf ― 返回格式化字符串
98.wordwrap ― 打断字符串为指定数量的字串



























//===== printf ― 输出格式化字符串



//=== vsprintf ― 返回格式化字符串
	<?php 
		$string =<<<THESTRING
		I like the state of %1\$s <br /> 
		I picked: %2\$d as a number, <br /> 
		I also picked %2\$d as a number again <br /> 
		%3\$s<br />
		THESTRING;

		$returnText = vprintf($string,array('Oregon','7','I Love Oregon'));
				//注解： 
					// %1 = Oregon
					// %2 = 7
					// %3 = I Love Oregon
					
		echo $returnText; 
				结果：
					I like the state of Oregon
					I picked: 7 as a number,
					I also picked 7 as a number again
					I Love Oregon
					132












//=== ip2long(),long2ip()  ip 与字串的转换


	将ip 127.0.0.1 转成字串，再转回ip

	echo $ip=ip2long($_SERVER['REMOTE_ADDR']);    //将ip转化成字串
	
	echo long2ip($ip);			//将字串再转回ip

		结果：
			2130706433
			127.0.0.1
	







//=== htmlspecialchars ― 让html标签不解析直接输出

	echo "aaa<br>bbb";
	echo htmlspecialchars("aaa<br>bbb");
		结果：
			aaa
			bbb

			aaa<br>bbb<hr>

	反解析
		htmlspecialchars_decode();






//=== htmlentities ― 让代码中的html，xml等标签失效（防黑）

	$str = "A 'quote' is <b>bold</b>";
	echo $str.'<br>';
	// Outputs: A 'quote' is &lt;b&gt;bold&lt;/b&gt;

	echo htmlentities($str).'<br>';
	// Outputs: A &#039;quote&#039; is &lt;b&gt;bold&lt;/b&gt;
	echo htmlentities($str, ENT_QUOTES);
 

	结果：
		A 'quote' is bold		//会加粗
		A 'quote' is <b>bold</b>	//不会加粗
		A 'quote' is <b>bold</b>	//不会加粗


	反解析 
		html_entity_decode();




//=== http_build_query 将数组内容以URL键值对方式显示    	数组


	$data = array('foo', 'bar','a'=>'aa');

	echo http_build_query($data)."<br>";	//以索引或关联下标方式
	echo http_build_query($data, 'myvar_');	//指定下标前缀的方式

	//0=foo&1=bar&a=aa
	//myvar_0=foo&myvar_1=bar&a=aa 

		
		
		
		
	
	
	
	
//=== strtolower() 将字串转化为小写

	$a="Hello WORLD!";
	echo $a.'<br>';
	echo strtolower($a);
	
	



		
		
//=== strtoupper() 将字符串转化为大写

	$a="Hello WORLD!";
	echo $a.'<br>';
	echo strtoupper($a);







//=== strtr() 转换指定字符，去除(替换)字符串中间的空格或其它字符

	$a='abc def';
	echo $a."<br>";
	$b=strtr($a,array(' '=>''));
	echo $b;
			
		
		



		
		
		
		
//=== substr结合strrpos 截取文件后缀名(时间作名防重名)

	$str="a.c.d.jpeg";
	echo substr($str,strrpos($str,"."));	//strrpos获取位置， substr截取

	echo time().rand(1,1000).substr($str,strrpos($str,".")); 
	//用时间代加随机数替文件名解决文件重名问题


		
		
		
		
		
		
		
		
		

//=== sbustr_replace() 将字串中指定位置以后的所有内容替换成指定字串

	$a="Hello world";
	echo $a.'<br>s';
	echo substr_replace($a,"earth",3);
		
		









		
//=== strrchr() 查找字串中最后一次出现的字符，并返回该字符以后的所有字符

	$a="a b c d e a b c d e a d s d e f g d e e a";
	echo $a.'<br>';
	echo strrchr($a,"d");
	








	

//=== strstr()/stristr() 查找字串中首次出现的字符，并返回该字符以后的所有字符 

	//strstr()区分大小写。如果想要不区分大小写，请使用 stristr()。
	$email  = 'n@ame@example.com';
	echo $email.'<br>';
	$domain = strstr($email, '@');
	echo $domain; // 打印 @example.com

	$user = strstr($email, '@', true); // 从 PHP 5.3.0 起
	echo $user; // 打印 n

	








	
//=== strpos()/stripos() 寻找字符串中某字符最先出现的位置 

	$a="Hello world!";
	echo $a.'<br>';
	echo strpos($a,"wo");
	
	
	






	
	
//=== strrpos()/strripos() 寻找某字符串中某字符最后出现的位置 

	echo strrpos("Helloa wofrldaa!","f");
		
		
		
		
		
		
		
//=== strlen(),mb_strlen() 获取字串的长度 

	//--strlen()获取字串的长度
		echo strlen('hello world');
	
	//--mb_strlen()获取字串的长度
		$str="abcdefgi";
		echo mb_strlen($str);	





//=== md5() 将字符串加密 
		
	$a='abc';
	echo $a.'<br>';
	echo md5($a);
		
		
		


//=== substr_count() 计算字符串出现的次数 

	$a='a b c d e f i f e s d a e s d f c d f';
	echo $a.'<br>';
	echo substr_count($a,'e');
	
	
		
		
		
		
		
//=== str_word_count() 计算字串中单词的个数 

	$a="this is a beautiful girl he is vary beautiful";
	echo $a.'<br>';
	echo str_word_count($a);
	
	
	
	
	
	
	
	
		
//=== strcasecmp()/strcmp() 二进制比较字符串 

	//strcasecmp 不区分大小写  strcmp 区分大小写

	//如果 str1 小于 str2，返回负数；如果 str1 大于 str2，返回正数；二者相等则返回 0。
	$a='abcd';
	$b='abcff';
	echo strcasecmp($a,$b);
	
	
	
	
	
	
	
	
	
//=== strncmp() 从首位二进制比较字符串，并指定长度 


	//如果 str1 小于 str2，返回负数；如果 str1 大于 str2，返回正数；二者相等则返回 0。
	$a='abcd';
	$b='abcff';
	echo strncmp($a,$b,3);	



	
//=== strncasecmp() 二进制较字符串开头的若干个字符（不区分大小写）


	//如果 str1 小于 str2，返回负数；如果 str1 大于 str2，返回正数；二者相等则返回 0。
	$a='abcd';
	$b='abcff';
	echo strncmp($a,$b,3);
	
	
	
	
	
//=== str_split() 将字符串转换为数组

	$str = "Hi Friends";
	$arr1 = str_split($str);	
	//将每个字符当做一个元素转换成数组
	$arr2 = str_split($str, 3);	
	//将每三个字符当做一个元素来转换成数组
	print_r($str);	echo "<br>";
	print_r($arr1);	echo "<br>";
	print_r($arr2);	echo "<br>";

		// 结果：
		// Hi Friends
		// Array ( [0] => H [1] => i [2] => [3] => F [4] => r [5] => i [6] => e [7] => n [8] => d [9] => s )
		// Array ( [0] => Hi [1] => Fri [2] => end [3] => s ) 






//=== wordwrap() 打断字符串为指定数量的字串 

	$text = "The quick brown fox jumped over the lazy dog.";
	$newtext = wordwrap($text,20,'<br>');

	echo $newtext;
	结果：
	The quick brown fox
	jumped over the lazy
	dog.






//=== number_format() 千位分组格式化数字

	$number = 1234.56;
	echo $number.'<br>';

	//--默认舍去小数部分，大数分隔符默认使用','
	$english_format_number = number_format($number);
	echo $english_format_number.'<br>';
	// 1,235

	//--取小数点后两位,小数分隔符用','，大数位分隔符为一个空格
	$nombre_format_francais = number_format($number, 2, ',', ' ');
	echo $nombre_format_francais.'<br>';
	// 1 234,56

	//--取小数点后两位,小数分隔符用'.'，大数位分隔符为空
	$number = 1234.5678;	
	$english_format_number = number_format($number, 2, '.', '');
	echo $english_format_number;
	// 1234.57








//=== nl2br()	将 \n 转义为<br>标签

	$str="aaaaaaa\naaaaaaa";
	echo $str."<br>";
	echo nl2br($str);
	// 结果：
	// aaaaaaa aaaaaaa
	// aaaaaaa
	// aaaaaaa
	
	
	
	
	
//=== similar_text 计算两个字符串的相似度	
	
	$var_1 = 'PHP IS GREAT'; 
	$var_2 = 'WITH MYSQL'; 

	similar_text($var_1, $var_2, $percent); 

	echo $percent.'<br>'; 
	// 27.272727272727 

	similar_text($var_2, $var_1, $percent); 

	echo $percent; 
	// 18.181818181818 








//=== pathinfo 返回文件路径的信息
	
	print_r (pathinfo ("baidu/index.html"));

	$ext=$_FILES['upload']['name'];
	//echo $ext;  //xxoo (1).jpg  
	$ext=pathinfo($_FILES['upload']['name'],PATHINFO_DIRNAME);  //参数1 DIRNAME
	//echo $ext;  // . 获取后缀前的点
	$ext=pathinfo($_FILES['upload']['name'],PATHINFO_BASENAME); //参数2 BASENAME
	//echo $ext; //xxoo (1).jpg 获取全名
	$ext=pathinfo($_FILES['upload']['name'],PATHINFO_EXTENSION); //参数 EXTENSION
	//echo $ext;  // jpg 获取后缀名
	$ext=pathinfo($_FILES['upload']['name'],PATHINFO_FILENAME);/ /参数 FILENAME
	//echo $ext;	// xxoo (1) 获取文件纯名（后缀及缀前点）











//=== dirname() 返回路径中的目录部分

	echo dirname("c:/testweb/home.php");







//=== parse_url 解析URL，返回其组成部分
	
	
			var_dump(parse_url('http://www.baidu.comt'));










//=== long2ip() 将int型表示的ip地址表示成字符串 aaa.bbb.ccc.ddd 的形式
		
		
			echo long2ip(1679167011);






//=== ip2long() 将IPv4的ip地址（以小数点分隔形式）转换为int
	
		echo ip2long("10.2.1.3").'<br>';
		echo ip2long("100.22.14.35");
		//167903491
		//1679167011 












//=== urlencode(),urldecode() 对字符进行url编码解码


	$str="我是一个字符串";
	echo $str."<br>";

	$str1=urlencode($str);
	echo $str1."<br>";

	$str2=urldecode($str1);
	echo $str2."<br>";
	
















//=== parse_str() 将字串解析成多个变量
	
		parse_str("id=23&name=John%20Adams",$myArray);	//以&符分隔元素，以=号分隔键值对
		print_r($myArray);













//=== str_shuffle() 随机打乱字符串
	
	$a="Hello World";
	echo $a.'<br>';
	echo str_shuffle($a);









//=== strrev() 反转字符串	
	$a='Hello World';
	echo $a.'<br>';
	echo strrev($a);
	








//=== strip_tags() 从字符串中清除HTML 和 PHP标签功能
		
		echo '//--原字串解析后，有一个段落和一个超链接<br>';
		$text = '<p>Test paragraph.</p><!-- Comment --> <a href="#fragment">Other text</a>';
		echo $text.'<br>';
		
		echo '//--strip_tags()去除标签功能后，p和a的标签功能以失效<br>';
		echo strip_tags($text).'<br>';		//去除了html标签的功能


		echo '//--strip_tags() 去除标签时也可以保留指定的标签功能<br>';
		echo strip_tags($text, '<a>');






//=== addcslashes ― 在字符前面加反斜线

	$str = "Is %your% n'ame O'reilly?";
	echo $str.'<br>';
	echo addcslashes($str,'u').'<br>';
	echo addcslashes($str,'ame').'<br>';
	echo addcslashes($str,'A..z');

	Is %your% n'ame O'reilly?
	Is %yo\ur% n'ame O'reilly?
	Is %your% n'\a\m\e O'r\eilly?
	\I\s %\y\o\u\r% \n'\a\m\e \O'\r\e\i\l\l\y? 






//=== stripcslashes() 删除由addcslashes()添加的反斜线
	
		$str = "abcdefghijklmnopqrstuvwxyz";
		echo addcslashes($str,'a..z').'<br>';		
		echo stripcslashes($str).'<br>';

	
	


//=== addslashes ― 给字串中的单双引加反斜线


	$str = "Is your n'ame O'reilly?";
	echo $str.'<br>';
	echo addslashes($str).'<br>';
	Is your n'ame O'reilly?
	Is your n\'ame O\'reilly?

	$str='~!@#$%"^&*"()_+';
	echo $str.'<br>';
	echo addslashes($str);
	//~!@#$%"^&*"()_+
	//~!@#$%\"^&*\"()_+ 
	
	
	
	
	
//=== stripslashes() 删除由addslashes()添加的反斜线(转义字符)
	
	
	$str="who's john adams";
	echo $str.'<br>';
	$str1 = addslashes($str)."<br>";
	echo $str1;
	echo stripslashes($str1);
	


	
	
	

//=== trim(),rtrim()-chop(),ltrim() 去除字串两侧的空格或指定字符

	$a="aaa";
	$b=' bbb, ';
	$c='ccc';
	echo $a.$b.$c.'<br>';
	//- 去除两侧空格
	echo $a.trim($b).$c.'<br>';
	//- 去除两侧指定的字符
	echo $a.trim($b,', ').$c.'<br>';

	// aaa bbb, ccc
	// aaabbb,ccc
	// aaabbbccc


	trim() 去除两边空格或指定字符
	rtrim() 去除字串右边空格或指定字符，形式同trim()
	chop() rtrim()的别名
	ltrim() 去除字串左边空格或指定字符，形式同trim()
	
	
	
	
	
	
	
	
	
	

//=== chr ― 返回指定的字符(将ASCII码转成字符)

	echo chr(97);	// a 
	echo chr(52).'<br>';
	echo chr(052).'<br>';
	echo chr(0x52).'<br>';
	

	


	

//=== ord ― 返回字符的 ASCII 码值(将字符转成ASCLL码)

	echo ord('a');	// 97
	
	
	



	
	
	

//=== chunk_split ― 将字符串分割成小块

	$str="abcdefghijklmnopqr";
	echo $str.'<br>';
	echo chunk_split($str,3).'<br>';	//每3个字符为一组，将字串分割	
	echo chunk_split($str,5,'-');		//每5个字符为一组，用‘-’将字串分割


	// abcdefghijklmnopqr
	// abc def ghi jkl mno pqr
	// abcde-fghij-klmno-pqr- 


	
	
	
	
	

//=== explode ― 使用一个字符串分割另一个字符串

	$str="abc efg hij hil";
	echo $str.'<br>';
	//正常分割
	print_r(explode(' ',$str)); echo '<br>';

	//以首个空格将字串分割成 2 元素的数组 
	print_r(explode(' ',$str,2)); echo '<br>';

	//以空格将字串分割成数组，但去除末尾的元素
	print_r(explode(' ',$str,-1)); echo '<br>';

	//abc efg hij hil
	//Array ( [0] => abc [1] => efg [2] => hij [3] => hil )
	//Array ( [0] => abc [1] => efg hij hil )
	//Array ( [0] => abc [1] => efg [2] => hij ) 
	
	$str = "Hello world. It's a beautiful day.";
	echo '<pre>';
	print_r (explode(" ",$str));
		
	$str="北京&顺平&天津";
	$arr=explode("&",$str);
	print_r($arr);
	//结果：Array([0]=>北京 [1]=>顺平 [2]=>天津);



	
	
	

//=== implode ― 将数组转成字串

	  implode ― 别名 join 
	  
	$arr=array('abc','def','hij','a'=>'aaa');
	print_r($arr); echo "<br>";

	//-将数组各元素直接连成字串
	echo implode($arr).'<br>';
	//-用指定字符将数组各元素连成字串
	echo implode('-|',$arr).'<br>';

	//Array ( [0] => abc [1] => def [2] => hij [a] => aaa )
	//abcdefhijaaa
	//abc-|def-|hij-|aaa
	
			
	$arr = array('Hello','World!','Beautiful','Day!');	
	print_r($arr);
	echo implode(" ",$arr);



	
	
	
	

//=== lcfirst ― 使一个字符串的第一个字符小写

	$str="ABC DEFG";

	echo $str.'<br>';

	echo lcfirst($str).'<br>';

	// ABC DEFG
	// aBC DEFG
	
	
	
	
	
	
	

	

	
	
	
	
	
	
	
	
	
	

//=== str_replace(),str_ireplace() 子字符串替换

		str_replace()	区分大小写）	
		str_ireplace()	不区分大小写

	$str="aa bb cc dd ee";
	echo $str.'<br>';
	echo str_replace('aa','WW',$str).'<br>';	//将aa替换为WW
	//结果：
	// aa bb cc dd ee
	// WW bb cc dd ee


	$str='aa\r\nbb\r\ncc\r\ndd\r\nee';
	$rea='\r\n';	//要被替换的字串
	$reb='<br>';	//要替换成的字串
	echo $str.'<br>';
	
	echo str_replace($rea,$reb,$str);

	// aa\r\nbb\r\ncc\r\ndd\r\nee
	//aa
	//bb
	//cc
	//dd
	//ee 
		$a="Hello world!";
		echo str_replace("world","John",$a);	
		//--去除(替换)字符串中间的空格

			$a='abc def';
			echo $a."<br>";
			$b=str_replace(' ','',$a);
			echo $b;
			
		//--替换字串中的内容
		
			$str="abcdefg";
			$a = str_replace("e","=",$str);
			echo $a;
				
	
	
	
	
	
	
	
	

//=== str_pad ― 使用一个字串填充另一个字符串为指定长度

	str_pad();

	$input = "Alien";
	echo str_pad($input,10);     
	// 输出 "Alien     "

	echo str_pad($input,10,"-=",STR_PAD_LEFT);  
	// 输出 "-=-=-Alien"

	echo str_pad($input, 10, "_",STR_PAD_BOTH);
	// 输出 "__Alien___"

	echo str_pad($input, 6 , "___");
	// 输出 "Alien_"
	
	

	
	
	
	
	

//=== str_repeat ― 重复一个字符串


	echo str_repeat("-=", 10);	将-=重复10次
	 
		//-=-=-=-=-=-=-=-=-=-=
	
	echo str_repeat("a",13).'<br>';	//将a 字符重复输出13次
		
	$a='ab';
	echo str_repeat($a,15);
	
	
	
	
	
	
	
	
	
	
//=== ucfirst ― 将字符串的首字母转换为大写

	$str="abc def";
	echo $str.'<br>';
	echo ucfirst($str);

	// abc def
	// Abc def 
	
	
	
	
	
	
	
	
//=== ucwords ― 将字串中每个单词的首字母转换为大写

	$str="abc def";
	echo $str.'<br>';
	echo ucwords($str);

	// abc def
	// Abc Def 
	
	
	
	
	
	
	

//=== quotemeta() 在特殊字符 $ ^ * ( ) + ? 前面加反斜线
	
	$str = 'Hello world. (can you hear me?) ~!@#$%^&*()_+-=?><;":';
	echo $str.'<br>';
	echo quotemeta($str);

	// Hello world. (can you hear me?) ~!@#$%^&*()_+-=?><;":
	// Hello world\. \(can you hear me\?\) ~!@#\$%\^&\*\(\)_\+-=\?><;": 
	
	
	
	
	
	
	
	

//=== substr_replace ― 替换字符串的子串


	//--字符串的增

	$str="abcdefg";
	echo substr_replace($str,"KKK",3,0); 
	//abcKKKdefg 


	//--字符串的删
	$str="abcdefg";
	echo substr_replace($str,"",2);	//ab   
	//echo substr_replace($str,"",2,-1); 
	//abg 


	//--字符串的改
	$str="abcdefg";
	echo substr_replace($str,"aa",1,2);	
	//aaadefg 
	





//=== str.substr() 截取字符串

	str="abcdefghijklmnopqrstuvwxyz";
	alert(str); 	//结果显示“abcdefghijklmnopqrstuvwxyz”

	//截取从下标0开始的后面2个字符
	str1=str.substr(0,2);
	alert(str1);	//结果显示“ab”





//=== substr(),mb_substr() 截取字符串
	
	$str="hello.world.lsl.llfe.lwelf.wo";
	$str1=substr($str,2,3);		 //从下标2开始截取，取3位
	echo $str1;

	echo $str2=substr($str,6);	 //从下标6开始截取至最后
			
			
	//-- mb_substr() 截取字符串
	$str="abcdefghijklmnopqrstuvwxyz";	
	echo mb_substr($str,13,8,"utf-8");
	//$str : 要截取的字串变量
	//13 : 开始下标
				//8 : 要截取8 个字符
				//utf-8 : 设置截取后使用的编码


	区别 ：
		//UTF-8编码下
		$abc="关雄波";
		echo strlen($abc);//输出9
		echo mb_strlen($abc,'utf8');//输出3
		echo "<br>";





























//=====jquery中替换字串中内容的函数
	//只替换一个字符
	//替换连续多个字符

$(function(){
  str="abcdefghijklmnopqrstuvwxyz";
  alert(str);	
  alert(replacePos(str,4,"RAPLACE"));
  function replacePos(strObj,pos,replaceText){

	//strObj:是传入要修改的字符串
	//pos:是要替换内容的位置
	//replaceText: 是指定要替换的内容

	//只替换一个字符
	//替换连续多个字符
	//return strObj.substr(0,pos-1) + replaceText + strObj.substring(pos,strObj.length);
	
	//替换连续多个字符
	return strObj.substr(0,pos-1) + replaceText + strObj.substring(pos+5,strObj.length);

	//strObj.substr(0,pos-1):是要替换的位置之前的所有内容
	//replaceText:是要替换成的内容
	//strObj.substring(pos,strObj.length):是要替换的位置之后的所有内容
	
  }

});
	