
//===== 函数的种类：
        系统函数和自定义函数
        系统函数：系统已经提供的一些函数，大概有几千个。我们已经学过了不少。










//===== 自定义函数的定义和调用
	定义：
	function fn(){
		echo 11111;
	}
	调用：
	fn();


        步骤：
            1、将你要写的功能代码写出来。
            2、将代码段用大括号包起来
            3、使用关键字function 函数名() 来声明函数
            4、将经常变的量提取来作为参数。

        注意：
            1、函数名要有意义
            2、函数名不区分大小写
            3、函数名不能重复，不能和自定义的重复也不能和系统已经有的函数名重复
            4、函数的命名规则很随意但是最好遵循变量的命名规则来命名。

        注意；
            1、函数不调用不执行。
            2、函数的调用可以放在函数声明的前面，也可以放在函数声明的后面，因为函数的代码放在内存的一个叫代码段的区域内。在程序执行以前该代码就已经被加载到内存中了。







//===== 自定义函数的参数


        形参：形式上的参数，声明函数时，提供的参数
        实参：在调用的时候实际给定的值。

        注意：
            1、形参和实参的个数要对应上
            2、要按顺序一一对应上
            3、多个形参和实参之间使用逗号分隔。

    



//===== 默认参数

	function fn($a=1,$b=2){
		echo $a;		//结果：3
		echo $b;		//结果：2
	}
	
	fn('3');

        如果在使用函数时，没有填写指定数量的实参会报错。

        就是在声明形参的同时可以给形参默认值。

        注意：
            1、当形参中有默认值，而且实参中没有时，将会使用形参中的默认值。
            2、当形参中有默认值，而且实参中也有时，实参中的值将会覆盖形参中的默认值
            3、可以部分参数有默认值，但是需要放在后面，因为传值是一一对应的。

        函数中不给参数默认值的叫必选参数
        函数中有默认参数的参数叫可选参数





//===== func_get_args() 获得函数中所有参数的集合 (获得到了一个数组)

//===== func_num_args();获得函数中实际参数的个数。

//===== func_get_arg(下标);  获得第几个参数的值。

        注意：
            1、函数中实参比形参个数多，将不会出错，但是一般情况下会忽略，可以使用func_get_args();来获得实际的参数














//===== & 引用参数
	
	echo '& 引用参数 ：引用全局变量在函数中使用。引用后的全局变量在函数中是可以被更改的！<br>';
	
	$defaulttotal = 0;
	function adds($num1,$num2,&$total){
		$total=$num1+$num2;
	}
	adds(1,2,$defaulttotal);
	echo $defaulttotal;
	
	
	
	


//===== & 引用参数的实参必须是一个变量
	
	$defaultTotal = 0;
    function adds1($num1,$num2,&$total){

        $total = $num1 + $num2;
    }
    adds1(1,1,'aaaa');
    echo $defaultTotal;
	
	
	


	
	
//===== return 自定义函数中的返回值


	function adds2($num1,$num2){
        $total = $num1 + $num2;
        return $total;
    }
    $totals = adds2(1,2);
    echo $totals;
	
	
	
	
	
	
	
//=====  自定义函数中 return 后的语句不再执行
	
	function adds3($num1,$num2){
        $total = $num1 + $num2;
        return false;
        echo '小时候我我妈.,,,,,';
    }

    var_dump(adds3(1,2));
	
	
	
	
	
	
	
	
//===== 函数中的变量是局部变量，在函数外部将无法访问 
	
	function yangsu(){
        $name = '杨粟';//
    }

    echo $name;

	
	
	
	
	
	


/===== global 全局变量在函数中的声明,单声，多声

	在函数中是无法直接使用全局变量的，如果想使用，就要使用global在函数中声明全局变量
	
	$name = '于恒鹏';
    	$age = 18;
    	function yangsu1(){
		echo $name;	  // 没有声明的全局变量是无法使用的
		global $name,$age;		//同时声明多个全局变量
       	 	global $name; 			//声明为了全局变量
        	global $age;
        	echo '我叫'.$name.'今年'.$age.',希望大家喜欢';  //声明后的变量在函数中可以使用
    	}
    	yangsu1();
	
	
	
	
	
	
	
	
	
//===== 函数中声明后的全局变量可在函数中被改变
	
    $name = '于恒鹏';
    $age = 18;
	echo '原name='.$name.'<br>';
    function yangsu2(){
        global $name,$age;	//同时声明多个全局变量
        $name = '韩超';		//全局变量声明后，在函数中是可以更改内容的。
        echo '我叫'.$name.'今年'.$age.',希望大家喜欢';
    }
    yangsu2();
    echo '<br>现name='.$name;		//全局变量在函数中以经被改变了
	
	
	
	
	
	
	
//=====$GLOBALS 超全局变量，也可以函数中直接访问及修改 
	
	
	$name = '<br>于恒鹏';
   	 $age = 18;
	echo "<pre>";
        	var_dump($GLOBALS);
   	echo "</pre>";
    	function say(){
        	$GLOBALS['name'] = '杨粟';	//函数中可以改变超全局变量的值
        	echo $GLOBALS['name'].'=>'.$GLOBALS['age'];
    	}
    	say();
    	echo '<br>函数中用超全局变量更改后的name='.$name;
	
   
   
   
   
   
   
   
   
   
   
//===== static 静态变量，会保留在内存中被再次调用 
   
   function demo(){
        static $a = 1;		//初始静态变量值为1
        $a += 1;			//静态变量累加为2 
        echo $a.'<br>';
    }
	echo $a;		//函数中声明的静态变量只能在函数使用，不可以在外部使用
    demo();			//第一次初始并累加后为2
    demo();			//第二次是调用再累加后为3
    demo();			//第三次是调用再累加后为4，，，
    demo();			//第四次是调用再累加后为5，，，
   
   
   
   
   
   
   
   
   
   
//===== 变量函数 
   
    function say3(){
        echo '杨粟真帅，但是没我帅。';
    }
    $func = 'say3'; //声明一个与函数同名的字串变量
    $func(); //	这里就是字串'say3' 连接了一个 ()   就形成了函数调用  say3()
   
   
   
   
   
   
   
   
//===== 变量形式的回调函数
	
	
	//主体函数 
	function f($num,$func){
		for($i=1;$i<$num;$i++){
			if($func($i)){		//变量形式调用了外部函数，并给入了实参，并判断真假
				continue;
			}
			echo $i.'<br>';
		}
	}
	
	f(50,'qy1');	//回调变量形函数 ，给定一个字串，然后在函数中加上()就调用了函数
	echo '<br>';
	f(30,'qy2');
	function qy1($i){		//规则函数被2整除
		if($i%2==0){
			return true;
		}else{
			return false;
		}
	}
	
	function qy2($j){		//规则函数 被3整除
		if($j%3==0){		
			return true;
		}else{
			return false;
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
//===== 递归函数
	
	function test($num){	//给定一个参数
		echo $num.'<br>';
		if($num>0){			//如果条件符合将调用自身函数，否则不再调用。
			test($num-1);	//调用自身函数，并传入指定变化规则的参数
		}
		echo $num.'<br>';
	}
	test(3);
   	echo "<hr>";
   
   	function test2($num){
		echo $num.'<br>';
		if($num<10){
			test2($num+1);
		}
		echo $num.'<br>';
   	}
   	test2(3);
   
   
   
   
   










//===== 1-5的累加-递归
	
	function test($num){
		if($num>0){
			return $num += test($num-1);
		}
	}
	echo test(5);
   
   
   
   