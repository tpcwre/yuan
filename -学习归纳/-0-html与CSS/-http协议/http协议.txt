






//===== 什么是http协议

	1, http协议是建立在 tcp/ip 协议基础上的。
	2，我们的web开发数据的传输都是依赖于http协议的.
	3, http协议全称是超文本传输协议。


//===== http协议的 http请求（request）
//===== 页面请求方式：
//===== http响应
//===== 详细的HTTP响应解释：

	
	
	
//===== http协议的 http请求（request）

	基本结构：

		请求行:

		消息头:

		消息实体(实体内容);
		
	例：

	GET /test/hello.html HTTP/1.1  //此为消息头  以GET方式， 想要取的是什么资源， 协议是1.1

	Accept: */*	//表示客户端可以接受任何数据

	referer:http://localhost:80/test/abc.html  //表示我是从哪里来

	Accept-Language: zh-cn	//页面支持的语言

	User-Agent:Mozila/4.0(compatible;MSIE8.0;Windows NT5.1;Trident/4.0;.NET
	CLR 2.0.50727;NET4.0C;NET4.0E)   //告诉服务器我的浏览器的内核，操作系统。

	Accept_Encoding:gzip,deflate	//表示接受什么样的数据压缩格式。

	Host:localhost:80	//主机，以及端口，如果不带端口，默认是80

	Connection:Keep-Alive	//表示一个长连接，不要立即断掉请求













//===== 页面请求方式：

	POST，GET，HEAD，OPTIONS，DELETE，TRACE，PUT，常用的有POST,GET

	get post区别：

	1，GET提交，请求的数据会跟在URL之后如：
		login.php?name=abc&password=kkk
	   POST提交：把提交的数据放轩在HTTP包体中，比如；
		POST /test/reg.php HTTP/1.0
		Host:
		Content-Type:
		content-Length:
		
		name=abc&password=xyz
		因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变。

	2, 提交数据的大小不一样
		http协议本身并没有限制数据大小，但浏览器对GET和POST请求有限制，GET请求数据量为2K+35。而POST没有限制。

	3，GET请求可以更好的添加到收藏夹。



	






//===== http响应

		简单定义，一个HTTP响应代表服务器给浏览器回送的数据，同时告诉浏览器应当怎样处理数据。
		1，基本结构

			状态行
			消息头信息
					空行
			实体信息

		例：

		HTTP/1.1 200 OK		//200 OK表示客户端请求成功。
		Server Microsoft-IIS/5.0 	//表示告诉浏览器，服务器的情况.
		Date Thu, 13 Jul 2000 05:46:53 GMT  //告诉浏览器所请求页面的更新时间，如果相同浏览器就不再更新，
		Content-Type:text/html
		Cache-control:private














//===== 详细的HTTP响应解释：

		Location:http://www.baidu.org/index.php    //location相当于重定向
		Server:apache		//告诉浏览器我的服务器信息
		Content-Encoding:gzip	//内容编码支持gzip压缩算法。
		Content-Length:80	//返回数据内容的大小。
		Content-Language: zh-cn	//支持的内容语言
		Content-Type:text/html; charset=GB2312 	//内容类型，形式和编码类型。
		Last-Modified:Tue, 11 Jul 2000 18:23:51 GMT //请求资源的最后（最新）更新时间。
		Refresh: 1;url=http:..www.baidu.com	//告诉浏览器，间隔1秒，重定向到百度。
		Content-Disposition:attachment,filename=aaa.zip
		Transfer-Encoding:chunked
		Set-Cookie:SS=Q0=5Lb_nQ;path=/search
		Expires: -1		//禁用缓存方法一；
		Cache-Control: no-cache	//禁用缓存方法二；
		Pragma:no-cache		//禁用缓存方法三；









