

//===== 图像处理手册位置

	php manual--函数参考----图像生成和处理----GD---- and Image





//===== 常见的图片格式和应用范围

	1，GIF 图片压缩率高，但是只能显示256色，可能造成颜色丢失，可显示动画。
	2，JPG/JPEG 图片的压缩率高（有损压缩），可以用较小的文件来显示，网页上用的比较多。
	3，PNG 该格式综合了GIF和JPG的优势，缺点是不能显示动画。它对颜色高保真！

	如何选择哪种格式的图片：
	当对图片颜色要求不高时，首选GIF
	当对图片颜色要求相对较高，但不是十分严格时，可选JPG
	当对图片颜色要求非常高，比如说艺术品或古董一类的要求细节的图片时就要选择PNG格式。









//===== 开启 php 的GD库的画图功能

	1，PHP.ini 或 apache 的conf.ini 中找到 extension=php_gd2.dll	并去除其前面的分号并启用。切记要重新启动apache服务器。才会有效
	2，查看PHP的扩展目录ext 中是否有php_gd2.dll这个文件。没有可以去复制一份

	



//===== 画图操作流程与相关操作命令实例
	
	
	注意：  1，header头前面不要有任何的输出，图片代码页面选择UTF-8无bom格式
		2，如果header函数写错了，将会提示你下载。
<?php

	header("content-type:image/jpeg");		//通知页面这是一张图片以及图片的类型

	$img=imagecreatefromjpeg("./2.jpg");		//引用外部图片创建一张画布资源
	$img=imagecreatetruecolor(500,500);		//创建一张画布资源
	$bgcolor=imagecolorallocate($img,255,255,255);	//创建一个颜色
	$color1=imagecolorallocate($img,0,0,255);	
	imagefill($img,0,0,$bgcolor);			//填充背景色
	imageline($img,0,0,500,500,$color1);		//画一条线
	imagesetpixel($img,40,50,$color1);		//画一个点
	imagerectangle($img,50,50,200,200,$color1);	//画一个矩形


	imagerectangle($im,300,4,350,40,$red);		//空心矩形
	

	imagefilledrectangle($im,250,60,310,110,$red);	//实心矩形
	

	imagearc($im,100,100,60,60,90,180,$red);	//弧线
	
	 



				
	imagefilledarc($im,150,150,60,60,180,270,$red,IMG_ARC_PIE);	//扇形
	//解释(画布，起始X坐标，起始Y坐标，终点x坐标，终点y坐标，起始角度，终点角度，颜色，形式。)
			其它画像参看下面其它函数

	1：IMG_ARC_PIE 和 IMG_ARC_CHORD 是互斥的；
	2：IMG_ARC_CHORD 只是用直线连接了起始和结束点，
	3：IMG_ARC_PIE 则产生圆形边界。
	4：IMG_ARC_NOFILL 指明弧或弦只有轮廓，不填充。
	5：IMG_ARC_EDGED 指明用直线将起始和结束点与中心点相连，和 IMG_ARC_NOFILL 一起使用是画饼状图轮廓的好方法（而不用填充）。




	imagettftext($img,20,10,50,200,$colortext,'./simhei.ttf','这是一段文字');	//在图像上输出文字
	imagettftext(资源,字体大小,角度,x,y,颜色,字体文件,文字内容);

	var_dump(imagettfbbox(20,10,'./simhei.ttf','这是一段文字'));			//获得文本的范围
		imagettfbbox(大小,角度,字体文件,文本);  获得文本的范围

            	将会返回一个数组
            	0 左下角 X 位置 
            	1 左下角 Y 位置 
            	2 右下角 X 位置 
            	3 右下角 Y 位置 
            	4 右上角 X 位置 
            	5 右上角 Y 位置 
            	6 左上角 X 位置 
            	7 左上角 Y 位置 
            		获得字体宽度
            		abs($info[0] - $info[2]);

            		获得字体的高度
            		abs($info[7] - $info[1]);
		
	imagefontheight					//取得字体高度
	imagefontwidth 					//取得字体宽度

	$iinfo=getimagesize($img);			//获取原图信息集
	$iwidth=$iinfo[0];				// 图 高
	$iheight=$iinfo[1];				// 图 宽
	$itype=$iinfo[2];				// 图 类型

	$height=imagesy($img);			//获取资源图片的高
	$width=imagesx($img);			//获取资源图片的宽
	$arr = getimagesize("./1.jpg"));	//获取指定图片的高，宽及，图片类型
		0 =》  宽度
                1 =》  高度
                2 =》  类型 
				1,gif	 
				2,jpeg jpg	
				3,png

	


	imagecopyresampled($nimg,$oimg,0,0,0,0,200,200,$owidth,$oheight);  // (图片缩放) 将一个资源图片缩放到另一个资源
	imagecopyresampled(新图片,老图片,新x,新y,老x,老y,新宽,新高,老宽,老高)
    		图片等比例缩放的公式：
        		if(新的宽度 && (旧的宽度 < 旧的高度)){

           			新的宽度 = (新的高度 / 旧的高度 ) * 旧的宽度
            
        		}else{
           			 新的高度 = (新的宽度 / 旧的宽度) * 旧的高度
       			 }


	imagecopy($img,$yin,10,10,0,0,$yw,$yh);		// (水印效果) 将一个资源图片拷贝到另一个资源图片上
	imagecopy (要图片 , 水图  , 要x , 要y , 水x , 水y , 水宽 , 水高 )
	


	imagejpeg($img);		//按指定格式输出
	imagejpeg($img,'abc.jpg');	//按指定格式保存文件
	imagedestroy($img);		//关闭资源
	

?>






//===== 制做验证码,设置动态变化背景, 设置动态变化的点,设置动态变化的文字

	详见案例 a_5






//===== html页面关联php验证码：

	<img src='6.php'/>







	
	
	
	
	
	
	

//===== 图像处理的其它函数



imagearc ― 画椭圆弧
imagechar ― 水平地画一个字符
imagecharup ― 垂直地画一个字符
imageellipse ― 画一个椭圆
imagedashedline ― 画一虚线
imagefilledarc ― 画一椭圆弧且填充
imagefilledellipse ― 画一椭圆并填充
imagefilledpolygon ― 画一多边形并填充
imagefilledrectangle ― 画一矩形并填充
imagefilltoborder ― 区域填充到指定颜色的边界为止
imageline ― 画一条线段
imagesetpixel ― 画一个单一像素
imagerectangle ― 画一个矩形
imagepolygon ― 画一个多边形
imagesetstyle ― 设定画线的风格
imagesetthickness ― 设定画线的宽度
imagestring ― 水平地画一行字符串
imagestringup ― 垂直地画一行字符串




gd_info ― 取得当前安装的 GD 库的信息
getimagesize ― 取得图像大小
getimagesizefromstring ― Get the size of an image from a string
image_type_to_extension ― 取得图像类型的文件后缀
image_type_to_mime_type ― 取得 getimagesize，exif_read_data，exif_thumbnail，exif_imagetype 所返回的图像类型的 MIME 类型
image2wbmp ― 以 WBMP 格式将图像输出到浏览器或文件
imageaffine ― Return an image containing the affine tramsformed src image, using an optional clipping area
imageaffinematrixconcat ― Concat two matrices (as in doing many ops in one go)
imageaffinematrixget ― Return an image containing the affine tramsformed src image, using an optional clipping area
imagealphablending ― 设定图像的混色模式
imageantialias ― 是否使用抗锯齿（antialias）功能


imagecolorallocate ― 为一幅图像分配颜色
imagecolorallocatealpha ― 为一幅图像分配颜色 + alpha
imagecolorat ― 取得某像素的颜色索引值
imagecolorclosest ― 取得与指定的颜色最接近的颜色的索引值
imagecolorclosestalpha ― 取得与指定的颜色加透明度最接近的颜色
imagecolorclosesthwb ― 取得与给定颜色最接近的色度的黑白色的索引
imagecolordeallocate ― 取消图像颜色的分配
imagecolorexact ― 取得指定颜色的索引值
imagecolorexactalpha ― 取得指定的颜色加透明度的索引值
imagecolormatch ― 使一个图像中调色板版本的颜色与真彩色版本更能匹配
imagecolorresolve ― 取得指定颜色的索引值或有可能得到的最接近的替代值
imagecolorresolvealpha ― 取得指定颜色 + alpha 的索引值或有可能得到的最接近的替代值
imagecolorset ― 给指定调色板索引设定颜色
imagecolorsforindex ― 取得某索引的颜色
imagecolorstotal ― 取得一幅图像的调色板中颜色的数目
imagecolortransparent ― 将某个颜色定义为透明色
imageconvolution ― 用系数 div 和 offset 申请一个 3x3 的卷积矩阵
imagecopy ― 拷贝图像的一部分
imagecopymerge ― 拷贝并合并图像的一部分
imagecopymergegray ― 用灰度拷贝并合并图像的一部分
imagecopyresampled ― 重采样拷贝部分图像并调整大小
imagecopyresized ― 拷贝部分图像并调整大小
imagecreate ― 新建一个基于调色板的图像
imagecreatefromgd2 ― 从 GD2 文件或 URL 新建一图像
imagecreatefromgd2part ― 从给定的 GD2 文件或 URL 中的部分新建一图像
imagecreatefromgd ― 从 GD 文件或 URL 新建一图像
imagecreatefromgif ― 由文件或 URL 创建一个新图象。
imagecreatefromjpeg ― 由文件或 URL 创建一个新图象。
imagecreatefrompng ― 由文件或 URL 创建一个新图象。
imagecreatefromstring ― 从字符串中的图像流新建一图像
imagecreatefromwbmp ― 由文件或 URL 创建一个新图象。
imagecreatefromwebp ― 由文件或 URL 创建一个新图象。
imagecreatefromxbm ― 由文件或 URL 创建一个新图象。
imagecreatefromxpm ― 由文件或 URL 创建一个新图象。
imagecreatetruecolor ― 新建一个真彩色图像
imagecrop ― Crop an image using the given coordinates and size, x, y, width and height
imagecropauto ― Crop an image automatically using one of the available modes
imagedestroy ― 销毁一图像
imagefill ― 区域填充
imagefilter ― 对图像使用过滤器
imageflip ― Flips an image using a given mode
imageftbbox ― 给出一个使用 FreeType 2 字体的文本框
imagefttext ― 使用 FreeType 2 字体将文本写入图像
imagegammacorrect ― 对 GD 图像应用 gamma 修正
imagegd2 ― 将 GD2 图像输出到浏览器或文件
imagegd ― 将 GD 图像输出到浏览器或文件
imagegif ― 输出图象到浏览器或文件。
imagegrabscreen ― Captures the whole screen
imagegrabwindow ― Captures a window
imageinterlace ― 激活或禁止隔行扫描
imageistruecolor ― 检查图像是否为真彩色图像
imagejpeg ― 输出图象到浏览器或文件。
imagelayereffect ― 设定 alpha 混色标志以使用绑定的 libgd 分层效果
imageloadfont ― 载入一新字体
imagepalettecopy ― 将调色板从一幅图像拷贝到另一幅
imagepalettetotruecolor ― Converts a palette based image to true color
imagepng ― 以 PNG 格式将图像输出到浏览器或文件
imagepsbbox ― 给出一个使用 PostScript Type1 字体的文本方框
imagepsencodefont ― 改变字体中的字符编码矢量
imagepsextendfont ― 扩充或精简字体
imagepsfreefont ― 释放一个 PostScript Type 1 字体所占用的内存
imagepsloadfont ― 从文件中加载一个 PostScript Type 1 字体
imagepsslantfont ― 倾斜某字体
imagepstext ― 用 PostScript Type1 字体把文本字符串画在图像上
imagerotate ― 用给定角度旋转图像
imagesavealpha ― 设置标记以在保存 PNG 图像时保存完整的 alpha 通道信息（与单一透明色相反）
imagescale ― Scale an image using the given new width and height
imagesetbrush ― 设定画线用的画笔图像
imagesetinterpolation ― Set the interpolation method
imagesettile ― 设定用于填充的贴图
imagesx ― 取得图像宽度
imagesy ― 取得图像高度
imagetruecolortopalette ― 将真彩色图像转换为调色板图像
imagettfbbox ― 取得使用 TrueType 字体的文本的范围
imagettftext ― 用 TrueType 字体向图像写入文本
imagetypes ― 返回当前 PHP 版本所支持的图像类型
imagewbmp ― 以 WBMP 格式将图像输出到浏览器或文件
imagewebp ― Output an WebP image to browser or file
imagexbm ― 将 XBM 图像输出到浏览器或文件
iptcembed ― 将二进制 IPTC 数据嵌入到一幅 JPEG 图像中
iptcparse ― 将二进制 IPTC 块解析为单个标记
jpeg2wbmp ― 将 JPEG 图像文件转换为 WBMP 图像文件
png2wbmp ― 将 PNG 图像文件转换为 WBMP 图像文件








































//===== js 变换验证码图片


<img src="code.php" onclick="this.src='code.php?id='+Math.random()"/>








//===== 综合案例


<?php
	$img=imagecreatetruecolor(150,50);				//设置验证码画布资源
	$sw=20;		//预设绽放的宽
	$sh=20;		//预设绽放的高
	$sf=imagecreatefromjpeg('./img/p1.jpg');		//引用要缩放的图片
	$sfw=imagesx($sf);				//获取被缩图的宽
	$sfh=imagesy($sf);				//获取被缩图的高
	if($sw && ($sfw < $sfh)){		//按公式将预设的宽高等比绽放
		$sw = ($sh / $sfh) * $sfw;
	}else{
		$sh = ($sw / $sfw) * $sfh;
	}
	$sf2=imagecreatetruecolor($sw,$sh);		//使用缩放后的宽高创建一个新画布资源
	imagecopyresampled($sf2,$sf,0,0,0,0,$sw,$sh,$sfw,$sfh);  //将图片绽放到新资源中
	
	$x1=rand(3,145);	//设置绽放图片在源图片上显示的随机x坐标
	$y1=rand(20,50);	//设置绽放图片在源图片上显示的随机y坐标
	imagecopy($img,$sf2,$x1,$y1,0,0,$sw,$sh);
	
	
	$yin1=imagecreatefrompng("./img/hu.png");		//引用外部水印图片资源
	$yin2=imagecreatefrompng("./img/jing.png");
	$yin3=imagecreatefrompng("./img/shen.png");
	$yin4=imagecreatefrompng("./img/yue.png");
	$yinrand=rand(1,4);		//随机水印资源
	switch($yinrand){		//判断使用哪个水印资源
		case 1:
			$yin=$yin1;		
		break;
		case 2:
			$yin=$yin2;
		break;
		case 3:
			$yin=$yin3;
		break;
		case 4:
			$yin=$yin4;
		break;
	}
	$w=imagesx($yin);	//获取水印的宽度
	$h=imagesy($yin);	//获取水印的高度
	$cx=rand(0,140);	//设置随机水印x坐标
	$cy=rand(-5,45);	//设置随机水印y坐标
	imagecopy($img,$yin,$cx,$cy,0,0,$w,$h);	//将水印拷贝到图片上,坐标每次随机变换

	$bgcolor=imagecolorallocate($img,rand(125,255),rand(125,255),rand(125,255)); //设置动态背景色
	imagefill($img,0,0,$bgcolor);	//填充背景色，让背景色动态随机变换
	for($i=0;$i<1000;$i++){				//遍历随机位置显示1000个干扰点
		$colord=imagecolorallocate($img,rand(0,255),rand(0,255),rand(0,255));	//随机出点的颜色
		$dx=rand(3,147);		//随机点的X坐标
		$dy=rand(3,47);			//随机点的Y坐标
		imagesetpixel($img,$dx,$dy,$colord);	//坐标随机颜色随机画出10000个点
	}
	$str='abcdefghijklmnopqrstuvwxyz1234567890';		//设置验证码的满园
	$tx=0;			//设置码x坐标
	$ty=17;			//设置码y坐标
	for($i=0;$i<4;$i++){		//遍历出四个码
		$colort=imagecolorallocate($img,rand(0,100),rand(0,100),rand(0,100));	//设置文字颜色
		$text=$str[rand(0,strlen($str)-1)];		//让每个码在字串中随机抽取
		$tx+=rand(5,35);		//设置码x坐标随机变动 
		$ty+=rand(0,33);		//设置码y坐标随机变动 
		imagettftext($img,20,0,$tx,$ty,$colort,'./img/verdanaz.ttf',$text);	//显示出文字
		$ty=17;		//将y坐标重置初始状态，不然会依次往下排，越排越低了
	}
	header("content-type:image/jpeg");
	imagejpeg($img);	//输出图像
	imagedestroy($img);	//关闭资源 
	imagedestroy($sf);
	imagedestroy($sf2);
	imagedestroy($yin1);
	imagedestroy($yin2);
	imagedestroy($yin3);
	imagedestroy($yin4);
?>




