

二十六： 猜拳游戏及script change转换图片功能

<html>
	<head>
		<title>猜拳游戏</title>
<script lauguage="javascript">
	function mychange(obj){
		<!--window.alert('变化');//成功会弹出提示框-->
		<!--var val=obj.value;-->
		<!--window.alert(val);  //这两句是把选项的(qt,jd,b)值取到-->
		<!--val() 只会对第一个元素起作用.-->	
	var val=obj.value;
	var m=document.getElementById("g");
		if(val=="qt"){
			m.src="1.png";
		}else if(val=="jd"){
			m.src="2.png";
		}else if(val=="b"){
			m.src="3.png";
		}
	}
</script>		
	</head>
	<body bgcolor="#ccc">
	<select name="you" onchange="mychange(this);">
		<option value="qt">石头</option>
		<option value="jd">剪刀</option>
		<option value="b">布</option>
	</select>
	<img src="4.png" id="g"/>
	</body>
</html>
































---------------------------------------------------------------











                 ======javascript=====
javascript :用来在页面中编写特效的，和html/css一样都是浏览器解析
javaScript语言
	一：JS如何运行（JavaScript,jsscript,vbScript,applet,,,,）
	二：输出
		alert(什么类型都可以);
		document.write("字符串");
	三：如何在HTML文档中使用JS
		1,使用<script></script>将JS语法嵌入到HTML中，可以使用多个，之间都是关联的。
		2，href="javascript:代码";
		3，事件中
		4，写到外部文件中(.js后缀名的文件) <script src='文件路径'></script>


js语法：
	命名规范：
		1，一定要有意义。
		2，不能以数字开头，不能是系统的关键字。
	大小写：JavaScript区分大小写
		就是名和函数，第一个单词，小写以后每个单词，首字母大写.如： 
		aaa bbb ccc aaaBbbCcc ; getElementById();
		
		对象：每个单词首字母都要大写如：
		Date();  new Object();
	
	分号;
		功能执行语句，加分号 如：var a=10;
		结构定义语句，不加分号 如: for()  while() if() 等

	注释;
		//  单行
		/* */ 多行


	四，变量
		var a = 10 ; 声明一个变量
		    a = 20;  修改一个变量值 。
		注意：变量声明后是浏览器关闭后才释放的。在没关闭前可以随时使用。
		
		变量的声明：	var 变量名=值
		
		注意；javaScript是弱类型语言（和php 相同）


		var a = 10; 加var是声明
		    a=10; 不加var是赋值。



	五，数据类型
		参看：-----五;数据类型案例
		typeof(变量);
		
		1，number(int,float,double) 注意，计算时还是按整形和浮点型分开使用。
		2，string(string char) 
		3，boolean
		4，object(object array null) 注意，分别处理
		5，underfined 没有声明变量

		整数
		var a = 10;
		var a=045; 八进制
		var a=0xff; 十六进制

		小数在判断时不能用== 只能用<,>或>=,<=  因为浮点数是近似数，如8代表7.9999999

		字符串
		在javascript中‘ ’和 " "效果相同。不像PHP中“”可以解析，


		连接：
		javascript中字符串和变量连接时用 + 



	六：运算和表达式
		算术运算符号: + - * / % ++ --
		
		赋值运算符号：= += -= *= /= %=

		条件运算符号：> < == != >= <= === !==

		逻辑运算符号：&& || !
	
		位运算符号：>> >>>(无符号运算) << | & ~
	
		其它运算符号： ? :



	七：流程控制
		顺序结构
	
		条件结构--分支结构--选择结构
			1.单路分支
				if(bool){

				}
			2,双路分支
				if(bool){

				}else{

				}
			3,多路分支
			    1,if分支 用于范围
				if(bool){

				}else if(bool){

				}....
				}else{}
				

        		     2,switch分支 用于单个值匹配
				switch(变量){
					case 值1:
						表达式
						break;
					case ,,,,
						
						default
				}
			


			4,嵌套分去
								
				if(bool){
					if(){
						switch(){

						}
					}
				}else{
					for(){
						while(){
	
						}
					}
				}
	
			
	-----javascript有alert,document.write两种写入方式
。
<body>
	<script>
		alert('aaaaaaaaa');
		document.write('这是通过javascript写入的内容');
	</script>
</body>




	-----script可以在任何地方嵌入，但不可在<>内和style中

<script>
	alert('aaaaaa'+'111');
</script>
<html>
<script>
	alert('bbbbbbbbb'+'111');
</script>
<head>
<script>
	alert('ccccccccc'+'111');
</script>
</head>
<body>
<script>
	alert('dddddddd'+'111');
</script>
</body>
</html>
<script>
	alert('eeeeeeeee'+'111');
</script>






	-----href,form,onclick 触发式脚本

<html>
<body>
	<a href="javascript:alert('aaaaaaaaaaaaaa')">demo</a>
	<form action="javascript:alert('fffffffffffff')" >
		<input type='submit' value="表单提交"/>
	</form>
	<div onclick="alert('ooooooooo')">hello</div>
	<script>
		alert(new Date());
		document.write(new Date());
	</script>
	
</body>
</html>





	-----js外连文件也可以互通的，也可以相互调用
<html>
<body>
	<script src='e1.js'></script> //先在一个JS文件中声明了hello的变量
	<script src='e2.js'></script> //在e2的js文件中调用了这个变量。
</body>
</html>
	<script>
		alert(hello);
		document.write(hello);
	</script>




	e1.js内容
var hello="你好";

	e2.js内容
alert(hello);











	-----五;数据类型案例

<script>
	//number类型包括：整形，double,float
	var a = 10;
	alert(typeof(a));

	var a = 1.1;
	alert(typeof(a));


	var a = 10.55;
	alert(typeof(a));


	//string字符串类型
	var a = "abc";
	alert(typeof(a));


	//boolean布尔型
	var a = true;
	alert(typeof(a));

	//object 对象类型，包括object ,array,null	
	var a = ['11','22'];
	alert(typeof(a));

	var a = null;
	alert(typeof(a));



	//javascript 连接符 +
  	var a =10;
	alert("aaa"+a+'bbb');
</script>



	



	-----关于 + ---关于 %

在script中 + 有两种含意。一个是代表加法运算，另一个是连接字符串。



% 一种是被整除，一种求一段范围，如要求10 以下的数。不管多大的数对10 取余那么其结果都小于10

%在负数时，负数在后面是其结果为正数，负数在前面时其结果为负数。如：
4%-3     结果为 1.   -4%3  结果为1.






	-----关于布尔值与其它值的关系！

在script中被布尔值认为是假的有：0 ，“”（空字串），null
但“0” “ 空格” 会被认为是真。






	-----关于 || 的一个特例
<?php
	$a = 3;
	$b = 3;
	if($a=5 || $b=5){
		$a++;
		$b++;
	}
	echo $a;
	echo $b;
?>

结果为: 1 ,  4     这个例子相当于一个三目运算  前面相当于一个布尔表达式所以结果是1，4
如 mysql_connect()or die()   这就是一个典型的例子，前面是布尔型值，后面是一个表达式！成功了就不运行后面的表示式，不成功则运行后面的表达式！




	-----关于三目运算的形式
<script>
	var b =0;
	var a = b ? "www" : "yyy";
	alert(a);
</script>
如上。如果是一些简单的判断可以用三目运算来判断，如果是一些比较复杂的，则可用IF语句。





	-----关于script的for循环与break 跳出循标签！
<script>
	st:
	for(var i=1;i<9;i++){
		for(var j=1;j<i;j++){
			document.write(j+"*"+i+"="+(j*i)+"&nbsp;&nbsp;");
			if(j==5){
				break st;
//这里的 st 类似于goto 但不同的是，它跳转后会跳过当前for循环语句
			}
		}
		document.write("<br>");
	}
</script>



	-----script显示表格，隔行换色，鼠标指行变色

<script>
	var i=0;
	document.write('<table border="1" width="800" align="center">');
	while(i<1000){
		if(i%20==0){
			bg="#ccc";
		}else{
			bg="#eee";
		}
		if(i%10==0){
			document.write('<tr onmouseover="show(this)" onmouseout="noshow(this)" bgcolor='+bg+'>');
		}
		document.write("<td>"+i+"</td>");
		i++;
		if(i%10==0){
			document.write("</tr>");
		}
	}
	document.write('</tabel>');
	function show(obj){
		bj=obj.bgColor;
		obj.bgColor="red";
	}
	function noshow(obj){
		obj.bgColor=bj;
	}
</script>

	








	-----javaScript中的函数
函数：是一段完成“指定功能”的已经“命名”的代码段

函数只有“调用”才能使用到，调用：就是通过 函数名+（）来调用 如text()   
在javascript中函数的调用可以在声明之前，也可以在声明之后。


test(); //值 

function test(a,b){
	功能段（个条，或多条）
	return 值;
}

test();
1，函数名
2，参数，根据需要使用参数。
3，函数体（功能）
4，返回值（可选）



函数名不加（）时，这个函数名就代表整个这个函数的内容。相当于一个字符串

回调函数，声明
情况
1，函数的作用，--决定我去不去使用
2，函数的参数，--决定我怎么用
3，返回值      --决定我调用后如何处理






	-----函数回调简单案例
<script>
	function show(start,end,check){
		for(var i=start;i<end;i++){
			if(check(i)){
				document.write(i+"<br>");
			}
		}	
	}
show(1,200,function(i){
	if(i%5==0){
		return true;
	}else{
		return false;
	}
	});
show (-100,100,function(i){
	if(i<0){
		return true;
	}else{
		return false;
	}
	});

</script>














	-----script 函数默认参数的设置
<script>
	function test(a,b,c){
		a=a?a:1;
		b=b?b:2;
		c=c?c:3;
		alert(a+"----"+b+"----"+c);
	}
	test();
</script>



	-----arguments 显示函数参数的值

<script>
	function test(){
		alert(arguments.length); //显示实参的个数
		alert(arguments[2]);	//显示指定位置的参数值
	}
	test(1,2,3,4,5,6,7,8);
</script>













	-----利用arguments 计算参数值的和 

<script>
	function test(){
		var num=0;
		for(var i=0;i<arguments.length;i++){
			num += arguments[i];
		}
		return num;
	}
	var num=test(1,2,3,4,5,6,7,8);
	alert(num);
</script>






	=====javaScript 系统函数=====
escape , eval , ifFinite , isNaN , parseFloat , parseInt , unescape





	-----用escape方法将字符串内容转成另一种编码。 

<script>
	var str="escape 方法返回一个包含了charstrign内容的字符串值（Unicode格式）。所有空格，标点，重音符号以及其他非ASCLL字符都用%xx编码代替，其中xx等于表示该字符的十六进制数。例如，空格返回的是。";
	
	alert(str);
	document.write(escape(str));
</script>












	-----用unescape方法将编码后的内容再转回到字符串。
	
<script>
	var str="escape%20%u65B9%u6CD5%u8FD4%u56DE%u4E00%u4E2A%u5305%u542B%u4E86charstrign%u5185%u5BB9%u7684%u5B57%u7B26%u4E32%u503C%uFF08Unicode%u683C%u5F0F%uFF09%u3002%u6240%u6709%u7A7A%u683C%uFF0C%u6807%u70B9%uFF0C%u91CD%u97F3%u7B26%u53F7%u4EE5%u53CA%u5176%u4ED6%u975EASCLL%u5B57%u7B26%u90FD%u7528%25xx%u7F16%u7801%u4EE3%u66FF%uFF0C%u5176%u4E2Dxx%u7B49%u4E8E%u8868%u793A%u8BE5%u5B57%u7B26%u7684%u5341%u516D%u8FDB%u5236%u6570%u3002%u4F8B%u5982%uFF0C%u7A7A%u683C%u8FD4%u56DE%u7684%u662F%u3002";

	alert(str);
	document.write(unescape(str));

</script>








	-----parseLint 将浮点数转成整数（舍去小数部分）
	-----isNaN 检验变量是否为一个数字
	
<script>
	var f ="a12.945";
	//var f = "12.923";
	if(!isNaN(f)){
		var i =parseInt(f);
		alert(i);
	}else{
		var i = 0;
		alert(i);
	}
	
</script>






	



	-----eval把代码当成字符串来解析。
	
<script>
	a ='29.342';
	var str='var f="'+a+'";if(!isNaN(f)){var i =parseInt(f);}else{var i = 0;}';
	eval(str);
	alert(i);
	
</script>








	-----parseInt 把字符串转成整数

	parseInt('abc')		 //结果 NaN
	parseInt("12abc") 	//结果 12








   	-----parseFloat 把字符串转成浮点数
	parseFloat("abc")	//结果 NaN
	parseFloat("1.2abc");	//结果 1.2





	-----isFinite 指明提供的数字是否是有限的
	inFinite(number)为任意的数值
如果number不是NaN，负无穷或正无穷，那么isFinite方法将返回true,如果是这三种情况,返回false
	
 <script type="text/javascript">

document.write(isFinite(123)+ "<br />")
document.write(isFinite(-1.23)+ "<br />")
document.write(isFinite(5-2)+ "<br />")
document.write(isFinite(0)+ "<br />")
document.write(isFinite("Hello")+ "<br />")
document.write(isFinite("2005/12/12")+ "<br />")


</script>












	=====JavaScript对象

1，基于对象的操作方式（面向对象封装，继承，多态）
2，将相关的操作使用一个对象完成，看作是一个整体。

javascript 	php
对象		类
对象实例	对象



系统对象的分类：
	字符串对象
	数学对象
	数组对象
	时间对象



对象中的内容？
	一：属性（变量）
	二：方法（函数）


一：声明对象

二：使用对象

三：使用系统对象

	步骤：
		1，找到对象
		2，实例化对象
		3，操作对象 

对象的实例；属性  （取值，赋值）
对象实例【“属性名”】
对象实例.方法()




	-----script创建对象的方法一；

<script>

	function test(){
	}			//创建一个对象

				//从下是创建对象的属性和方法。
	var t=new test();
	t.width=300;
	t.height=500;
	t.autotime=3;
	t.num=4;
	t.show=function(){
		alert("play.....");
	}
	t.noshow=function(){
		alert("ok,,,,,");
	}
	

alert(t.width);			//调用对象的属性
t.show();			//调用对象的方法

</script>







	-----创建对象的方法二

<script>
function Play(){
	var p=new Object();
	//属性
	p.width=100;
	p.height=200;
	p.num=3;
	p.autotime=24;

	p.fun=function(){
		alert("######");
	}	
	p.category=function(){
		alert('aaaaaaa');
	}
	return p;
}
var p = Play();
alert(p.height);
p.fun();
p.category();
</script>






	-----script创建对象的方法三；
<script>
	function test(width,height,num,back){
		this.width=width;
		this.height=height;
		this.num=num;
	
		this.show=function(){
			alert('aaaaaa');
		}
	}
var t = new test(100,300,5);
alert(t.width);
alert(t.height);
alert(t.num);
t.show();
t.back();
</script>






	-----for(变量 in 对象)遍历对象中的元素

<script>
	function test(width,height,num){
		this.width=width;
		this.height=height;
		this.num=num;
		
		this.show=function(){
			alert("#########");
		}
	}
var t = new test(100,300,5);
var pro = "";
for(pro in t){
	document.write("p."+pro+"="+t[pro]+"<br>");
}
</script>







	-----调用document系统自定义对象

<script>


document.bgColor="red";
</script>









	-----with() 简化对象的操作

<script>
/*
	with(对象){
		所有方法如果不加对象那默认都是with()括号中对象的方法和属性。如下；
	}
	
	doucment.write("aaaa");
	doucment.write("bbbb");
	doucment.write("cccc");
	doucment.write("dddd");

	
	with(document){
		write('aaaa');
		write('bbbb');
		write('cccc');
		write('eeee');
	}
*/


</script>
<script>
	var str="今天是：";
	var d = new Date();
	str+=d.getYear()+"年";
	str+=(d.getMonth()+1)+"月";
	str+=d.getDate()+"日";
	str+=d.getHours()+":";
	str+=d.getMinutes()+":";
	str+=d.getSeconds()+" 星期";
 	switch(d.getDay()){
		case 0:
			str+="日";
			break;	
		case 1:
			str+="一";
			break;	
		case 2:
			str+="二";
			break;	
		case 3:
			str+="三";
			break;	
		case 4:
			str+="四";
			break;	
		case 5:
			str+="五";
			break;	
		case 6:
			str+="六";
			break;	
	}

	document.write(str+"<br>");
</script>
<script>

	var str="今天是：";
	var d = new Date();
with(d){
	str+=getYear()+"年";
	str+=(getMonth()+1)+"月";
	str+=getDate()+"日";
	str+=getHours()+":";
	str+=getMinutes()+":";
	str+=getSeconds()+" 星期";
 	switch(getDay()){
		case 0:
			str+="日";
			break;	
		case 1:
			str+="一";
			break;	
		case 2:
			str+="二";
			break;	
		case 3:
			str+="三";
			break;	
		case 4:
			str+="四";
			break;	
		case 5:
			str+="五";
			break;	
		case 6:
			str+="六";
			break;	
	}
}
	document.write(str+"<br>");
</script>










	-----script 显示日期及设置

<script>
	var dt=new Date();
	var str="今天是：";
	str+=dt.getYear()+"年";
	str+=(dt.getMonth()+1)+"月";
	str+=dt.getDate()+"日";
	str+=dt.getHours()+":";
	str+=dt.getMinutes()+":";
	str+=dt.getSeconds()+" 星期";
	
	switch(dt.getDay()){
		case 0:
			str+="日";
			break;
		case 1:
			str+="一";
			break;
		case 2:
			str+="二";
			break;
		case 3:
			str+="三";
			break;
		case 4:
			str+="四";
			break;
		case 5:
			str+="五";
			break;
		case 6:
			str+="六";
			break;
	}

document.write(str);
</script>

getYear(): 返回年数
　getMonth():返回当月号数
　getDate(): 返回当日号数
　getDay():返回星期几
　getHours():返回小时数
　getMintes(:返回分钟数
　getSeconds():返回秒数
　getTime() : 返回毫秒数
设置日期和时间：
　setYear();设置年
　setDate():设置当月号数
　setMonth():设置当月份数
　setHours():设置小时数
　setMintes():设置分钟数
　setSeconds():设置秒数
　setTime ():设置毫秒数
例子：
var d = new Date("2008/11/30");
d.setMonth(d.getMonth() + 1 + 1);//加一个月，同理，可以加一天：getDate()+1，加一年：getYear()+1



















	=====script内置系统函数

	-----简单程序方法的创建demo=new Function('x','y','return x/y');

<script>
	function demo(x,y){
		return x+y;
	}
	document.write(demo(3,4));
</script>
<script>
	var demo=function(x,y){
		return x*y;
	}
	document.write(demo(3,4));
</script>
<script>
	var demo = new Function('x','y','return x-y');
	document.write(demo(5,2));
</script>
<script>
	demo=new Function('x','y','return x/y');
	document.write(demo(10,5));
</script>









	-----script数学函数随机数，上下取整，四舍五入


<script>
var num=Math.random();  //伪随机数
num=num*100;
document.write(num+"<br>");
document.write(Math.ceil(num)+"<br>");// 向上取整
document.write(Math.floor(num)+"<br>"); //向下取整
document.write(Math.round(num)+"<br>");//	四舍五入
</script>













	-----函数replace替换字符 /^\S*$/   代表非空格

<script>
	var str="username";
	if(str.match(/^\S*$/)){  //  \S(大S) 代表非空格
		alert("true");
	}else{
		alert("false");
	}
</script>

<script>
	var str="lkj2s5gnr6jgb7dm8cbvk5lsdh23fl;6ang6e,jer";
	var nstr=str.replace(/\d/,"#"); //把第一个数字换成#
	document.write(str+"<br>");
	document.write(nstr+"<br>");
</script>

<script>
	var str1="lks2dj3flk5jf6lkh8gjk5hs3kj5ds76f3hks";
	var nstr1=str1.replace(/\d/g,"*");  //把所有数字替换成*
	document.write(str1+"<br>");
	document.write(nstr1+"<br>");
</script>













	=====script的array函数

	-----第四种创建对象的方法 json


<script>
	/*
	var p=new Object();
	p.name="aaaaaaaaa";
	p.age=10;
	p.sex="nan";
	alert(p.name+"--"+p.age+"--"+p.sex);
	*/
	//第四种创建对象的方法  json   (javascriptObjectNew)

	var p ={name:"wang",age:20,sex:"nv"}
	alert(p.name+"--"+p.age+"--"+p.sex);
	var w ={aaa:"aaa",bbb:"bbb",ccc:"cccc"};
	alert(w['aaa']+w['bbb']+w['ccc']);
	
</script>




	-----声明数组的方式一
<script>
	var names=['aa','bb','cc'];
	alert(names[1]);
	var tems=['a',10,true];
	alert(tems[2]);

	var arrs=[
		[111,222],
		['aaa','bbb'],
		['333','444']
	];
	alert(arrs[2][0]);

</script>




	-----向数组传参，并调用其长度和内容

<script>
	function MyArray(){
		this.length=arguments.length;
		for(var i=0;i<arguments.lenght;i++){
			this[i]=arguments[i];
		}
		
		this.sort=function(){alert('aaaaaaaa')}
		//this.pop=function(){}
		//this.push=function(){}
	}
	
	var arr=new MyArray('aa','bb','cc','dd','ee');
	//数组的长度
	alert(arr.length);
	arr[1]="xxxxxx";
	alert(arr[1]);
</script>








	-----数组的声明方法二
<script>
	var arr=new Array('a','n','c','d','e');
	//数组的长度
	alert(arr.length);

	alert(arr[1]);
	arr[2]='kkkk';
	alert(arr[2]);

</script>





	-----数组长度的声明方式

<script>
	//方式一：
	function MyArray(num){
		this.length=num;
		for(var i=0;i<this.length;i++){
			this[i]="";
		}
	}
	var arr=new MyArray(10);//设定一个数组内容的长度
	
	//方式二；
	var arrs=new Array(10);
</script>









	-----数组的排序

<script>
	//1，数值大小的排序
	var arr=[1,3,6,9,2,5,8,7];
	arr.sort(function(a,b){
		if(a > b){
			return -1;
		}if(a==b){
			return 0;
		}else{
			return 1;
		}
	});
	document.write(arr+"<br>");
	//2，数组内容长度排序
	var arr2=['a','aaa','aaaaaaaa','aaaa','aa','bbbbb','bbbbbb'];
	arr2.sort(function(a,b){
		if(a.length>b.length){
			return -1;
		}if(a.length==b.length){
			return 0;
		}else{
			return 1;
		}
	});	
	document.write(arr2);
</script>









	-----数组的出入栈，出入队
	
<script>
	var arr=[1,2,3,4,5];
	document.write(arr+"<br>");
	arr.push(777,888);	//数组入栈	（先进后出）
	document.write(arr+"<br>");
	arr.pop();		//数组出栈
	document.write(arr+"<br>");
	arr.unshift("hello");	//数组队列-入列（先进先出）
	document.write(arr+"<br>");
	arr.shift();		//数组队列-出列
	document.write(arr);
</script>









	-----更换文档背景颜色

<script>
	var colors=['red','blue','green','yellow','silver'];
	document.bgColor=colors[Math.ceil(Math.random()*colors.length)];
</script>







	-----网页版贪吃蛇（部分）
<script>
	var rows=20; //行数
	var cols=20; //列数

	var w=25; //宽
	var h=25; //高
	
	//声明一个数组
	var map=new Array();
	for(var i=0;i<rows;i++){
		//数组map中分别声明数组
		map[i]=new Array();
		for(var j=0;j<cols;j++){
			map[i][j]=0;	//二维数组中的每个元素为0
		}
	}
	map[Math.floor(Math.random()*rows)][Math.floor(Math.random()*cols)]=1;
	map[Math.floor(Math.random()*rows)][Math.floor(Math.random()*cols)]=2;
	for(var i=0;i<rows;i++){
		for(var j=0;j<cols;j++){
			if(map[i][j]==1){
				var bg="red";
			}else if(map[i][j]==2){
				var bg="blue";
			}else{
				var bg="yellow";
			}
			document.write('<div style="position:absolute;top:'+(100+h*i)+'px;left:'+(100+w*j)+'px;width:'+w+'px;height:'+h+'px;overflow:hidden;background:'+bg+';border:1px solid white;"></div>');
		}
	}
</script>













		===== DOM =====


	作用：
		DOM（Document Object Model）
		1.document 文档 是指 html 或xml文件（标记类语言的文档）
		如；
		<body>
			<div>
				<a>www</a>
			</div>
		</body>
		
		2.Object 对象（HTML元素，转成的对象（JS对象））
		注意：如果使用JS操作HTML文档，就需要先将HTML文档结构转成JS对象，然后做如下操作。
		a：操作属性
		b：操作内容
			innerText	不解析标签，把标签也当作文本
				此功能适用IE ，其它不适用的可用 textContent
			innerHTML	解析标签，可使内容中的标签生效。取值时会带标签

			outerText
			outerHTML //取出整个对象的元素内容

				操作表单时;要用value 	如：
	<textarea id='username'>mmmmmmmmmmmmmmm</textarea><br>
	<script>
		var username=document.getElementById('username');
		alert(username.value);
	</script>



		c：操作样式
			1,单独操作某个样式；
		aobj.style.backgroundColor="red";
		aobj.style.fontSize="3cm";
			2,用类批量操作样式
		在style中建立一个类如：
<style>
	.test{
		width:500px;
		height:300px;
		border:5px solid blue;


	}
	.demo{
		font-size:4cm;
		color:red;
		background:yellow;
	}
</style>
		然后调用
		aobj.className="test demo"; 或

		aobj.className="test";
		aobj.className+="demo";
		aobj.className="";  清除类




		以上三点的操作之前需要先把文档转成对象

		转成对象的两种形式：

			1，标记名（多个），id（唯一），name（多个） 多个是复数需加s

			document中的三个方法
			var objs=document.getElementsByTagName("div");//以标记名做为对象
			var objs=document.getElementById("one");//以id做为对象	
			var objs=document.getElementsByName('two'); //以名字做为对象
	

			2,通过数组
			document.title=
			document.body=[object]
			window.frames=[object]

			document.all=[object]	//代表所有的标记，想统计元素内容用这个
			document.embeds=[object]	//关于动画的
			document.scripts=[object]	//统计脚本
			document.applets=[object]
			document.images=[object]
			document.forms=[object]
			document.anchors=[object] //所有的毛点，标签里有name的
			document.styleSheets=[object]
			document.links=[object]




	-----innerText 与 innerHTML


<html>
	<body>
		<a id='alink' href='http://www.brophp.com' target='_blank' title='this is tes'>test</a>
		<script>
			var aobj= document.getElementById('alink');
			aobj.href="http://www.baidu.com";
			aobj.target="_self";
			aobj.title="demo demo demo";
			aobj.hello="mmmmmmm";  // 虽然标签属性不支持，但也可以在对象中加入其它元素内容。
			alert(aobj.hello);

			//aobj.innerText="<b>brother</b>"; //改变内容的方式一：innerText 这种方式会把加入内容全部当成文本，标签也会当做文本。

			//alert(aobj.innerText);
			aobj.innerHTML="<h1>brophp</h1>";
			
		</script>
	</body>
</html>











	-----innerText与textContent的兼容选择

<html>
	<body>	
		<a id='alink' href='http://www.brophp.com' target='_blank' title='this is tes'>test</a>
		<script>
			var aobj= document.getElementById('alink');
			
			aobj.hello="mmmmmmm";  // 虽然标签属性不支持，但也可以在对象中加入其它元素内容。
			alert(aobj.hello);

			ffie(aobj,'wwwwwwwww');
			alert(ffie(aobj));
			function ffie(obj,value){
				if(document.all){
					alert('aaaaaaaaa');
					if(typeof(value)=='undefined'){
						return obj.innerText;
					}else{
						obj.innerText=value;
					}
				}else{
					alert('bbbbbbbb');
					if(typeof(value)='undefined'){
						return obj.textContent;
					}else{
						obj.textContent=value;
					}
				}
			}

		</script>
	</body>
</html>






		-----innerText与textContent的兼容选择二
body>
	<div></div>
</body>
<script>
	var di = document.getElementsByTagName('div')[0];
	function inner(obj,value){
		if(document.all){
				obj.innerText=value;
		}else{	
				obj.textContent=value;
		}
	}
	inner(di,"llllllllllllll");
</script>











	-----<textarea>在对象取值时要用value

<body>
	<textarea id='username'>mmmmmmmmmmmmmmm</textarea><br>
	<script>
		var username=document.getElementById('username');
		alert(username.value);
	</script>
</body>








	-----在DOM对象中设置style样式的几种方法
	-----offset 获取不未知元素信息（如区域宽高度）

<style>
	.test{
		width:500px;
		height:300px;
		border:5px solid blue;
	}
	.demo{
		font-size:4cm;
		color:red;
		background:yellow;
	}
</style>

<a id="alink" href="www.baidu.com" target="_blank" title="the miss bautifull"><b>test</b></a>

<script>
	var aobj=document.getElementById("alink");
	
	//改变style属性 注意不要有“-” 每二单词首字母要大写。
	//aobj.style.backgroundColor="red"; 
	//aobj.style.fontSize="3cm"; 
	
	//取得内容的宽度和高度：offset,,,   
	alert(aobj.offsetWidth);
	alert(aobj.offsetHeight);

	//用类改变style属性的几种方法
	//aobj.className="test demo";    //可以把两个类用空格连起来
	aobj.className="test";
	aobj.className+=" demo";       //也可以用+= 连接字符串的形式

	//清除类属性
	aobj.className="";		
	

</script>






	----用pro in 方法显示对象中所有的元素

<a id='alink' href="#">aaaaa</a>
<script>
	var aobj = document.getElementById('alink');
	var pro="";
	for(pro in aobj){
		document.write("a."+pro+"==="+aobj[pro]+"<br>");
	}
</script>













	-----复选框的全选与取消的实现一
<body>
<script>
	document.write('<ul>');
	for(var i=0;i<20;i++){
			document.write('<li>');
			document.write('<input type="checkbox" name="ids[]" value="'+i+'"/>aaaaaaaaaa');
			document.write('</li>');
	}
	document.write('</ul>');
</script>
<a href="javascript:sall()">全选</a>
<a href="javascript:fall()">反选</a>
<a href="javascript:nall()">全不选</a>
<script>
	var cnames=document.getElementsByName("ids[]");
	function sall(){
		for(var i=0;i<cnames.length;i++){
			cnames[i].checked='true';
		}
	}

	function fall(){
		for(var i=0;i<cnames.length;i++){
			if(cnames[i].checked){
				cnames[i].checked="";
			}else{
				cnames[i].checked='true';
			}
		}
	}
	function nall(){
		for(var i=0;i<cnames.length;i++){
			cnames[i].checked="";
		}
	}
</script>
</body>








	-----复选框的全选与取消的实现二

<body>
<script>
	document.write('<ul>');
	for(var i=0;i<20;i++){
			document.write('<li>');
			document.write('<input type="checkbox" name="ids[]" value="'+i+'"/>aaaaaaaaaa');
			document.write('</li>');
	}
	document.write('</ul>');
</script>
<label for="ss"><input id="ss" type='checkbox' onclick='sall(this)' />全选</label>
<input type='checkbox' onclick='fall(this)' />反选
<script>
	var cnames=document.getElementsByName("ids[]");
	function sall(obj){
		for(var i=0;i<cnames.length;i++){
			cnames[i].checked=obj.checked;
		}
	}
</script>
</body>











	-----通过名字取出表单项的值
<body>
	<input type="tect" name="username" value="zhangsan"/>
	<script>
		//var user=document.getElementsByName('username')[0];
		//alert(user.value);
		var user = document.getElementsByName('username');
		alert(user[0].value);
	</script>
</body>









	-----script实现在同一区域中显示不同的内容
<html>
<head>
<style>
	#card{
		width:300px;
		height:200px;
	}
	#tit{
		width:100%;
		height:25px;
		line-height:25px;
	}
	#tit h3{
		margin:0px;
		padding:0px;
		width:80px;
		background:#ccc;
		float:left;
		line-height:25px;
		text-align:center;
		border:2px solid white;
		font-size:12px;
		color:white;
	}
	#content{
		width:100%;
		height:175px;
		background:#888;
		color:white;
	}
	#content div{
		display:none;
	}
	#content .one{
		display:block;
	}
	#tit .titin{
		broder:2px solid #888;
		background:#888;
	}
</style>
</head>
<body>
	<div id="card">
		<div id="tit">
			<h3 onmouseover="show(0)" class='titin'>第一项</h3>
			<h3 onmouseover="show(1)" >第二项</h3>
			<h3 onmouseover="show(2)" >第三项</h3>
		</div>
		<div id="content">
			<div class='one'>
				<ul>
					<li>aaaaaaaaaa</li>
					<li>aaaaaaaaaa</li>
					<li>aaaaaaaaaa</li>
					<li>aaaaaaaaaa</li>
					<li>aaaaaaaaaa</li>
				</ul>
			</div>
			<div>
				<ul>
					<li>bbbbbbbbbbbb</li>
					<li>bbbbbbbbbbbb</li>
					<li>bbbbbbbbbbbb</li>
					<li>bbbbbbbbbbbb</li>
					<li>bbbbbbbbbbbb</li>
					<li>bbbbbbbbbbbb</li>
				</ul>
			</div>
			<div>
				<ul>
					<li>ccccccccccccc</li>
					<li>ccccccccccccc</li>
					<li>ccccccccccccc</li>
					<li>ccccccccccccc</li>
					<li>ccccccccccccc</li>
					<li>ccccccccccccc</li>
				</ul>
			</div>
		</div>
	</div>
<script>
	var h3os=document.getElementsByTagName('h3');
	var cdivs=document.getElementById('content').getElementsByTagName("div");
	
	function show(num){
		for(var i=0;i<h3os.length;i++){
			if(i==num){
				h3os[num].className="titin";
				cdivs[num].style.display="block";
			}else{
				h3os[i].className="";
				cdivs[i].style.display="none";
			}
		}
	}
</script>
</body>
</html>














	-----通过数组转成对象的七种方式

<body>
	<form name="frm1">
		<input type="text" name="username" value="zhangsan"><br>
	</form>
	<form name="frm2">
		<input type="text" name="username" value="lisi"><br>
	</form>
	<form name="frm3">
		<input type="text" name="username" value="admin"><br>
	</form>

	<script>
		alert(document.forms[1].username.value);
		alert(document.forms['frm2'].username.value);
		alert(document.forms.item(1).username.value);
		alert(document.forms.item('frm2').username.value);
		alert(document.forms.frm2.username.value);
		alert(document.frm2.username.value);
		alert(document['frm2'].username.value);
	</script>
</body>









	-----父节点，同胞节点，子节点的运用实例

<html>
<body>
	<div></div>
	<h3></h3>
	<!--lllllllll-->
	<pre>	
		<a></a><div id="di">
			<a hre="#">aaaaa</a>
			<span>ssss</span>
			<i>iiiii</i>
		</div><font></font>
		
	</pre>
	<div></div>
	
<body>
</html>
<script>
	var di=document.getElementById('di');
	//alert(di.parentNode.parentNode.nodeType); //取di父节点的父节点的类型
	//alert(di.parentNode.parentNode.nodeName); //取di父节点的父节点的名字
	//var body=di.parentNode.parentNode; //把di父节点的父节点赋给一个变量
	//alert(body.nodeType); //显示body这个节点的类型
	//alert(body.nodeName); //显示body这个节点的名
	//alert(body.childNodes[3].nodeName); //显示body下的第4个子节点的名字,需要打开上面的 var body
	//alert(di.childNodes[5].nodeType); //取di的子节点<i>的类型
	//alert(di.childNodes[5].nodeName); //取di的子节点<i>的名字
	//alert(di.childNodes[5].childNodes[0].nodeValue); //取节点中内容值要再用一次childNodes[0]	***
	//alert(di.childNodes[1].childNodes[0].nodeValue); //取di的span节点中的内容			***
	//alert(di.nodeType);	//显示di节点类型
	//alert(di.nodeName);	//显示di节点名
	//alert(di.firstChild.nodeType);//显示di下的第一个子节点类型					***
	//alert(di.firstChild.nodeName);//显示di下的第一个子节点名
	//alert(di.childNodes[1].nodeType);//显示di下的第二个子节点的类型。
	//alert(di.childNodes[1].nodeName);//显示di下的第二个子节点的名字
	//alert(di.childNodes[2].nodeType); //显示di的第三个子节点类型(空格或回车也算做节点)		***
	//alert(di.childNodes[2].nodeName); //显示di的第三个子节点名
	//alert(di.lastChild.previousSibling.nodeType); //显示最后一个子节点的类型			***
	//alert(di.lastChild.previousSibling.nodeName); //显示最后一个子节点的名字			
	//alert(di.nextSibling.nodeType);	//显示下一个兄弟节点的类型				***
	//alert(di.nextSibling.nodeName);	//显示下一个兄弟节点的名字
	//alert(di.previousSibling.nodeType);	//显示上一个兄弟节点的类型				***
	//alert(di.previousSibling.nodeName);	//显示上一个兄弟节点的名字
	//alert(di.parentNode.nodeType);	//显示父节点的类型					***
	//alert(di.parentNode.nodeName);	//显示父节点的名字	

	//显示di的父节点的上一个兄弟节点的上一个兄弟节点的类型						***			
	//alert(di.parentNode.previousSibling.previousSibling.nodeType);
	//alert(di.parentNode.previousSibling.previousSibling.nodeName);	
	//alert(di.parentNode.parentNode.nodeType);
	//alert(di.parentNode.parentNode.nodeName);

	//显示di的父节点的父节点的第二个子节点的类型和名字。						***
	//alert(di.parentNode.parentNode.childNodes[1].nodeType);
	//alert(di.parentNode.parentNode.childNodes[1].nodeName);
	
</script>










		-----创建节点并添加元素和内容

<body>
	<div>
	</div>
	aaaaaaaaaaaaaaaa<br>
	aaaaaaaaaaaaaaaa<br>
	aaaaaaaaaaaaaaaa<br>
	aaaaaaaaaaaaaaaa<br>
	aaaaaaaaaaaaaaaa<br>
	<div id="one" style="width:300px;height:200px;background:yellow">
		<b>lksjdflk</b><br>
		
		<p id="two">dddd</p>
	</div>
	<script>
		function test(){
			var tu=document.createElement("img");
			tu.src="cx.gif";
			tu.title="this is a pictrue";
			tu.border="5px";
			tu.borderColor="blue";

			var aobj=document.createElement("a");
			aobj.href="http://www.baidu.com";
			aobj.target="_blank";
			aobj.title="this is demo";
			//aobj.innerText="brophp";	//给aobj对象添加内容
			//document.body.appendChild(aobj); //把创建的节点与内容添加到文档里（尾部）
			var one=document.getElementById("one");
			//one.appendChild(aobj);	//把创建的aobj元素添加到one元素中
			//one.appendChild(tu);	//把创建的tu 元素添加到one元素中
			
			//var two=document.getElementById('two');

			aobj.appendChild(tu);	//在aobj对象下再创建一个tu的元素rrrttt
			one.insertBefore(aobj,two);//在aobj到tow之间添加tu

		}
	</script>
	<a href="javascript:test()">test</a>
	bbbbbbbbbbbbbbbb<br>
	bbbbbbbbbbbbbbbb<br>
	bbbbbbbbbbbbbbbb<br>
	bbbbbbbbbbbbbbbb<br>
	bbbbbbbbbbbbbbbb<br>
	bbbbbbbbbbbbbbbb<br>
</body>
















		-----给文档流输入节点内容

<body>
	aaaaaaaaaaa<br>
	aaaaaaaaaaa<br>
	aaaaaaaaaaa<br>
	aaaaaaaaaaa<br>

	<script>
		function test(){
			var aobj=document.createElement('a');
			aobj.href="http://www.baidu.com";
			aobj.target="_blank";
			aobj.title="this is demo";
			aobj.innerText="brophp";
			document.body.appendChild(aobj);
		}
	</script>
	bbbbbbbbbbbb<br>
	bbbbbbbbbbbb<br>
	bbbbbbbbbbbb<br>
	bbbbbbbbbbbb<br>
	<a href="javascript:test()">demo</a>
</body












	-----文档流输入指定到子节点的输入<br>

<body>
	aaaaaaaaaaa<br>
	aaaaaaaaaaa<br>
	aaaaaaaaaaa<br>
	aaaaaaaaaaa<br>
	<div id="one" style="width:300px;height:100px;background:yellow">

		<i id="two">iiiiiiii</i>
	
	</div>
	<script>
		function test(){
			var two=document.getElementById("two");
			var aobj=document.createElement('a');
			aobj.href="http://www.baidu.com";
			
			aobj.target="_blank";
			aobj.title="this is demo";
			//aobj.innerText="brophp";
			//document.body.appendChild(aobj);
	
			var tu=document.createElement("img");
			tu.src="cx.gif";
			aobj.insertBefore(tu);

			var one=document.getElementById("one");
			//one.appendChild(aobj);
			one.insertBefore(aobj,two);

		}
	</script>
	bbbbbbbbbbbb<br>
	bbbbbbbbbbbb<br>
	bbbbbbbbbbbb<br>
	bbbbbbbbbbbb<br>
	<a href="javascript:test()">demo</a>

</body>
















		=====script事件处理

	onmoseover="show(this)" //这里的 this直接就是把当前的语句转成对象
	
	一，事件源：任何一个HTML元素（节点）body,div,button,p,a,h1,,,,,
	二，事件：你的操作
		鼠标：
			click 单击
			dblclick 双击
			contextmenu (在body) 文本菜单 右键单击事件
			mouseover 放上
			mouseout  离开
			mousedown 按下
			mouseup  抬起
			mousemove 移动
		
		键盘:
			keypress 键盘事件
			keyup	抬起
			keydown	按下

		文档：
			load  文件体加载完成后执行事件
			unload 关闭
			beforeunload 关闭之前

		表单：
			focus 焦点
			blur  失去

	三：事件处理程序

有三种方法加事件：

	第一种：
		格式：<tag on事件 = “事件处理程序或函数”/>


	第二种：
		<script>
			对象.on事件 =事件处理程序 
		</script>


	第三种：
		<script for="事件源ID" event="事件">事件处理程序</script>
		注：当事件源发生预定的事件时才触发事件处理程序










	
	-----点击事件的第一种方法

<script>
	function show(){
		var one=document.getElementById('one');
		alert(one.innerText);
	}
</script>
<body>
	<div id="one">
		wwwwwwwwwwwwww
	</div>
	<input type="button" onclick="show()" value="buttons"/>

</body>







	-----点击事件的第二种方法

<body>
	<div id="one">aaaaaaaaaaaa</div>

<script>
	var one = document.getElementById("one");
	one.onclick=function(){
		one.style.background="red";
	}
</script>
</body>






	-----点击事件的第三种方法


<div id='one'>wwwwwwwwwwwww</div>

<script for='one' event="onclick">
	var one=document.getElementById('one');
	one.style.background="red";
</script>









	------一个事件源添加多个事件


<div id="one" onmouseover="show(this,'red')" onmouseout="show(this,'blue')" ondblclick="show(this,'green')" onclick="show(this,'yellow')">wwwwwwwww</div>

<script>
	function show(obj,col){
		obj.style.backgroundColor=col;
	}
</script>






	-----事件函数中带有return 的注意要点
	-----oncontextmenu禁止右键

<body oncontextmenu="return test()">
	
</body>
<script>
	function test(){
		alert('010-12oi3u4289');
		return false;
	}
</script>
注意： 当调用一个函数且些函数用了return返回了一个值的时候。那么在调用时就要 return test()
返回方法值。不然方法返回的值不会被执行！








	-----页面禁止右键，并弹出提示

<body oncontextmenu="alert('010-12344566');return false">

</body>








	-----onload当页面加载完成后触发事件

<body onload="test()">
	
</body>
<script>
	function test(){
		alert('aaaaaaaaa');
	}
</script>

	--onload()是在加载后最后执行，注意顺序

<script>
	alert('111111111111');
</script>
<body onload="alert('22222222222')">
	<script>
		alert('333333333333');
	</script>
</body>
<script>
	alert('4444444444');
</script>

	--onload在加载后触发的实例


<script>
	function test(){
		var one = document.getElementById('one'); //当此脚本放在前面时，因顺序问题下面的事件不会成立，但做成方法并被 onload后，就不会因顺序问题而不触发了！
		alert(one.innerText);
	}
</script>

<body onload="test()">
	<div id="one">
		#############
	</div>
</body>










	-----unload页面关闭时触发事件

<script src="c1.js"></script>

<body onunload="alert('goodbye')">
	<div id="one">
		##########
	</div>
</body>

	c1.js页面

onload=function(){
	var one=document.getElementById('one');
	alert(one.innerText);
}










	-----unload 在页面关闭前触发
	
<body onunload="alert('goodbye')">
	#####
</body>








	-----beforeunload关闭页面时提示-确定或取消


<body onunload="alert('goodbye')" onbeforeunload="event.returnValue='你小心点儿！'">
	$$$$$$$
</body>








	-----事件对象，随对象改变显示其内容


<div onclick="show(this)">aaaaaaaaa</div>
<h3 onclick="show(this)">hhhhhhhhhhhhh</h3>
<p onclick="show(this)">pppppppppp</p>

<script>
	function show(obj){
		alert(obj.innerText);
	}
</script>









	-----事件对象，改变所点击对象的内容

<div onclick="show()">aaaaaaaaa</div>
<h3 onclick="show()">hhhhhhhhhhhhh</h3>
<p onclick="show()">pppppppppp</p>

<script>
	function show(){
		event.srcElement.innerText="abc";
	}
</script>







	-----通过事件对象让输入的内容全部为大写

<input type="text" onkeyup="if(this.value!=this.value.toUpperCase()) this.value=this.value.toUpperCase()" />








	-----获取键盘事件按键的值（字母和数字键）

<body onkeypress="show()">
	<script>
		function show(){
			alert(event.keyCode);
		}
	</script>
</body>








	----通过键盘事件关闭浏览器

<body onkeypress="show()">
	<script>
		function show(){
			if(event.keyCode=="27"){
				window.close();
			}
		}
	</script>
</body>









	-----获取键盘事件按键的值（包括功能键）

<body onkeydown="show()">
	<script>
		function show(){
			alert(event.keyCode);
		}
	</script>
</body>








	-----setInterval 定时执行功能实现动画效果(数字累加变换)

<div id="one" style="color:red;font-size:10cm;text-align:center">0</div>
<script>
	var one=document.getElementById('one');
	var i = 1;
	setInterval(function(){
		one.innerText=i;
		i++;
	},100);
</script>






	-----setInterval 定时执行功能实现计数（带开始停止功能）

<body>
	<div id="one" style="color:red;font-size:10cm;text-align:center">0</div>

	<script>
		var one=document.getElementById("one");
		var num=1;
		var st='';
		var ct=0;
		function aa(){
			ct+=1;
			st=setInterval(function(){
				one.innerText=num;
				num++;
			},100);
			return st;
		}
		function start(){
			if(ct==0){
				aa();
			}
		}
	
		function stop(){
			ct=0;
			clearInterval(st);
		}
	</script>
	<input type="button" onclick="start()" value="start" />
	<input type="button" onclick="stop()" value='stop'/>

</body>









	-----网页动画人物移动

<body onkeydown="opt()">
	<img border='0' style="position:absolute;left:0px;top:0px;" id='ren' src='image/left_1.jpg'>

<script>
	//获取图片名
	function basename(url){
		var loc=url.lastIndexOf("/")+1;
		return url.substr(loc);
	}

	//创建人图片对象 
	var ren=document.getElementById("ren");
	var fx="r";
	var speed=0;
	function changetu(){
		if(basename(ren.src).charAt(2)==1){
			ren.src="image/"+fx+"_2.jpg";
		}else{
			ren.src="image/"+fx+"_1.jpg";
		}
	}

	var x=0;
	var y=0;
	var xs=0;
	var ys=0;
	function run(){
		x+=xs;
		y+=ys;
		ren.style.left=x;
		ren.style.top=y;
		
	}
	
	setInterval(function(){
		changetu();
		run();
	},100);
	
	function opt(){
		var code=event.keyCode;
		switch(code){
			case 37:
				fx='l';
				ys=0;
				xs=-5;
				break;
			case 38:
				fx='u';
				ys=-5;
				xs=0;
				break;
			case 39:
				fx='r';
				ys=0;
				xs=5;
				break;
			case 40:
				fx='d'
				ys=5;
				xs=0;
				break;
		}
		
	}
	opt();
	var two = document.getElementById('two');
	
</script>
</body>








		-----事件event 		window.event

1，srcElemnt	代表事件源对象 
2，keyCode	事件发生时的键盘码，keypress,keydown keyup
3，clientX,clientY	网页执行区内的鼠标坐标。
4，screenX,screenY	屏幕范围的鼠标坐标。
5，returnValue 		返回事件值。
6，cancelBubble		只发生本身当次事件，取消当次事件以后引发的事件。








	-----clientX,Y 获取鼠标在网页可执行区范围内的坐标！
	-----screenX,Y 获取鼠标在屏幕范围的坐标
	-----window.status=str; 把坐标显示在状态栏中
	-----window.document.title=str; 把坐标显示在title上

<body onmousemove="test()">
	<div id="one"></div>

	<script>
		var one = document.getElementById("one");
		function test(){
			var cx=event.clientX;	//鼠标在网页执行区范围内的坐标
			var cy=event.clientY;
			var sx=event.screenX;	//鼠标注在屏幕范围的坐标
			var sy=event.screenY;
			var str="clientX="+cx+",clientY="+cy+"screenX"+sx+"screenY"+sy;
			one.innerText=str;
			window.status=str; //把坐标显示在状态栏中
			window.document.title=str; //把坐标显示在title上
		}
	</script>
</body>






	-----兼容IE和火狐的坐标显示

<body>
	<div id="one">//火狐默认把事件对象以参数形式传进函数。而IE用event</div>

	<script>
		var one=document.getElementById('one');
		document.onmousemove=function(e){
			var ev=e || window.event;
			
			
			var cx=ev.clientX;
			var cy=ev.clientY;
			var sx=ev.screenX;
			var sy=ev.screenY;

			var str="clientX="+cx+",clientY="+cy+"screenX="+sx+"screenY="+sy;
			one.innerHTML=str;
			window.status=str;
			window.document.title=str;
		}
	</script>
</body>







	-----网页中图片随鼠标移动


<body>
	<img id="tu" src="image/car1.jpg" style="position:absolute;top:10;left:10"/>
	
	<script>
		var tu=document.getElementById('tu');
		document.onmousemove=function(e){
			var ev=e || window.event;
			var x=ev.clientX;
			var y=ev.clientY;
		
			tu.style.top=y+20;
			tu.style.left=x+20;
		}

	</script>

</body>








	-----鼠标按下拖动区域或移动

<body>
	<div id="one" style="position:absolute;left:100px;top:100px;width:200px;height:30px;background:red">aaa</div>

	<script>
		var one = document.getElementById('one');	
		var down=false;
		var dx=0;
		var dy=0;
		var sx=0;
		var sy=0;
		document.onmousemove=function(e){
			var ev=e || window.event;

			if(down){
				one.style.top=ev.clientY-(dy-sy);
				one.style.left=ev.clientX-(dx-sx);
			}
		}
		one.onmousedown=function(e){
			var ev=e || window.event;
			dx=ev.clientX;
			dy=ev.clientY;
			sx=parseInt(one.style.left);
			sy=parseInt(one.style.top);
			if(!down){
				down=true;
			}
		}
		document.onmouseup=function(){
			if(down){
				down=false;
			}
		}
	</script>
</body>














	-----用按键创建一个可移动的区域

<style>
	.one1{
		position:absolute;
		background:red;
	}
</style>

<body>
	<input type="button" onclick="crea()" value="add">
	<script>

		var one =null;	
		var down=false;
		var dx=0;
		var dy=0;
		var sx=0;
		var sy=0;

	function crea(){
		if(one!=null)
			return;
		alert('你创建了一个可移动的区块!');
		one=document.createElement('div');
		one.style.top="100";
		one.style.left="100";
		one.style.width="200px";
		one.style.height="30px";
		one.className="one1";
		document.body.appendChild(one);

		one.onmousedown=function(e){
			var ev=e || window.event;
			dx=ev.clientX;
			dy=ev.clientY;
			sx=parseInt(one.style.left);
			sy=parseInt(one.style.top);
			if(!down){
				down=true;
			}
		}
		document.onmouseup=function(){
			if(down){
				down=false;
			}
		}

	}
		document.onmousemove=function(e){
			var ev=e || window.event;

			if(down){
				one.style.top=ev.clientY-(dy-sy);
				one.style.left=ev.clientX-(dx-sx);
			}
		}

	</script>
</body>










	-----window.event.returnValue=false返回事件函数中的值

<body oncontextmenu="show()">
	<script>
		function show(){
			alert('9999999999');
			window.event.returnValue=false;
		}
	</script>

</body>










	-----cancelBubble取消以后事件来解决层级事件的重复发生！

//这里因为图片是在body体上的，所以当点击图片时同时发生了图片事件和body体事件。这是两层事件的发生。层级需解决！
<body onclick='one()'>
	<img src="image/car1.jpg" onclick='two()'>

	<script>
		function one(){
			alert("body click #########");
		}
		function two(){
			alert("img click %%%%%%%%%");
			window.event.cancelBubble=true; //只产生本身一次事件，不再触发更深层的其它事件！
		}
	</script>

</body>

















	------BOM 浏览器对象

一：浏览器本身自己就有一些对象 ，不用创建就可以使用

window: 当前浏览器客体的

	属性：

		status
		opener
		closed

	方法：
		alert();
		confirm();
		setInterval();
		claerInterval();

		setTimeout();
		clearTimeout();
		open();


	子方法：
		document
		frames
		location
		screen
		,,,,



	[window.]成员 
		document.write();
						















	-----confirm确定或取消事件的发生行为

<a href="del.php" onclick="return confirm('你确定要删除吗？')">删除</a>













	
	-----漂浮广告区块的实现
	-----document.body.clientWidth | Height 获取窗口执行区的宽度和高度
	-----one.offsetHeight | Width  	获对象取区块的高度和宽度


<body>
<div id='one' style="background:red;position:absolute;left:0;top:0;width:100px;height:100px"></div>

<script>
	var x=0;
	var y=0;
	var ys=10;
	var xs=10;

	var one=document.getElementById('one');

	function move(){
		x+=xs;
		y+=ys;
		
		if(x>=document.body.clientWidth-one.offsetWidth-20 || x<=0){  
			//document.body.clientWidth 窗口执行区的宽度
			xs=-1*xs;
		}
		if(y>=document.body.clientHeight-one.offsetHeight-20 || y<=0){
			//one.offsetHeight 获取区块的高度
			ys=-1*ys;
		}
		
		one.style.left=x;
		one.style.top=y;
	}

	var dt=setInterval("move()",100);

	one.onmouseover=function(){
		clearInterval(dt);
	}

	one.onmouseout=function(){
		//setInterval("move()",100);  如果这里不指定区块，就相当于每次触发新的事件，移动速度就越来越快。
		dt=setInterval("move()",100);
	}

</script>

</body>











	-----setTimeout 单次定时器

<body>
	<script>
		var one=setTimeout(function(){
			document.bgColor='red';
		},3000);
	
		var two=setTimeout(function(){
			document.bgColor="blue";
		},6000);

		var three=setTimeout(function(){
			document.bgColor="green";		
		},9000);

		function stop(){
			clearTimeout(two);
		}
	</script>
	<input type="button" onclick="stop()" value="add"> //触发这个事件后，就会清除相应的定时器

</body>














	-----父窗体弹出子窗体并控制其内容

<body>
	<script>
		var subwin=window.open("aa.html","_blank","top=300,left=300,width=200,height=200");
		function show(obj){
			subwin.document.bgColor=obj.value;
		}

	</script>
	<input type="button" onclick="show(this)" value="red"><br>
	<input type="button" onclick="show(this)" value="green"><br>
	<input type="button" onclick="show(this)" value="yello"><br>
	<input type="button" onclick="show(this)" value="blue"><br>
	<input type="button" onclick="show(this)" value="#ff00ff"><br>
</body>


需要创建一个aa.html页面；














	-----子窗体控制父窗体元素
	-----subwin.close()关闭父窗口同时关闭子窗口


<body onunload="closeit()">  
	<script>
		var subwin=window.open('bb.html',"_blank","top=300,left=300,width=200,height=200");

		function show(obj){
			subwin.document.bgColor=obj.value;
		}
	
		function demo(){
			window.document.title="wwwwwwwwwwwwwwwww";
		}

		function closeit(){
			if(!subwin.closed){
				subwin.close();
			}
		}
	</script>
	
	<input type="button" onclick="show(this)" value="red"><br>
	<input type="button" onclick="show(this)" value="green"><br>
	<input type="button" onclick="show(this)" value="blue"><br>
	<input type="button" onclick="show(this)" value="green"><br>
	
</body>


		bb.html页面
<body>
	<script>
		opener.demo();
		function show(obj){
			opener.document.bgColor=obj.value;
		}
	</script>
	<input type="button" onclick="show(this)" value="red"><br>
	<input type="button" onclick="show(this)" value="green"><br>
	<input type="button" onclick="show(this)" value="yellow"><br>
	<input type="button" onclick="show(this)" value="blue"><br>
</body>
















	-----跑马灯，状态栏信息来回跑效果
	-------算法：自增再再自减，产生来回动的效果

<body onunload="closeit()">  
	<script>
		var subwin=window.open('cc.html',"_blank","top=300,left=300,width=200,height=200");

		function show(obj){
			subwin.document.bgColor=obj.value;
		}
	
		function demo(){
			window.document.title="wwwwwwwwwwwwwwwww";
		}

		function closeit(){
			if(!subwin.closed){
				subwin.close();
			}
		}

		var num=0;
		var dir=1;
		setInterval(function(){  //跑马灯，状态栏信息来回跑效果
			if(num >40 || num <0){
				dir = -1*dir;
			}
			num+=dir;
			var space="";
			for(var i=0;i<num;i++){
				space+=" ";   //注意这里别忘了加空格
			}
			window.status=space+"www.brophp.com";
		},100);
	</script>
	
	<input type="button" onclick="show(this)" value="red"><br>
	<input type="button" onclick="show(this)" value="green"><br>
	<input type="button" onclick="show(this)" value="blue"><br>
	<input type="button" onclick="show(this)" value="green"><br>
	
</body>



	cc.html页面

	-----window.resizeBy(5,5); //每100毫秒窗口的宽和高都增长5pxp
	-----window.close(); 	//窗口5秒后自动关闭

<body>
	<script>
		opener.demo();
		function show(obj){
			opener.document.bgColor=obj.value;
		}
		setInterval(function(){
			window.resizeBy(5,5);	//每100毫秒窗口的宽和高都增长5pxp
		},100);
		setTimeout(function(){
			window.close(); 	//窗口5秒后自动关闭
		},5000);

	</script>
	<input type="button" onclick="show(this)" value="red"><br>
	<input type="button" onclick="show(this)" value="green"><br>
	<input type="button" onclick="show(this)" value="yellow"><br>
	<input type="button" onclick="close()" value="close"><br>
	
</body>








		

	-----页面分帧


<frameset rows="100,*">
	<frame />
	<frameset cols="200,*">
		<frame name="dd" src="dd.html"/>
		<frame name='main'/>
	</frameset>
</frameset>


	dd.html页面
	
	-----用script 设置分帧显示背景色
	-----window.parent.parent.frames[0].document.bgColor 父窗口的父窗口的背景色
	-----window.top 最顶层的父窗口


<input type="button" onclick="window.document.bgColor='yellow'" value="改自己的"><br>
<input type="button" onclick="window.parent.parent.frames[0].document.bgColor='green'" value="改上面的"><br>
	//window.parent.parent.frames[0].document.bgColor 父窗口的父窗口的背景色
<input type="button" onclick="window.top.frames['main'].document.bgColor='blue'" value="改右面的"><br>
	//window.top.最顶层的父窗口
















	-----html跳转方式 meta http-equiv	

<html>
	<head>
		<meta http-equiv="refresh" content="3;url=http://www.baidu.com" />
	</head>
	<script>
		document.write(new Date()+"<br>");
		document.write(new Date()+"<br>");
		document.write(new Date()+"<br>");
		document.write(new Date()+"<br>");
	</script>

</html>


	bounds.html页面 省略











	-----script的几种跳转方式 
	-----location="bounds.html"; 重点记住使用的跳转方法！
	-----location.reload(); script刷新方式，适用做实时时间显示。
<html>
<script>
	setTimeout(function(){
		//window.navigate('bounds.html');  
		//window.location.href="bounds.html"
		//location="bounds.html"; // 重点推荐使用此种跳转方法
		//location.replace('bounds.html');//此方法是替换，不同于其它跳转，所以不会有后退
		location.reload(); 	//刷新 

	},1000);
	document.write(new Date()+"<br>");
	document.write(new Date()+"<br>");
	document.write(new Date()+"<br>");
</script>
</html>












	-----history.back()返回上一步
	-----history.go(-1或-2)返回上二步

<a href='two.html'>two</a>



<a href="three.html">three</a>
<a href="javascript:history.back()">返回上一页</a>



<a href="javascript:history.go(-1)">返回上一步</a>
<a href="javascript:history.go(-2)">返回上二步</a>














	-----screen获取屏幕的高度等信息	

	

<script>
	with(document){
		write("您的屏幕显示设定值如下：<br>");
		write("屏幕的实际高度为"+screen.availHeight+"<br>");
		write("屏幕的实际宽度为"+screen.availWidth+"<br>");
		write("屏幕的色盘深度为"+screen.colorDepth+"<br>");
		write("屏幕区域的高度为"+screen.height+"<br>");
		write("屏幕区域的宽度为"+screen.width);
	}
</script>











	-----window.clipboardData.setData 剪贴板	

<div id="one">
	11111111<br>
	2222222<br>
	333333333<br>
	44444444<br>
</div><br><br><br>
<input type="button" value="aaaaaa" onclick="cnm()"/>
<script>
	var one=document.getElementById('one');
	function cnm(){
		var content=one.innerText;
		window.clipboardData.setData("text",content);
		alert('您以成功复制了内容！！！');
	}
	
</script>

















	=====表单对象=====
	
	document.getElementById();
	document.forms.username
	document.frm1.username

	本身表单有的属性，都可以是对象的属性

	action
	method
	enctype
	title
	
	submit() 自动提交方法

	onfocus();  当获取焦点时触发事件
	onblur();  当失去焦点时触发事件
	onchange(); 当内容改变时触发事件


	
	-----submit()表单自动提交与表单对象


<body>
	<form name="frm" action="login.html" method='post'>
		username:<input type="text" name="username" value=""><br>
		password:<input type="password" name="password" value=""><br>
		<input type="submit" name="submit2" value="Login"><br>  //这里注意当有自动提交时千万不要与重名。

		<h1 onclick="test()">login h1</h1>
	</form> 
</body>
<script>
	function test(){
		var frmobj=document.frm;
		frmobj.action="login.html";
		frmobj.target="_blank";
		frmobj.method="get";
		frmobj.username.value="admin";
		frmobj.submit();
	}
	setTimeout('test()',3000);
</script>




	创建一个login.html文件











	
	-----onsubmit在form标签中验证表单
	-----focus()获取焦点的应用


<body>
	<form name="frm" action="login.php" onsubmit="return check()" method="post">
		username: <input type="text" name="username" value=""><br>
		password: <input type="password" name="password" value="" ><br>
		<input type="submit" name="submint2" value="Login"><br>
	</form>	
</body>
<script>
	function check(){
		if(document.frm.username.value==""){
			alert("用户名不能为空");
			document.frm.username.focus();
			return false;
		}
		if(document.frm.password.value==""){
			alert("用户密码不能为空");
			document.frm.password.focus();
			return false;
		}
		return true;
	}
</script>















	
	-----onsubmit在form标签中验证表单
	-----focus()获取焦点的应用
	-----/^\S+$/ 非空连贯 的应用


<body>
	<form name="frm" action="login.php" onsubmit="return check()" method="post">
		username: <input type="text" name="username" value=""><br>
		password: <input type="password" name="password" value="" ><br>
		<input type="submit" name="submint2" value="Login"><br>
	</form>	
</body>
<script>
	function check(){
		if(!document.frm.username.value.match(/^\S+$/)){  // /^\S+$/ 非空连贯
			alert("用户名不能为空或包含空格");
			document.frm.username.focus();
			return false;
		}
		if(document.frm.password.value==""){
			alert("用户密码不能为空");
			document.frm.password.focus();
			return false;
		}
		return true;
	}
</script>






















	-----用一个变量统计错误信息一并显示
	-----onbulu 失去焦点触发事件的应用(要结合onsubmit)

<body>
	<form name="frm" action="login.php" onsubmit="return check()" method="post">
		username: <input type="text" name="username" value=""><br>
		password: <input type="password" name="password" value="" ><br>
		<input type="submit" name="submint2" value="Login"><br>
	</form>	
</body>
<script>
	function check(){
		var info="";
		var stats=true;
		if(!document.frm.username.value.match(/^\S+$/)){  // /^\S+$/ 非空连贯
			info+="用户名不能包含空格!\n";
			stats = false;
		}
		if(document.frm.password.value==""){
			info+="用户密码不能包含空格";
			stats = false;
		}
		if(!stats)
			alert(info);
		return stats;
	}
</script>

















	-----onbulu 失去焦点触发事件的应用(要结合onsubmit)

<body>
	<form name="frm" action="login.php" onsubmit="return check()" method="post">
		username: <input type="text" name="username" onblur="one()" value=""><br>
		password: <input type="password" name="password" onblur="two()" value="" ><br>
		<input type="submit" name="submint2" value="Login"><br>
	</form>	
</body>
<script>
	function one(){
		if(!document.frm.username.value.match(/^\S+$/)){ 
			alert("用户名不能包含空格！");
		}
	}
	function two(){
		if(document.frm.password.value==""){
			alert("用户密码不能包含空格");
		}
	}

	function check(){
		var info="";
		var stats=true;
		if(!document.frm.username.value.match(/^\S+$/)){  // /^\S+$/ 非空连贯
			info+="用户名不能包含空格!\n";
			stats = false;
		}
		if(document.frm.password.value==""){
			info+="用户密码不能包含空格";
			stats = false;
		}
		if(!stats)
			alert(info);
		return stats;
	}

</script>
















	-----利用表单提交注册信息实例
	//-----获取下一个指定名的同胞节点的方法  gspan(cobj)
	//-----通过表单名获取对象  var username=document.getElementsByName("username")[0];
	//-----当对象获得焦点时触发事件  username.onfocus=function()
	//-----获得焦点触发事件  obj.onfocus=function()
	//-----页面加载完成后调用  onload=regis  或onload=function()
	//-----设置一个方法返回值的变量，来控制onsubmit是否触发
	//-----判断事件的触发行为是submit还是onblur

<head>
	<style>
		.stats1{
			color:#ddd;
			font-size:12;
		}
		.stats2{
			color:#000;
		}
		.stats3{
			color:red;
		}
		.stats4{
			color:green;
		}
	</style>
	<script src="check.js"></script>
</head>
<body>
	<form action="bb.html" method="post" onsubmit="return regis('click')">
		username:<input type="text" name="username" value="">
			<span class="stats1">请输入用户名</span><br>
		password:<input type="password" name="password" value="">
			<span class="stats1">请输入密码</span><br>
		repass:<input type="password" name="repass" value="">
			<span class="stats1">请确认密码</span><br>
		email:<input type="text" name="email" value="">
			<span class="stats1">请输入邮箱</span><br>
		other:<input type="other" name="other" value="">
			<span class="stats1">请输入其它</span><br>
		submit:<input type="submit" name="sub" value="提交">
	</form>
</dody>




		check.js页面



	//-----获取下一个指定名的同胞节点的方法  gspan(cobj)
	//-----通过表单名获取对象  var username=document.getElementsByName("username")[0];
	//-----当对象获得焦点时触发事件  username.onfocus=function()
	//-----获得焦点触发事件  obj.onfocus=function()
	//-----页面加载完成后调用  onload=regis  或onload=function()
	//-----设置一个方法返回值的变量，来控制onsubmit是否触发
	//-----判断事件的触发行为是submit还是onblur


//传入一个对象，当这个对象的下一个同胞节点名 !=SPAN 那么就把下一外节点赋给当前对象。如果下一个同胞节点名
	//等于SPAN 那么就把这个同胞节点返回给这个方法以。这个方法就是获取下一个名为SPAN的同胞节点。
function gspan(cobj){
	while(true){
		if(cobj.nextSibling.nodeName!="SPAN")
			cobj=cobj.nextSibling;
		else{
			return cobj.nextSibling;
		}
	}
}

//test函数传入一个对象，一个文本信息，一个函数方法
function test(obj,info,fun,click){
	var sp=gspan(obj); //把调用的函数值赋给一个变量sp
	obj.onfocus=function(){		//当被传入的对象获得焦点时触发的事件：
		sp.innerHTML=info;	//obj获得焦点后在sp对象内插入内容 为info
		sp.className="stats2";  //obj获得焦点后给sp对象添加一个类名为stat2的样式
	}
	obj.onblur=function(){		//传入的obj对象失去焦点时触发的事件；
		if(fun(this.value)){	//传入的回调方法再次传入当前对象的值，也就是obj.value  this就代表obj
			sp.innerHTML='输入正确'; //当条件成立时对sp插入内容为"输入正确"
			sp.className='stats4';	//当条件成立时对SP对象添加一个名为stats4的样式
		}else{
			sp.innerHTML=info;	//当条件不成立时sp插入info信息
			sp.className="stats3";	//当条件不成立时对sp添加一个名为stats3的样式
		}
	}
	if(click=="click"){ //在前页面给onsubmit 随便传一个值。当点击submit提交时这个值就会传进来，如果不是			//submit提交则无此值，以此来判断事件是由submit触发的还是由onblur触发的。
		obj.onblur();
	}
}

onload=regis		//页面加载完成后调用

function regis(click){	
	var stat=true;		//设置一个方法返回值的变量，来控制onsubmit是否触发
			//当下面方法中此变量全部为真，onsubmit触发，如果其中有一个为假，则onsubmit就不触发
	var username=document.getElementsByName("username")[0];
	var password=document.getElementsByName("password")[0];
	var repass=document.getElementsByName("repass")[0];
	var email=document.getElementsByName("email")[0];
	var other=document.getElementsByName("other")[0];
	//以表单中的各个名字创建对象
	
	//alert(click.value);
	test(username,"用户名为3-20个字母",function(val){
		if(val.match(/^\S+$/) && val.length >=3 && val.length <=20){
			return true;
		}else{
			stat = false;
			return false;
		}
	},click);
	test(password,"密码0-9，a-z",function(val){
		if(val.match(/^\S+$/) && val.length>=3 && val.length<=20){
			return true;
		}else{
			stat = false;
			return false;
		}
	},click);
	test(repass,"请确认两次密码一致",function(val){
		if(val==password.value && val.match(/^\S+$/)){
			return true;
		}else{
			stat = false;
			return false;
		}
	},click);
	test(email,"请正确输入邮箱格式",function(val){
		if(val.match(/^\w+\@\w+\.\w+/)){
			return true;
		}else{
			stat = false;
			return false;
		}
	},click);
	
	return stat;

}














	-----通过select选项变换图片<br>
	-----onchange() 改变触发事件<br>
	-----selectedIndex 可设置或返回下拉列表中被选选项的索引号<br>
	-----options[] 返回select 元素中所有 option 的一个数组。<br><br><br><br>

<select id='sel' onchange="test(this)">		//onchange() 改变触发事件
	<option value="img/1.jpg">a</option>
	<option value="img/2.jpg">b</option>
	<option value="img/3.jpg">c</option>
	<option value="img/4.jpg">d</option>
</select>
<img src="img/1.jpg" id="tu" height="50" />

<script>
	var tu = document.getElementById('tu');
	function test(obj){
		var index = obj.selectedIndex;	//selectedIndex 可设置或返回下拉列表中被选选项的索引号
		tu.src=obj.options[index].value; //option 返回select 元素中所有 option 的一个数组。
	}

</script>











	-----省份城市多重选择自动变换实例
	-----selected 属性为select 多选时的首选项

<script src="city.js"></script>
<script>
	scity('pro','cit','广东','河源');
</script>







var citys=new Array(
	new Array('南京','徐州','连云港','淮安','盐城','扬州','南通','镇江'),
	new Array('北京'),
	new Array('天津'),
	new Array('上海'),
	new Array('重关'),
	new Array('广州','深圳','珠海','汕头','韶关','河源','梅州'),
	new Array('杭州','宁波','温州','嘉兴','绍兴','金华','舟山'),
	new Array('福州','厦门','莆田','三明','泉州','漳州'),
	new Array('长沙','株州','湘潭','衡阳','邵阳','常德'),
	new Array('武汉','黄石','十堰','宜昌','荆州','孝感')
);


function scity(pname,cname,xf,cs){  //xf是传入的默认省份 
	var province=['江苏','北京','天津','上海','重庆','广东','浙江','福建','湖南','湖北'];
	
	document.write('<select onchange="selectc(this)" id="pro" name="'+pname+'">');
	document.write('<option>--选择省份--</option>');
	var a = 0;
	for(var i=0;i<province.length;i++){  //循环遍历所有省份
		if(typeof(xf)!="undefined"){	//如果传入的省份以定义
			if(province[i]==xf){	//如果遍历到的省份与传入的省份相同
				var sel="selected";  //则给sel变量赋值为“selected”；
				a=i;		//把省份的索引值赋给一个变量a
			}else{
				var sel="";	//否则为空
			}
		}else{
			var sel="";		//如果xf没有定义，则sel为空
		}
		document.write('<option '+sel+' value="'+province[i]+'">'+province[i]+'</option>');
					//sel:如果xf以定义，则这里就会出现selected 被设置成默认第一个显示
	}
	document.write('</select>');

	document.write('<select id="city" name="'+cname+'">');
	document.write('<option>--选择城市--</option>');
	document.write('</select>');

	if(a >0)
		selectc(document.getElementById('pro'),a,cs);


}

function selectc(pobj,a,cs){		//把省份对象传到了函数里。
	if(typeof(a)!="undefined"){	//省份的索引值如果有效
		var index=a;		//则把省份的索引值传给当前索引index
	}else{
	var index=pobj.selectedIndex-1;	//获取select当前省份数组的索引值    //如果省份索引没指定就用默认的。
	}
	var cobj=document.getElementById('city'); //获取城市对象
	cobj.innerHTML="";	//把城市选项栏置空
	if(index >=0){
		for(var i=0;i<citys[index].length;i++){
			if(typeof(cs)!="undefined"){
				if(citys[index][i]==cs){
					var sel='selected';
				}else{
					var sel="";
				}
			}
			var option=document.createElement('option'); //创建option对象
			var text = citys[index][i];	//把城市二维数组的每个城市名赋值给变量text
			option.value=text;		//把text的城市名传给option的value值。
			option.selected=sel;
			option.innerHTML=text;		//把text城市名添加到option的内容里
			cobj.appendChild(option);	//把创建的option追加到cobj对象的子节点。
		}
	}else{
			var option=document.createElement('option'); 
			option.innerHTML='--选择城市--';
			cobj.appendChild(option);
	}
}












	-----offsetWidth  获取对象的宽度
	-----offsetHeight 获取对象的高度

<body>
	<div>
		aaaaaaaaaaaaaaaaa<br>
		aaaaaaaaaaaaaaaaa<br>
		aaaaaaaaaaaaaaaaa<br>
		aaaaaaaaaaaaaaaaa<br>
		aaaaaaaaaaaaaaaaa<br>
	</div>
	<img src="image/car1.jpg" id="img"/>
	<script>
		var d = document.getElementsByTagName('div')[0];
		alert(d.offsetWidth);
		alert(d.offsetHeight);

		var img = document.getElementById('img');
		document.write("<br>图片的宽度是："+img.offsetWidth);
		document.write("<br>图片的高度是: "+img.offsetHeight);
	</script>
</body>









	-----offsetTop 当前对象框体与父框体的顶部距离 
	-----one.offsetTop+one.parentNode.offsetTop 可累加
<style>
	body{
		margin:0px;
		margin:0px;
	}
</style>
<body>
<div style="position:absolute;top:80px;left:100px">
	<div style="position:absolute;top:100px;left:100px">
		aaaaaaaaaaaaaaaaa<br>
		aaaaaaaaaaaaaaaaa<br>
		aaaaaaaaaaaaaaaaa<br>
		<div id="one">aaaaaaaa</div>
	</div>
</div>
	<script>
		var one=document.getElementById('one');
		alert(one.offsetTop+one.parentNode.offsetTop);
		
	</script>
</body>










	-----计算当前对象到HTML的TOP距离的函数

<style>
	body{
		margin:0px;
		margin:0px;
	}
</style>
<body>
<div style="position:absolute;top:80px;left:100px">
	<div style="position:absolute;top:100px;left:100px">
		aaaaaaaaaaaaaaaaa<br>
		aaaaaaaaaaaaaaaaa<br>
		aaaaaaaaaaaaaaaaa<br>
	<div id="one">aaaaaaaa</div>
	</div>
</div>
	<script>
		var one=document.getElementById('one');
		alert(getOffsetTop(one));

		function getOffsetTop(obj){
			var loc=0;
			while(obj){
				if(obj.nodeName=='HTML'){
					break;
				}
				loc+= obj.offsetTop;
				obj=obj.parentNode;
			}
			return loc;
		}
		
	</script>
</body>











	----- scrollTop,scrollLeft 滚动距离
	-----用scroll属性定位网页中的图片让其不随页面滚动而变化

<style>
	#tu{
		position:absolute;
		top:100px;
		left:100px;
	}
</style>

<body onscroll="test()">
	<textarea cols="1000" rows="1000" ></textarea>
	<img src="image/car1.jpg" id='tu' />
	<script>
		var tu=document.getElementById('tu');
		function test(){
			tu.style.top=100+document.body.scrollTop;
			tu.style.left=100+document.body.scrollLeft;
		}
	</script>
</body>


















	-----position:fixed 使图片固定在页面中 

注：fixed固定是针对于HTML框体而言的，而上一实例中的document.body.scrollTop是针对body而言的，它们针对的对象不同。
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html>
	<head>
		<style>
			#tu{
				position:fixed;
				top:100px;
				left:100px;
			}
		</style>
	</head>
	<body>
		<textarea cols="1000" rows="1000" ></textarea>
		<img src="image/car1.jpg" id="tu"/>
	</body>
</html>













	-----利用scroll 做字幕在区域中的无缝滚动
	-----overflow:hidden;    隐藏超出区域的内容

<html>
	<head>
		<style>
			#test{
				width:200px;
				height:200px;
				border:1px solid red;
				overflow:hidden;      //隐藏超出区域的内容
			}
		</style>
	</head>
	<body>
		<div id="test">
			<div id="test1">
				11111111111111111111<br>
				aaaaaaaaaaaaaaaaaaaa<br>
				aaaaaaaaeeeaaaaaaaaaaaa<br>
				aaaaaaaccaaaaaaaaaaaaa<br>
				aaaaaaaaffaaaaaaaaaaaa<br>
				aaaaaaaaaaaaaaaaaaaa<br>
				aaaaaaaaaggggaaaaaaaaaaa<br>
				aaaaaaaaaaaaaaaaaaaa<br>
				aaaaaaaaaer3rrtgraaaaaaaaaaa<br>
				aaaaaaaaaaaaaaaaaaaa<br>
				aaaaaaaaaaaaaaaaaaaa<br>
				aaaaaaaaaaaaaaaaaaaa<br>

			</div>	
			<div id="test2"></div>
		</div>
		<script>
			var test=document.getElementById('test');
			var test1=document.getElementById('test1');
			var test2=document.getElementById('test2');
			test2.innerHTML = test1.innerHTML;
			function move(){
				if(test1.offsetHeight - test.scrollTop <= 0){
					test.scrollTop-=test1.offsetHeight;
				}
				test.scrollTop++; 
//这里为什么要设置test？是因为scroll认识的一个误区。scroll的滚动值是指父框体与当前框体的距离，当这个距离增加时，那么test框体就是往下走的，这样文本的框体相对来看就是向上走的！
				
				window.document.title=test.scrollTop;
			}

			setInterval("move()",100);
		</script>
	</body>
</html>

























javaScript:用来在页面中编写特效的，和html/css一样都是由浏览器解析

javaScript语言：





输出方式;
	alert('什么类型都可以');	// alert()
	document.write("字符串");	// document.write()


js在HTML文档中的使用;
	1，使用<script></script>将js语法嵌入到HTML中，可以使用多外，每一个之间都是关联的。
	2，href="javascript:代码";	action="javascript:代码";			// javascript:代码
	3，事件触发类 <div onclick="test()"></div>
	4, JS外部文件引入 <script src="test.js"> </script>
	

js 语法：
	命名规范：
		1，区分大小写。
		2，变量和函数名： 变量名和函数使用驼锋式规范  aaaBbbCcc
		3，对象： 每个变量名首字线要大写 如：  Date();   new Object();
		4, 分号： 功能执行语句加分号	结构定义语句 不加分号
		5, 注释： 单行注释用 //  	多行注释用  /*这里写内容*/
		
		
变量的声明;
	var a=10;	var 声明一个变量
	    a=20;	没有var就是为一个变量赋值
	注意： 变量声明后是浏览器关闭后才释放的，在没关闭之前可以随时使用。

	在script里 在函数外面声明的 var 变量就是全局变量 如：
	
  	var a=10;
	function test(){
		a+=20;
	}
	test();
	alert(a);	//其结果为30 ，因为在调用方法test()时，此全局变量被加上了20



数据类型：
	typeof(变量);		获取一个变量的类型

	1, number (包括：int float double) 注意，计算时还是按各自的类型分开使用。
	2，string (包括 string char)
	3, boolean
	4, object (包括 object array null) 
	5, undefined  没有声明变量 

	注意：
		在script中 单引'' 和双引"" 的效用是一样的。  
		转义字符\  可以把没意义的转成有意义的如 \n 
			   可以把有意义的转成没意义的如 \"
		在script 中字符串相连用 + 号  如： a=10; alert("aaa"+a+"bbb");
	 


运算符和表达式
	算术运算符： + - * / % ++ --
	赋值运算符： = += -= *= /= %=
	条件运算符： > < == != >= <= === !==
	逻辑运算符： && || ! ^(异或) 
	位运算符号： >> << | & ~(取反) >>>(无符号右移)  
	其它运算符： ? :


	注意事项：
			+有两种意义 ：

		加法运算: 
		连接字符串:
	如：a = 10+5+"12abc"+20;    在script中其结果为： 1512abc20
	   $a = 10+5+"12abc"+20;    在php 中其结果 为： 47



			%在php 和script中的区别
			%的用途一种是被整除，一种求一段范围

	在php中当对浮点数%时，会先把浮点数取整，然后再进行%，而script中可以直接%










流程控制；
	顺序结构


	条件结构 
		1，单路分支	if(){}
		2，双路分支	if(){}else{}
		3，多路分支	if(){}else if(){}else{}
				switch(变量){
					case 值:
						表达式
						break;
					case,,,,
				}
		4，嵌套分支	
				if(){
					if(){
						switch(){

						}
					}
				}else if(){
					for(){
						switch(){

					 	}
					}
				}










scritp 中的函数
	函数： 是一段完成“指定功能”的以经命名的代码段。函数只有“调用”才能使用。
	调用： 通过名称加括号来调用如 fun();	函数的调用可以在声明之前，也可以在声明之后。
	函数名不加()时，这个函数名就是代表这个函数，而不是调用这个函数.
如：

test(); //调用一个函数 

function test(a,b){		//声明一个函数
	功能段（一条或多条）
	return 值 ；（可有，可无）
}	



回调函数；
<script>
	function demo(a,b,fun){
		return a+b+fun(a,b);
	}
	demo(1,2,function(x,y){
		return x*y;
	});

</script>

	

函数中三目运算的应用
	<script>			
		function back(a,b,c){
			a=a?a:1;
			b=b?b:2;
			c=c?c:3;
			alert(a);
			alert(b);
			alert(c);
		}
		back();
	</script>




取出动态参数的个数:
	arguments.length    //获取参数的个数的一个属性，它相当一个数组







Global 对象：

	escape ：将字符串编码    
		var str="将字符串编码";  alert(escape(str));

	unescape ：将编码再解码成字符串    
		var str="scape%uFF1A%u628A%u5B57%u7B26";    alert(unescape(str));

	parseInt : 将一个字串或数值转成整型 .    
		var f='12.94a';		var i=parseInt(f);   alert(i);  结果为：12

	parseFloat : 将一个前部为浮点数的字符串转成浮点数
		var f='1.2abc';	 var i=parseFloat(f);	alert(i); 	结果为：1.2

	isNaN : 判断一个变量是不是字串。
		var a=1;    	isNaN(a)	结果为：false;    
		var b="aa";  	isNaN(a)	结果为：true;

	isFinite : 判断一个变量是否为数值，是否是无穷数, 有限的数值返回true ,无限的或非数值返回false
		var a=1  	isFinite(a);	结果为: true
		var a = a/b	isFinite(a);	结果为; false

	eval ; 将一段可转为代码的字串解析成代码，
		var str='var f = "12.994";if(!isNaN(f)){var i = parseInt(f);}else{var i = 0;}';
		eval(str); //检查并执行代码 
		alert(i);








javaScript对象

	字符串对象：

	数学对象；

	时间对象；
	var dt = Date();
	dt.getYear()年	getMonth()月	getDate()日	getHours()时	getMinutes()分	getSeconds()秒
	   getDay()星期几



对象中的内容：

	一；属性（变量）
	二：方法 （函数）


对象的操作：

	一；声明对象
	二；使用对象
	三；使用系统对象
	四：自定义对象
		<script>
			function play(){}  
			var p=new play();
			//创建对象的属性
			p.width=300;
			//创建对象的方法
			p.autoplay=function(){}
			alert(p.width);
		</script>
	也可
		<script> 
			var p=new object();
			//创建对象的属性
			p.width=300;
			//创建对象的方法
			p.autoplay=function(){}
			alert(p.width);
		</script>
	也可（推荐）
		<script> 
		    function Play(){	//创建一个方法
			var p=new object();	//在方法中创建一个对象
			//创建对象的属性
			p.width=300;
			//创建对象的方法
			p.autoplay=function(){}
			return p;
		    }
			var p=Play(); 	//把一个方法中返回的对象赋给变量p 
			alert(p.width);	//调用p中的属性
		</script>

操作步骤：

	1，找到对象；
	2，实例化对象
	3，操作对象
		实例对象的属性有两种方式：	
			1，对象.属性 		如： object.name
			2，对象['属性名']	如:  object['name'];
		实例对象的方法
			对象名.方法() 如：
			object.one();





			
pro in 遍历对象中的元素

<script>
	document.bgColor='red';	//改变文档的背景颜色
	var doi='';
	for(doi in document){
		document.write('document.'+doi+"="+document[doi]+'<br>');
	}
</script>








with(对象)的应用

<script>
	var dt=new Date();
	with(dt){			//这里加入对象，那么以下代码中有相同对象的就可以省略
		var str="今天是：";
		str+=getYear()+"年";
		str+=(getMonth()+1)+"月";
		str+=getDate()+"日 ";
		str+=getHours()+":";
		str+=getMinutes()+":";
		str+=getSeconds()+" ";
	}
	document.write(str);
</script>







用对象方式表达函数的另一种形式
	
	<script>
	/*
		function demo(x,y){
			return x+y;
		}
		function demo(x,y){
			return x-y;
		}
	*/
	//上面的函数也可以这样表达
		var demo=new Function('x','y','return x*y;');
		var demo=new Function('x','y','return x/y;');
		alert(demo(3,8));
	</script>







重点掌握对象：

	Array对象
	
	Date对象

	Global对象

	Math对象

	String对象

		




数学对象 Math相关对象
//Math.abs 	获取数字的绝对值
//Math.max	返回数值表达式中较大者
//Math.min	返回数值表达式中较小的值
//Math.random 	返回介于 0 和 1 之间的伪随机数。
//Math.round	四舍五入取整
//Math.ceil 	向上取整--返回大于等于其数字参数的最小整数。
//Math.floor	向下取整--返回小于等于其数值参数的最大整数。
//Math.sin 	返回数字的正弦值
//Math.cos	返回数的余弦值
//Math.sqrt 	返回数字的平方根。


<script>
	var num=Math.random();
	num=num*100;
	document.write(num+"<br>");

	document.write(Math.ceil(num)+"ceil向前取整<br>");
	document.write(Math.floor(num)+"向下取整<br>");
	document.write(Math.round(num)+"四舍五入取整<br>");

	var i=3;
	var i=Math.max(-6,Math.min(6,i));	取大于-6,小于6的数值

</script>










javascript中的正则对象
	第一种:
		re=/pattern/[flags]
	第二种:
		re=new RegExp('pattern',['flags'])
	
	re -- 变量名	pattern --正则表达式 用/字符分隔

	flags --  g (全文查找出现的所有 pattern)
		  i (忽略大小写)
		  m (多行查找)	


<script>
	var str = "username";
	if(str.match(/^\S+$/)){   //字串匹配非空连贯/
		alert('true');
	}else{
		alert('false');
	}


	var str1="ls3kjf5lk7ngr8ehv9sdn3m54m4nf4owef";
	var str2 =str1.replace('3','22222222');  //把字串str1中的3替换成222222
	document.write(str1+"<br>");
	document.write(str2+"<br>");
	var str3="ls3kjf5lk7ngr8ehv9sdn3m54m4nf4owef";
	var str4=str3.replace(/\d/,'#');	//将字串中的第一个数字换成#
	var str5=str3.replace(/\d/g,'#');	//将字串中的全部数字换成#
	document.write(str3+"<br>");
	document.write(str4+"<br>");
	document.write(str5);
</script>










js数组的声明与应用
1，只要是批量的数据都需要使用数组的声明
	一。数组的作用

	二，如何声明数组
		1.快速声明数组的方法
			var 数组名=[元素1，元素2，，，，元素N];
			var aa = [[111,222],['aaa','bbb'],['333','ccc']];
		2,用Array对象的方式声明数组
			var 变量=new Array('成员','成员'，，，);
	三，遍历数组
		
	四，数组的处理












DOM

	作用：
		DOM	(Document Object Model)

		1. document 指 HTML XML 文件 (带标签的标记性语言文档)
		<body>
			<div>
				<a>aaaaaa</a>
			</div>
		</body>
		
		2.Object 对象（HTML元素，转成的对象 （JS 对象））;

	
	DOM的操作

		操作属性，

		操作内容，
			innerText;   //此操作会把标签当文本，取值时不会取标签(IE)
			textContent  //同上， (非IE)
				
			innerHTML;   //这里标签会起作用，取值时会把对象下面的标签也一同取出来

			outerText	//只取出内容
			outerHTML 	//连同对象本身的标签及属性一起取出

			表单 取出对象内容时用 value
				value   //表单的操作不能用innerText 要用value

		操作样式.
			obj.style.backgroundColor="red";	//操作style属性

			obj.className="one two"; 	//操作类文件
			或
			obj.className='one';
			obj.className+=" two";
			
			obj.className="";		//清除样式


	转成对象的三种方式：
		1. 标记名（复数），
		2. ID (唯一)
		3. name(复数);

	var objs=document.getElementsByTagName('div') //用标记名转成对象
	var objs=document.getElementById('div');	//用id名转成对象
	var objs=document.getElementsByName('two');	//用name转成对象












