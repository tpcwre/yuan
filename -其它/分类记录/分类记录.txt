
//===== PHP相关
	//-- php.ini 配置参数
	
	//编码解码相关
	//-- json_encode(),json_decode(true) 数组或对象与json字串的转换
	//-- base64_encode(),base64_decode() BASE64 编码,可让中文在网络顺利传输。
	//-- 杠r杠n等一些特殊符号要使用双引号才会生效
	//-- php与js通讯时自动的转码的解决，（php与js 通讯的通用转码）
	
	//缓存相关
	//-- ob_clean(); PHP清除缓冲区内容
	
	//xml或其它数据处理相关
	//-- $GLOBALS["HTTP_RAW_POST_DATA"] 获取传输过来的xml或其它php不识别的原型数据
	//-- simplexml_load_string() 将xml转成对象
	
	//时间相关
	//-- mktime(0,0,0,12,30,1999) 按指定日期生成时间戳
	//-- date() 显示当前或指定时间戳的日期
	

	//超全局变量相关
	//-- $_SERVER['HTTP_USER_AGENT'] 获取浏览器相关信息的字串,关判断浏览器是否为IE类型



	//字串函数
	//-- strpos(str,str)	获取字串中某字符首次出现的位置
	//-- strspn(str,str,[start,length]) 查找字串2中字符在字串1中连续出现的个数
	//-- strcspn(str,str) 查找串1中连续且非串2中字符的个数
	
	


//===== JS 相关
	//-- JSON.paser(string)	将josn 字串 解析成 json对象 
	//-- JSON.stringify(obj)  将josn 对象 解析成 json字串 
	//-- input,select,textarea 内容改变事件及获取改变后的值
	//-- JS 使用 name 获取元素及表单值 
	//-- JS 通过类名获取元素及属性
	//-- JS 通过 name获取表单及其元素
	//-- JS 获取文件后缀名
	//-- JS函数 obj.lastIndexOf('x');	获取某字符最后一次出现的位置
	//-- JS函数 obj.length;		获取字串长度
	//-- JS函数 obj.substrng(start,end);	 截取从指定下标到指定下标区间的字符
	//-- JS函数 obj.lenght; 获取字串或数组长度
	//-- JS函数 new Array()创建数组
	//-- JS函数 obj.split('x') 将字串以指定字符分割为数组
	//-- JS函数 Math.floor() 向下取整
	//-- JS函数 Math.ceil() 向上取整
	//-- JS函数 Math.floor() 四舍五入

	






//===== H5 相关

	//-- 点击电话号可以进入手打界面











	
	
	

//===== mysql 相关
	//-- 查询mysql 各日志存储位置及状态
	//-- mysql 设置 binlog 日志存储位置
	//-- 使用 mysqldump 全库备份并重置binlog日志,及同时压缩备份文件
	//-- mysql 使用 备份文件恢复数据库
	//-- mysqlbinlog 查看mysql二进制备份文件
	//-- 使用二进制binlog日志恢复指定区间的数据 
	//-- 视图操作

	
	
	


//===== nginx 相关
	//-- nginx 包含多级子配置文件,重新指定服务根目录并绑定多域名及重写URL示例
	


//===== apache 相关

	//-- 指定 Apache 将哪些后缀作为 PHP 解析。







	
	
	
	
	
	
	
//===== JS 相关
	
	
//-- JSON.paser(string)	将josn 字串 解析成 json对象 
//-- JSON.stringify(obj)  将josn 对象 解析成 json字串 

	<script>
		a = "{"name":"aaa","age":18}";
		b = JSON.parse(a);
		alert(b.name);
		
		c = JSON.stringify(b);
		alert(c);
	</script>
	
	
	
	

//-- input,select,textarea 内容改变事件及获取改变后的值
	<input id="a" name="a" />
	<select id="b">
		<option>1</option>
		<option>2</option>
		<option>3</option>
	</select>
	<textarea id="c" ></textarea>
	<script>
		var a = document.getElementById("a");
		a.onchange=function(){
			alert(this.value);
		}
		
		var b = document.getElementById("b");
		b.onchange=function(){
			alert(this.value);
		}
		var c = document.getElementById("c");
		c.onchange=function(){
			alert(c.value);
		}
	</script>
	








//-- JS 使用 name 获取元素及表单值 
	var p1 = document.getElementsByName('price1')[0];



//-- JS 通过类名获取元素及属性

	var sp = document.getElementsByClassName('sihanplug');
	alert(sp[0].name);




//-- JS 通过 name获取表单及其元素

	<form action="" name="myform" onsubmit="return doAdd()">
		结 果：<input type="text" name="res" readonly style="border:0px;"/><br/><br/>
		<input type="button" value="求和" onclick='doAdd()'/>
	</form>
	
	document.myform.res.value=str;		//通过表单name myform 获取 元素 name 为res的元素，并设置其值 







	

//-- JS 获取文件后缀名
//-- JS函数 obj.lastIndexOf('x');	获取某字符最后一次出现的位置
//-- JS函数 obj.length;		获取字串长度
//-- JS函数 obj.substrng(start,end);	 截取从指定下标到指定下标区间的字符

	<script type="text/javascript">   
		var filename="www/data/index.php";  
		var index1=filename.lastIndexOf(".");  
		alert(index1);  
		var index2=filename.length;alert(index2);  
		var postf=filename.substring(index1,index2);//后缀名  
		alert(postf);  
	</script>  


	
//-- JS函数 obj.lenght; 获取字串或数组长度
//-- JS函数 new Array()创建数组
//-- JS函数 obj.split('x') 将字串以指定字符分割为数组
	<script>
		var arr = new Array();
		var str = 'jpg,png,gif';
		alert(str.length);
		arr = str.split(',');

		for(var i=0;i<arr.length;i++){
			alert(arr[i]);
		}
	</script>







//-- JS函数 Math.floor() 向下取整
//-- JS函数 Math.ceil() 向上取整
//-- JS函数 Math.round() 四舍五入

	alert(Math.floor(7/2));
	alert(Math.ceil(7/2));
	alert(Math.round(7/3));






































//===== PHP相关


//-- php.ini 配置参数
	//必须的指令： 
	extension_dir = <指向扩展库目录的路径> - extension_dir 需要指向存放 PHP 扩展库文件的目录。可以是绝对路径（如 "C:\PHP\ext"）或相对路径（如 ".\ext"）。在 php.ini 文件中要加载的扩展库都必须在 extension_dir 所指定的目录之中。 

	extension = xxxxx.dll - 对每个需要激活的扩展，都需要一行相应的 "extension=" 语句来说明 PHP 启动时加载 extension_dir 目录下的哪些扩展。 

	log_errors = On - PHP 有错误日志的功能可以将错误报告发送到一个文件中，或者系统服务中（例如系统日志），与下面的 error_log 指令配合工作。在 IIS 下运行时，log_errors 应被激活，并且配合有效的 error_log。 

	error_log = <指向错误日志文件的路径> - error_log 需要指向一个具有绝对或相对路径的文件名用于记录 PHP 的错误日志。Web 服务器需要对此文件有可写权限。最常用的位置是各种临时目录，例如 "C:\inetpub\temp\php-errors.log"。 

	cgi.force_redirect = 0 - 在 IIS 下运行时需要关闭此项指令。这是个在许多其它 web 服务器中都需要激活的目录安全功能，但是在 IIS 下如果激活则会导致 PHP 引擎在 Windows 中出错。 

	cgi.fix_pathinfo = 1 - 此指令可以允许 PHP 遵从 CGI 规则访问真实路径信息。IIS 的 FastCGI 实现需要激活此指令。 

	fastcgi.impersonate = 1 - IIS 下的 FastCGI 支持模拟呼叫用户方安全令牌的能力。这使得 IIS 可以定义请求方的安全上下文。 

	fastcgi.logging = 0 - FastCGI 日志在 IIS 下应被关闭。如果激活，则任何类的任何消息都被 FastCGI 视为错误条件从而导致 IIS 产生 HTTP 500 错误。 



	//可选指令： 
	max_execution_time = ## - 此指令设定任何脚本所能够运行的最长时间。默认值是 30 秒。如果 PHP 程序需要更多时间运行则增大此值。 

	memory_limit = ###M - PHP 进程能够占用的内存，单位为兆字节。默认值是 128M，对大多数程序都够用了。某些复杂程序可能需要更多。 

	display_errors = Off - 此指令设定 PHP 是否将任何错误信息包含在返回给 web 服务器的数据流中。如果设定为 "On"，则 PHP 将任何由 error_reporting 指令所定义的错误信息作为错误数据流发给 web 服务器。为安全起见，建议对在线服务器设为 "Off" 以避免泄露任何可能包含在错误消息中的安全敏感信息。 

	open_basedir = <指向目录的路径，由分号分隔> - 例如 openbasedir="C:\inetpub\wwwroot;C:\inetpub\temp"。此指令指定了允许 PHP 进行文件系统操作的目录。任何对这些目录之外的文件操作都会导致错误。此指令在共享主机环境中特别有用，可以阻止 PHP 脚本访问任何其网站根目录之外的文件。 

	upload_max_filesize = ###M 和 post_max_size = ###M - 分别是上传文件的最大大小和 POST 方法提交数据的最大大小。如果 PHP 程序需要上传大型数据例如照片和视频文件，则应提高这两项的值。 







//-- 杠r杠n等一些特殊符号要使用双引号才会生效

	换行等编码如 \n 等在使用时要注意：使用双引号时会生效，单引号时不生效，尤其是在Thinkphp的 ajax 异步传送时！



//-- php与js通讯时自动的转码的解决，（php与js 通讯的通用转码）

	两种语言都转码成url编码格式就可以通用了

	在JS中使用 encodeURIComponent(str) 或 decodeURIComponent(str) 来编解码成 url编码格式

	在PHP中使用 urlencode(str) 或 urldecode(str) 来编解码成url编码格式

	这样php和JS的通讯就可以申通无阻了

	例如 ：
		在JS中使用encodeURIComponent() 进行编码，在PHP中使用 urldecode() 来进行解码 
		或
		在PHP中使用urlencode() 来编码，在JS中使用decodeURIComponent() 来进行解码 







//-- mktime(0,0,0,12,30,1999) 按指定日期生成时间戳
	$a = mktime(0,0,0,12,30,1999);
	echo $a;		//946508400

//-- date() 显示当前或指定时间戳的日期
	echo date("Y-m-d H:i:s",$a);	//1999-12-30 00:00:00

	

//-- json_encode(),json_decode(true) 数组或对象与json字串的转换
	echo "<pre>";
	class obj{
		public $name = "aaa";
		public $age = 18;
	}
	$o = new obj();
	$oo = array("name"=>"aaa","age"=>18);

	//json_encode() 将对象或数组转成json字串
	$b = json_encode($o);		
	echo $b."<br>";
	$bb = json_encode($oo);
	echo $bb."<br>";

	////json_decode() 将json字串转成对象或数组。
	$c = json_decode($b);		//不带true，转对象，
	var_dump($c);
	$cc = json_decode($bb);
	var_dump($cc);

	$d = json_decode($b,true);	//带true 转数组
	var_dump($d);
	$dd = json_decode($bb,true);
	var_dump($dd);






//-- ob_clean(); PHP清除缓冲区内容

	尤其在使用ThinkPHP3.2.3的验证码时，总会出现不显示图像的错误 ，就要使用该函数来清除缓冲区内容，如下
		public function verify(){
				ob_clean();
				$verify = new \Think\Verify();    //使用默认样式
				$verify->entry();       //生成验证码
			}





//-- base64_encode(),base64_decode() BASE64 编码,可让中文在网络顺利传输。

	$b = base64_encode($a);
	echo $b;
	
	$c = base64_decode($b);
	echo $c;
	string base64_encode(string data);
	本函数将字符串以 MIME BASE64 编码。此编码方式可以让中文字或者图片也能在网络上顺利传输。在 BASE64 编码后的字符串只包含英文字母大小写、阿拉伯

数字、加号与反斜线，共 64 个基本字符，不包含其它特殊的字符，因而才取名 BASE64。编码后的字符串比原来的字符串长度再加 1/3 左右。更多的 BASE64 编码信

息可以参考 RFC2045 文件之 6.8 节。







//-- $GLOBALS["HTTP_RAW_POST_DATA"] 获取传输过来的xml或其它php不识别的原型数据

	 $xml = $GLOBALS["HTTP_RAW_POST_DATA"];		//获取到的xml数据







//-- simplexml_load_string() 将xml转成对象

	$obj = simplexml_load_string($xml,"SimpleXMLElement",LIBXML_NOCDATA);

		LIBXML_COMPACT - 激活节点的优化配置（可加速应用程序）
		LIBXML_DTDATTR - 设置默认的 DTD 属性
		LIBXML_DTDLOAD - 装载额外的子集
		LIBXML_DTDVALID - 验证 DTD 有效性
		LIBXML_NOBLANKS - 删除空节点
		LIBXML_NOCDATA - 将 CDATA 设置为文本节点
		LIBXML_NOEMPTYTAG - 扩展空标签（例如 <br/> 到 <br></br>），仅在 DOMDocument->save() 和 DOMDocument->saveXML() 函数中有效
		LIBXML_NOENT - 替代实体
		LIBXML_NOERROR - 不显示错误报告
		LIBXML_NONET - 装载文档时停止访问网络
		LIBXML_NOWARNING - 不显示警告报告
		LIBXML_NOXMLDECL - 当存储一个文档时放弃 XML 声明
		LIBXML_NSCLEAN - 删除多余的名称空间声明
		LIBXML_PARSEHUGE - 设置 XML_PARSE_HUGE 标志，用来放宽解析器的任何强制限制。这将影响诸如文档的最大深度和文本节点大小限制等。
		LIBXML_XINCLUDE - 使用 XInclude 替代
		LIBXML_ERR_ERROR - 获取可纠正的错误
		LIBXML_ERR_FATAL - 获取致命错误
		LIBXML_ERR_NONE - 不获取错误
		LIBXML_ERR_WARNING - 获取简单警告
		LIBXML_VERSION - 获取 libxml 版本（例如 20605 或 20617）
		LIBXML_DOTTED_VERSION - 获取带点的 libxml 版本（例如 2.6.5 或 2.6.17）





//-- $_SERVER['HTTP_USER_AGENT'] 获取浏览器相关信息的字串,关判断浏览器是否为IE类型
	
	echo $_SERVER['HTTP_USER_AGENT'].'<BR>';

	if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
		echo '正在使用 Internet Explorer。<br />';
	}else{
		echo '正在使用非IE';
	}





//-- strpos(str,str)	获取字串中某字符首次出现的位置
	echo strpos($_SERVER['HTTP_USER_AGENT'], '6.1');		

	//Mozilla/5.0 (Windows NT 6.1; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0
	//24





//-- strspn(str,str,[start,length]) 查找字串2中字符在字串1中连续出现的个数
	//注意：这里只会统计连续出现字串2中字符的个数，如出现了非串2中的字符，统计将会结束。
	$a='abcaa';
	$b='abc';
	echo strspn($a,$b);		//5 连续找到5个

	$a='abcada';
	$b='abc';
	echo strspn($a,$b);		//连续找到4个

	$a='abcdaa';
	$b='abc';
	echo strspn($a,$b);		//连续找到3个
	*/
	
	
	
	
//-- strcspn(str,str) 查找串1中连续且非串2中字符的个数
	$a='abcdefg';
	$b='dg';
	echo strcspn($a,$b);		//字串1中连续3个字符未匹配字串2

	$a='abcdefg';
	$b='efg';
	echo strcspn($a,$b);		//字串1中连续4个字符未匹配字串2

















//===== mysql 相关


	







//-- 查询mysql 各日志存储位置及状态

	mysql> show variables like "log_%";
	+----------------------------------------+--------------------------------------+
	| Variable_name                          | Value                                |
	+----------------------------------------+--------------------------------------+
	| log_bin                                | ON                                   | 	binlog 是否开启
	| log_bin_basename                       | /usr/local/mysql/var/mysql-bin       |	binlog 存储位置
	| log_bin_index                          | /usr/local/mysql/var/mysql-bin.index |	binlog 文件名
	| log_bin_trust_function_creators        | OFF                                  |
	| log_bin_use_v1_row_events              | OFF                                  |
	| log_error                              | /usr/local/mysql/var/tpcwrework.err  |	mysql错误日志位置
	| log_output                             | FILE                                 |
	| log_queries_not_using_indexes          | OFF                                  |
	| log_slave_updates                      | OFF                                  |
	| log_slow_admin_statements              | OFF                                  |
	| log_slow_slave_statements              | OFF                                  |
	| log_throttle_queries_not_using_indexes | 0                                    |
	| log_warnings                           | 1                                    |
	+----------------------------------------+--------------------------------------+
	
	
	
	
	

	
//-- mysql 设置 binlog 日志存储位置

	找到 mysql运行时使用的配置文件（默认为/etc/my.cnf）
		修改 [mysqld] 区块 下的  log-bin= 路径 即可，如下 ：
		log-bin=/usr/local/mysql/log/m-bin
	

	
	
	
	
//-- 使用 mysqldump 全库备份并重置binlog日志,及同时压缩备份文件

	mysqldump -uroot -pxiaodong123 --single-transaction --flush-logs --master-data=2 --all-databases --delete-master-logs | gzip> /usr/local/mysql/logzip/`date +%Y%m%d%H%M%S`.sql.gz
	
		--single-transaction	锁定事务表
		--flush-logs			刷新使用文件
		--all-databases			全库备份
		--master-data=2 
 		 			1：从服同步主服时完全同步
  					2：从服同步主服时要指定开始同步的节点
		--delete-master-logs	删除master 日志
		| gzip 					将备份文件直接以gzip格式压缩
		`date +%Y%m%d%H%M%S`	使用当前时间做备份文件名



		
		
		

//-- mysql 使用备份文件恢复数据库

	mysql -uroot -p 	//先登陆mysql

	source /usr/local/mysql/logzip/full.sql		//使用备份文件恢复数据库
	
	
	



//-- 使用 mysqlbinlog 查看mysql二进制备份文件

	mysqlbinlog m-bin.0000007		//查看指定的二进制文件






//-- 使用二进制binlog日志恢复指定区间的数据 

	mysqlbinlog --stop-position="4947" m-bin.000007 | mysql -uroot -p	
		//用 m-bin.000007 文件恢复节点4947之前的数据

	mysqlbinlog --start-position="120" m-bin.000007 | mysql -uroot -p	
		//用 m-bin.000007 文件恢复节点120之后的数据
	
	mysqlbinlog --start-position="120" --stop-position="4947" m-bin.000007 | mysql -uroot -p	
		//用 m-bin.000007 文件恢复节点120至4947之间的数据



	
	
	
	

//-- 视图操作

	//视图详解 

	//语法
	create algorithm=算法 view 视图名 as select语句 with 更新条件

		algorithm = undefined | merge | temptable 		可选
				undefined	MySQL将自动选择所要使用的算法
				merge		将视图的语句与视图定义合并起来，使得视图定义的某一部分取代语句的对应部分
				temptable	将视图的结果存入临时表，然后使用临时表执行语句


		view 视图名			必选

		as select 语句			必选

		with CASCADED check option	可选
				WITH CHECK OPTION表示更新视图时要保证在该试图的权限范围之内（可选参数）
		　　		CASCADED：更新视图时要满足所有相关视图和表的条件
		　　		LOCAL：更新视图时，要满足该视图本身定义的条件即可




	//示例三表关联视图
	create algorithm=merge view tp_perm_lan_view(id,name,addr,pid1,name1,pid2,name2) as select l3.id,l3.name,l3.addr,l3.pid1,l1.name name1,l3.pid2,l2.name name2 from ((tp_perm_lan3 l3 join tp_perm_lan2 l2) join tp_perm_lan1 l1) where ((l3.pid2 = l2.id) and l3.pid1 = l1.id);

	//带排序 
	create algorithm=merge view tp_perm_lan_view(id,name,addr,pid1,name1,pid2,name2) as select l3.id,l3.name,l3.addr,l3.pid1,l1.name name1,l3.pid2,l2.name name2 from ((tp_perm_lan3 l3 join tp_perm_lan2 l2) join tp_perm_lan1 l1) where ((l3.pid2 = l2.id) and l3.pid1 = l1.id) order by l3.pid1 asc;


	//带with条件，更新视图时要满足所有相关视图和表的条件
	create algorithm=merge view tp_perm_lan_view(id,name,addr,pid1,name1,pid2,name2) as select l3.id,l3.name,l3.addr,l3.pid1,l1.name name1,l3.pid2,l2.name name2 from ((tp_perm_lan3 l3 join tp_perm_lan2 l2) join tp_perm_lan1 l1) where ((l3.pid2 = l2.id) and l3.pid1 = l1.id) with CASCADED check option;

	
	
	
	
	
	
	
	
	
	







//===== nginx 相关


//-- nginx 包含多级子配置文件,重新指定服务根目录并绑定多域名及重写URL示例

	nginx.conf 主配置页面
	    server {
			listen 80;
			server_name _;
			access_log /data/wwwlogs/access_nginx.log combined;
			root /data/wwwroot/default;
			index index.html index.htm index.php;
			include vhost/in2.conf;		//引入子配置
		}

		
	in2.conf 子配置页面
		server {
			listen 80;
			server_name test.tobeyoung.net;		//绑定域名，每个配置文件中可以绑不同域名，来达到绑定多域名
			root /data/wwwroot/test.tobeyoung.net;	//绑定访问根目录：当访问上面的域名时会自动访问这个目录
			access_log /data/wwwlogs/test.tobeyoung.net_nginx.log combined;
			index index.html index.htm index.php;
			include thinkphp.conf;	//引入重写规则配置文件
		}
		
		
	thinkphp.conf 子配置文件
		location / {
			if (!-e $request_filename) {
				rewrite ^(.*)$ /index.php?s=$1 last;	
				break;
			}
		}

	











//===== apache 相关

	//-- 指定 Apache 将哪些后缀作为 PHP 解析。
		例如，让 Apache 把 .php 后缀的文件解析为PHP。可以将任何后缀的文件解析为 PHP，只要在以下语句中加入并用空格分开。这里以添加一个 .phtml 来示例。

     		AddType application/x-httpd-php .php .phtml














//===== H5 相关

	//-- 点击电话号可以进入手打界面

		<a href='tel:13844552222'>13844552222</a>




